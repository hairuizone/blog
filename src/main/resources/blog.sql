/*
SQLyog Ultimate v12.08 (64 bit)
MySQL - 5.6.12 : Database - blog
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`blog` /*!40100 DEFAULT CHARACTER SET utf8 */;

USE `blog`;

/*Table structure for table `artical` */

DROP TABLE IF EXISTS `artical`;

CREATE TABLE `artical` (
  `ID` int(11) NOT NULL AUTO_INCREMENT COMMENT '自增主键',
  `AUTHOR` varchar(255) DEFAULT NULL COMMENT '作者',
  `ORIGINAUTHOR` varchar(255) DEFAULT NULL COMMENT '原文作者',
  `ORIGINURL` varchar(255) DEFAULT NULL COMMENT '原文URL',
  `TITTLE` varchar(255) DEFAULT NULL COMMENT '标题',
  `IMGPATH` varchar(50) DEFAULT NULL COMMENT '背景图片路径',
  `CONTENT` longtext COMMENT '内容',
  `TAGS` varchar(255) DEFAULT NULL COMMENT '标签',
  `NAVID` int(11) DEFAULT NULL COMMENT '导航编号',
  `TOPICID` varchar(255) DEFAULT NULL COMMENT '专题编号',
  `CATEGORIES` int(11) DEFAULT NULL COMMENT '分类',
  `TYPE` varchar(255) DEFAULT NULL COMMENT '类型（原创/转载）',
  `CREATEDATE` varchar(50) DEFAULT NULL COMMENT '创建日期',
  `UPDATEDATE` varchar(50) DEFAULT NULL COMMENT '更新日期',
  `ARTICALURL` varchar(100) DEFAULT NULL COMMENT '文章URL',
  `SUMMARY` varchar(500) DEFAULT NULL COMMENT '摘要',
  `LASTARTICALID` bigint(20) DEFAULT NULL COMMENT '上一篇文章编号',
  `NEXTARTICALID` bigint(20) DEFAULT NULL COMMENT '下一篇文章编号',
  `LIKENUMS` int(11) DEFAULT NULL COMMENT '喜欢',
  `DISSNUMS` int(11) DEFAULT NULL COMMENT '不喜欢',
  `INTOP` varchar(1) DEFAULT NULL COMMENT '是否置顶',
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=121 DEFAULT CHARSET=utf8 COMMENT='文章';

/*Data for the table `artical` */

insert  into `artical`(`ID`,`AUTHOR`,`ORIGINAUTHOR`,`ORIGINURL`,`TITTLE`,`IMGPATH`,`CONTENT`,`TAGS`,`NAVID`,`TOPICID`,`CATEGORIES`,`TYPE`,`CREATEDATE`,`UPDATEDATE`,`ARTICALURL`,`SUMMARY`,`LASTARTICALID`,`NEXTARTICALID`,`LIKENUMS`,`DISSNUMS`,`INTOP`) values (1,'老干部','','','李开复给女儿的信：你该如何度过大学生涯','images/4.jpg','Dear Daughter: \r\n亲爱的女儿： \r\n　　As we drove off from Columbia, I wanted to write a letter to you to tell you all that is on my mind. \r\n\r\n当我们开车驶出哥伦比亚大学的时候，我想写一封信给你，告诉你盘旋在我脑中的想法。 \r\n\r\n　　First, I want to tell you how proud we are. Getting into Columbia is a real testament of what a great well-rounded student you are. Your academic, artistic, and social skills have truly blossomed in the last few years. Whether it is getting the highest grade in Calculus, completing your elegant fashion design, successfully selling your painted running shoes, or becoming one of the top orators in Model United Nations, you have become a talented and accomplished young woman. You should be as proud of yourself as we are. \r\n\r\n首先，我想告诉你我们为你感到特别骄傲。进入哥伦比亚大学证明你是一个全面发展的优秀学生，你的学业、艺术和社交技能最近都有卓越的表现，无论是你在微积分上得了最高分，完成自己典雅的时尚的设计，成功卖出绘制的跑鞋，还是在“模拟联合国”演说中成为表现最突出的人之一，你毫无疑问已经是一个多才多艺的女孩。你的父母为你感到骄傲，你也应该像我们一样为自己感到自豪。 \r\n\r\n　　I will always remember the first moment I held you in my arms. I felt a tingling sensation that directly touched my heart. It was an intoxicating feeling I will always have. It must be that \"father-daughter connection\" which will bind us for life. I will always remember singing you lullaby while I rocked you to sleep. When I put you down, it was always with both relief (she finally fell asleep!) and regret (wishing I could hold you longer). And I will always remember taking you to the playground, and watching you having so much fun. You were so cute and adorable, and that is why everybody loved you so. \r\n\r\n我会永远记得第一次将你抱在臂弯的那一刻，一种新鲜激动的感觉瞬间触动了我的心，那是一种永远让我陶醉的感觉，就是那种将我们的一生都联结在一起的“父女情结”。我也常常想起我唱着催眠曲轻摇你入睡，当我把你放下的时候，常常觉得既解脱又惋惜，一方面我想，她终于睡着了！另一方面，我又多么希望自己可以多抱你一会儿。我还记得带你到运动场，看着你玩得那么开心，你是那样可爱，所有人都非常爱你。 \r\n\r\n　　You have been a great kid ever since you were born, always quiet, empathetic, attentive, and well-mannered. You were three when we built our house. I remember you quietly followed us every weekend for more than ten hours a day to get building supplies. You put up with that boring period without a fuss, happily ate hamburgers every meal in the car, sang with Barney until you fell asleep. When you went to Sunday Chinese school, you studied hard even though it was no fun for you. I cannot believe how lucky we are as parents to have a daughter like you. \r\n\r\n你不但长得可爱，而且是个特别乖巧的孩子。你从不吵闹、为人着想，既听话又有礼貌。当你三岁我们建房子的时候，每个周末十多个小时你都静静地跟着我们去运建筑材料，三餐在车上吃着汉堡，唱着儿歌，唱累了就睡觉，一点都不娇气不抱怨。你去上周日的中文学习班时，尽管一点也不觉得有趣，却依然很努力。我们做父母的能有像你这样的女儿真的感到非常幸运。 \r\n\r\n　　You have been an excellent elder sister. Even though you two had your share of fights, the last few years you have become best friends. Your sister loves you so much, and she loves to make you laugh. She looks up to you, and sees you as her role model. As you saw when we departed, she misses you so much. And I know that you miss her just as much. There is nothing like family, and other than your parents, your sister is the one person who you can trust and confide in. She will be the one to take care of you, and the one you must take care of. There is nothing we wish more than that your sisterhood will continue to bond as you grow older, and that you will take care of each other throughout your lives. For the next four years, do have a short video chat with her every few days, and do email her when you have a chance. \r\n\r\n你也是个很好的姐姐。虽然你们姐妹以前也会打架，但是长大后，你们真的成为了好朋友。妹妹很爱你，很喜欢逗你笑，她把你当成她的榜样看待。我们开车离开哥大后，她非常想你，我知道你也很想她。世界上最宝贵的就是家人。和父母一样，妹妹就是你最可以信任的人。随着年龄的增长，你们姐妹之间的情谊不变，你们互相照应，彼此关心，这就是我最希望见到的事情了。在你的大学四年，有空时你一定要常常跟妹妹视频聊聊天，写写电子邮件。 \r\n\r\n　　College will be the most important years in your life. It is in college that you will truly discover what learning is about. You often question \"what good is this course\". I encourage you to be inquisitive, but I also want to tell you: \"Education is what you have left after all that is taught is forgotten.\" What I mean by that is the materials taught isn\'t as important as you gaining the ability to learn a new subject, and the ability to analyze a new problem. That is really what learning in college is about – this will be the period where you go from teacher-taught to master-inspired, after which you must become self-learner. So do take each subject seriously, and even if what you learn isn\'t critical for your life, the skills of learning will be something you cherish forever. \r\n\r\n大学将是你人生最重要的时光，在大学里你会发现学习的真谛。你以前经常会问到 “这个课程有什么用”，这是个好问题，但是我希望你理解：“教育的真谛就是当你忘记一切所学到的东西之后所剩下的东西。”我的意思是，最重要的不是你学到的具体的知识，而是你学习新事物和解决新问题的能力。这才是大学学习的真正意义——这将是你从被动学习转向自主学习的阶段，之后你会变成一个很好的自学者。所以，即便你所学的不是生活里所急需的，也要认真看待大学里的每一门功课，就算学习的技能你会忘记，学习的能力是你将受用终身的。 \r\n\r\n　　Do not fall into the trap of dogma. There is no single simple answer to any question. Remember during your high school debate class, I always asked you to take on the side that you don\'t believe in? I did that for a reason -- things rarely \"black and white\", and there are always many ways to look at a problem. You will become a better problem solver if you recognized that. This is called \"critical thinking\", and it is the most important thinking skill you need for your life. This also means you need to become tolerant and supportive of others. I will always remember when I went to my Ph.D. advisor and proposed a new thesis topic. He said \"I don\'t agree with you, but I\'ll support you.\" After the years, I have learned this isn\'t just flexibility, it is encouragement of critical thinking, and an empowering style of leadership, and it has become a part of me. I hope it will become a part of you too. \r\n','',3,NULL,6,'yc','2019-03-09',NULL,NULL,'Dear Daughter: \r\n亲爱的女儿： \r\n　　As we drove off from Columbia, I wanted to write a letter to you to tell you all that is on my mind. \r\n\r\n当我们开车驶出哥伦比亚大学的时候，我想写一封信给你，告诉你盘旋在我脑中的想法。 \r\n',NULL,NULL,NULL,NULL,NULL),(2,'老干部','心柔','http://www.duwenzhang.com/wenzhang/renshengzheli/ganwu/20181019/395166.html','余生，请善待自己的父母','images/8.jpg','> 生命来来往往，来日并不方长。时光如水流逝，岁月无声催老。每一天，都过得忙忙碌碌，每一天，都有不同的精彩。春花秋月，夏雨冬雪，走过了一程又一程，蓦然回首，便已是上有老下有小的年纪。\r\n\r\n###### 曾经年少，不解父母辛劳，一路成长，一路依靠。所谓养儿方知父母恩，为人父母之后，自己如何操劳，如何不易，唯有经历过后，才知其中艰辛。这世上，从来就没有什么感同身受，唯有亲身经历，才能深解其味。\r\n\r\n###### 　　人生，就是一场轮回，年轻的时候，谁不为子女奔波劳累，待到子女羽翼已丰，不再需要护佑之时，自己已是夕阳暮景。而那些曾经的子女，也会成为新的父母，一如自己的父母那般，勤勤恳恳，为自己的子女操劳负累，待到子女再次长成，自己便也老去。\r\n\r\n###### 　　谁都有年迈之时。幼时，父母耐心教导，周全照料，待到父母暮年，我们是否也能如同曾经他们对待我们那般，不嫌不怪，周全仔细，用心侍奉。\r\n**人生，总是吃过生活的苦，才知道幸福有多甜蜜；走过太多弯路，才明白自己要怎么活。衡量幸福的标准，不是你得到了多少，而是要看你当下拥有多少，并且，要懂得珍视。**\r\n\r\n　　在这个世界上，父母，是唯一尽心付出却不求回报的人，也是最不愿意给我们添麻烦的人。都说，做父母是有有效期的，其实，做儿女又何尝不是？子欲养而亲尚待，绝对是上天给予的最大恩赐。趁父母还年轻，趁父母还健在，多陪陪他们吧。不要整天只知道在朋友圈说什么父母在，人生尚有来处，父母去，人生只剩归途。多拿出些实际行动，去做，去实现。\r\n\r\n　　不要总说自己没时间，真正没时间的不是我们，而是那一天比一天更加老去的父母。他们内心的孤独，对子女的渴盼，以及在那岁月深处，面对迟暮的恐慌，才是最需要我们抓紧时间去慰藉的。\r\n\r\n　　老人的那一代，远不及我们现在条件好，但不论怎样，他们依旧护我们健康茁壮的成长。而今，他们逐渐年纪大了，不要觉得反正也老了，凡事就给他们凑合。正因为老了，来日并不方长了，所以才更应该尽自己所能，给他们创造一些好的生活质量。\r\n\r\n　　少一些玩手机的时间，多给父母买一件像样的衣服；少一次聚会的时间，多陪父母说说话。他们想要吃什么，就给他们买点什么，不要舍不得，不要怕花钱，只要老人健康，不生病，光他们那点吃喝穿戴，又能花得了多少钱。有空的时候，也给父母安排一次说走就走的旅行，去他们想去的地方，看他们想看的风景，完成他们未完成的心愿，满足他们一直想要的渴求。\r\n\r\n　　不要觉得父母还有健康的体魄，闲暇的时间，就觉得他们还应该为我们做些什么。带孩子，收拾家，麻烦这些事情我们自己来做，老人已经辛劳了大半辈子了，熬盼了多久，才能熬到如今子女已长成，工作也已功成身退的光景。他们也需要一点时间为自己而活，他们也需要好好的享受一下自己生命的光彩，不论成与败，他们将我们抚育成人，就是最大的成就。\r\n\r\n　　很多事情，都是拥有的时候，不疼不痒毫不在意，失去了以后才知道珍惜，追悔莫及。当白发换走青丝，当皱纹刻于脸颊，才突然惊觉，原来父母，已然老去。幸好，已经发现，一切还算来得及。\r\n\r\n　　不要计较父母曾经偏爱了谁，做错了什么，付出了多少。尽孝这件事，不需要任何条件和理由，只管做自己就好。善待老人，就是善待明天的自己。多少年以后你就会发现，善待老人，不光是一种报恩，更是对自己内心的成全。\r\n\r\n　　完美人生，不是要得到别人的喝彩，而是要活出自己的精彩。不是要成就多少，而是要不留遗憾。余生，请活好自己，更请善待老人，你便此生无憾。\r\n\r\n\r\n','#人生感悟#',1,NULL,6,'zz','2019-03-09',NULL,NULL,'生命来来往往，来日并不方长。时光如水流逝，岁月无声催老。每一天，都过得忙忙碌碌，每一天，都有不同的精彩。春花秋月，夏雨冬雪，走过了一程又一程，蓦然回首，便已是上有老下有小的年纪。',NULL,NULL,NULL,NULL,NULL),(3,'老干部','心若雨汐 ','http://www.duwenzhang.com/wenzhang/aiqingwenzhang/ganwu/20180918/394279.html','不想结婚的姑娘 最后大多嫁给了爱情','images/5.jpg','# 一、我应该嫁给爱情么？还是嫁给现实\r\n曾有个密友问我，她说：“亲爱的，女生到底是应该嫁给爱情，还是嫁给现实呢？嫁给现实，无非就是自己少奋斗几年。而后用10数年的时间去后悔。不过这么说也算牵强，身边不乏些嫁给现实的朋友，在柴米油盐的生活中不仅慢慢习惯上了对方的存在，那种习惯略带些依赖的味道，并在长此以往的依赖中得了一种病，药石无医-懒癌晚期。”\r\n\r\n　　她说自己最近认识了一个男生，对方有车有房有存款，只是自己对他不曾看对眼。\r\n\r\n　　我说；“既然你不喜欢他，那为何要纠结呢。你有没有想过另一半是陪伴你走完一生的人。不喜欢不如直接回绝了人家，两不耽误，各自再找。而你又有赚钱的能力，嘴上总是挂着靠人不如靠己的字眼，既然不靠对方经济补给，那结果自然明了。后来我听说，她之所以苦恼，全因母亲的一席话。\r\n\r\n　　“什么都比不上有个属于自己的家不是么？感情都是可以慢慢培养的。在我们那个年代基本上都是亲朋好友给介绍，见见面走个过场便走在一起水到渠成。哪有那么多矫情，见怪不怪的。甚至我的上一辈还是受父母之命呢，爱情有用么，穷苦夫妻百事哀。就算你们之间的爱情浓烈到坚贞不渝也终会为现实所败，巧妇难为无米之炊。你看你你表姐跟着另一半满世界的旅行，你不眼气么？”为人父母，大都喜欢这样教育子女。父母不是你感情经历的亲身体验者，因此他们有时候抛出的观点，直观理性但又武断片面。“不听老人言，吃亏在眼前。“然而，对于爱情我从来都是借鉴些我认为对的地方，并不会全盘吸纳。\r\n\r\n　　有房又如何？房子没法给我这种人安全感。现实世界中我很理性，我清楚自己要的什么。然而当我遇上喜欢的人，我是很感性的。没有爱作为精神纽带的婚姻我觉得索然无味。人活一世不过3万多天，人生苦短，不容后悔。\r\n\r\n　　如果你是个“圣斗士”或许你的家人即便知道你心不属他，可仍旧会强撮合，只因这个对象他们看着还不错，又怕你错失了他“你找不着怎么办”。但我想劝叔叔阿姨一句：“古话说的好，强扭的瓜不甜。”我想对那些如闺蜜般夹杂其中，不停苦恼的女孩说一声：“你有追求幸福的权力，选择权只在你自己手里，别人的话只能是参考，如果你并不认为那是对的，让他如云烟般路过就好。别人不是你，不会有你的感同身受。当事人以外的人的话语多少带有些片面的意味。”\r\n\r\n　　说到这，我同那位朋友的观点默契的达成一致，好的感情，你是我的，我是你的。而我们又都是属于自己的。感情在于沟通，沟通的首要前提便是有话聊，你们可以有不同的爱好，但尊重、接受便好。你们之间的交流是否可以由浅入深，是否带有营养。并在某种程度上达成统一，这才是关键。三观不同的人同处同一屋檐，你们对周遭审度不同，再好的感情基础也是白费。更何况你们也不具有共同的感情经历。好的感情是彼此间的信任、是我们之间有同进步共患难的决心，而不是空有一个能够躲雨的巢穴，心与心之间毫无交流。即使你终究败给现实，想象一下当你每天对着一个无话聊的人，那种尴尬叫做无奈。\r\n\r\n　　有温度的才叫家，没温度的叫住所。说的难听些，你走后就连这个住所中的一砖一瓦都带不走，还跟我谈什么曾经拥有。\r\n\r\n　　你是嫁给爱情，还是嫁给临时住所呢？对相爱的人来说婚姻是神圣的殿堂，而不爱的，那叫坟墓。\r\n\r\n\r\n# 二、我爱你，更爱与你在一起时我的样子\r\n我曾在网上看到这样一个案例， 通读过后，我为男女主人公间的爱深深折服。这是一对恋人，他们结婚的时候没有车、房，吝啬的就连仪式、亲朋间的祝福都没有。然而女孩并没有后悔，她说：“年轻的时候反而不懂爱情，只是想简单找个对自己好的人。他对我好，所以我嫁了。\r\n\r\n　　“刚刚恋爱的那段时间，他们住在廉价的出租房，挤狭小的卫生间，拿着微薄的工资，过着青黄不接的日子。她说：”最难熬的日子，我们都一起度过了。“结婚十年，她事业稳定，她老公的事业也蒸蒸日上。两个人不光在市区买了房子，男人得到了女人家里的认可。其实幸福从来都来得好不容易，两个人在一起十多年，早就把两个人的生活过成了一个人。\r\n\r\n　　女人说：“自己动手，丰衣足食。”男人却说：“为了心爱的人再苦再累都无所谓，每天拖着疲惫的身子看着她系着围裙站在厨房面带微笑的做着晚餐，那一刻我觉得自己是世界上最幸福的人。“男人时常觉着自己欠妻子一个仪式，于是偷偷的在十周年那天精心布置了一场迟来的求婚仪式。\r\n\r\n　　她未曾想这场惊喜这么突然，虽然这一天在她意料之中，结果还是被感动得一塌糊涂。然好事刚过。坏事便接踵而来，婚后不久她经历了一场严重车祸，这次车祸给她造成了片段式的失忆是永久性的。包括她的父母，朋友，这些张熟悉的面孔一一从她的世界彻底删除。那些天只要她清醒过来，便不断向身边人求助，“我要找我老公”本能的情感依赖，其实就是一种深爱。\r\n\r\n　　这份深爱是我忘却了世界，唯独忘不了你。你看我即使忘记了我们的一二事，我还是绝对信任你啊。他说：“只要她能醒过来，忘记就忘记吧，不管她变成什么样子，我依然爱她。大不了，我们重新开始，从我叫什么开始。\r\n\r\n　　只要她还活着，我们还有大把的时间足够我们再好好爱一回。“那之后，他日夜守在医院里陪伴她，这期间他的朋友不是没出过劝他再找的主意，他狠狠的说：”再说这样的话，绝交。世上好女孩万万千，我爱的只有这一人。“\r\n\r\n　　好的爱情大抵就是这个样子，不论你变成什么样子，我都欣然接受，依然爱你。夫妻本是同林鸟，大难临头各自飞。在好的爱情面前这条定理并不受用。\r\n\r\n\r\n# 三、阿娇结婚：谢谢你出现，我还以为遇不到你了\r\n好的爱情会迟到，但它从不曾缺席。在不爱你的人面前我懂得了生活艰辛、学会了迎着风雨奔跑。在爱你的人面前，你明白了爱的真谛。可能爱情就是，有人曾深深地伤害过你还一笑而过。于是，你失望了，你觉得好像整个世家都抛弃了你，你觉得自己存在的本身就是天大的笑话。然而直到另一个人的出现，他用自己的行动告诉你他爱你，他不在意你有怎样的过去，就算你很糟糕，他爱的恰好就是此刻站在眼前那个最糟糕的女孩。你不用很好，我爱你便好。\r\n\r\n　　如果说生活曾带给你各种各样的亏欠，那么请相信总有一个人会弥补生活带给你的全部亏欠。\r\n\r\n　　即使世界荒芜了，也要相信总有一个人会是你的信徒。不论你是好是坏，也不管你是谁，你都是我的信仰。\r\n\r\n　　阿娇结婚了，穿着抹胸婚纱的她，光彩照人，那一天她是这个世上最美的女人。她也终于验证了自己歌里的那句话：最后变天后，变新娘，都是理想。\r\n\r\n　　想起阿娇曾经唱过的那首《下一站天后》，里面有一句话跟她的爱情观很契合：“其实心里最大的理想，跟他归家为他唱。“\r\n\r\n　　阿娇曾说，她要找一个很帅的男人结婚，艳照门事件后，她开始忽略颜值。阿娇曾失声痛哭的说，再没有人会娶我。在那段时间里，仍旧有人喜欢她、慢慢爱上她。只是，从未有人想过给那个看似坚强而内心深处总是敏感而受伤的女孩一个未来。\r\n\r\n　　对于一个相信爱的女孩来说：我可以接受你的不完美，我可以接受把我仅有的面包分一半给你。但我最怕的是无论我付出多少，怎样付出。都打动不了你。你描绘的那个未来很美，只是多余一个我。\r\n\r\n　　时间兜兜转转，27到37，一个女人最好的黄金年龄已然过去，如果换作意志不坚定的女孩或许早就不等了，可这个人偏偏是阿娇，我曾看过一期阿娇的专访，30多岁的她谈及那场遭人唾弃的爱恋，她的眼圈还是会泛红。泪水的含义或许更多的还是放不下吧。\r\n\r\n　　我给了你一颗心，一颗纯粹赤诚的爱你的心，后来你走了，我发现我的心空荡荡的。好像少了点什么。\r\n\r\n　　今年五月，阿娇结婚的消息一度上了热搜。阿娇找到了一个很帅的男人，没有复杂的情史，也不会计较她的过去。只是单纯的想和她走完一生。他给了她一场浪漫的婚礼，让她如愿做上最美的新娘。婚礼上，致词讲到：“走到今天好不容易…”时，阿娇哭得很厉害，然最先流泪的不是阿娇，而是那个很爱她的男人。\r\n\r\n　　他笑着告诉她，娶到你真好。终于等到你，还好我没有放弃。\r\n\r\n　　爱是什么，爱就是在对的时间遇到对的人，而错误的时间里，你付出爱的那个人终究是浮云自眼前一过。幸好，你即使遍体鳞伤也也依然愿意相信爱。\r\n# 四、好的爱情，是你可以做自己，简单而美好\r\n我觉得一段感情好不好，在女孩子身上就能体现的出来。一个女孩子自信幽默，举止落落大方，那她的身后肯定有一个愿意宠她、疼她的人。这个人用自己的行动去保护她本脆弱的自尊心。所以她说话做事的时候才不会畏手畏脚，踌躇不前，更不会为了一件事像一个神经病一样患得患失。\r\n\r\n　　其实世界上好的爱情就是这样的，对错不重要，只要有爱，就会有偏袒去宠着。爱给你一个支点，让你宽容温和的去面对这个并不完美的世界。\r\n\r\n　　就如张小娴说的那样：你要等对的人的时候，自己可能也不知道怎样才是对的人，只有当那个人出现，你才会知道，他应该就是那个对的人，他在你生命中出现，也是为了满足你，也让你去完善自己。\r\n\r\n　　嫁给爱情的女孩大多在接受爱的同时，学会了奉献爱，她们懂得付出和包容，并设身处地的为另一半未雨绸缪。她们往往戒掉了本身自带的小脾气，变得温和从容、平易近人。如果你发现一个女人如泼妇般骂街，哪怕一件微不足道的小事都要斤斤计较，锱铢必较。我想或许是她过得不够好吧。\r\n\r\n　　也许会晚点遇见你，无论你是二十岁还是三十岁，但我仍坚信，那个爱我、懂我、惜我的人会穿越人海，只为给我一个爱的港湾。在这之前，你要做的就是善待自己，让自己试着独立、拥有一个不依赖旁人的独立人格，答应我，好吗？\r\n\r\n　　心若雨汐：你还相信爱吗？不过，我是一如既往的相信着，等待着。\r\n','#爱情故事#',1,NULL,6,'zz','2019-03-09',NULL,NULL,'曾有个密友问我，她说：“亲爱的，女生到底是应该嫁给爱情，还是嫁给现实呢？嫁给现实，无非就是自己少奋斗几年。而后用10数年的时间去后悔。不过这么说也算牵强，身边不乏些嫁给现实的朋友，在柴米油盐的生活中不仅慢慢习惯上了对方的存在，那种习惯略带些依赖的味道，并在长此以往的依赖中得了一种病，药石无医-懒癌晚期。”',NULL,NULL,NULL,NULL,NULL),(4,'老干部','笔砚先生  ','http://www.duwenzhang.com/wenzhang/youqingwenzhang/20180213/385395.html','如果我死了·若是有来生','images/3.jpg','> 很久都不曾写过文章了，上一篇文章还是四个月之前的。以此去命题，并非有什么轻生的念头，只是有感而发，勿念。其实我很想做个自私的人，因为这会让你吃尽苦头又吃足了甜头。而你却依然活的天真活的开心——序。\r\n\r\n如果我死了\r\n\r\n　　如果我死了，那些愧对我的人会很开心：终于不用还钱了，哎呀，不然真不知道怎么办那，不敢见他，吓得我朋友圈都不敢发了！不对，我这样的人怕他干嘛？反正也不能把我怎么样。我每天活的多潇洒，灯红酒绿左拥右抱的。怕他干嘛，我是没错的，我怎么能委屈自己那？我要活的开心就不能在乎那么多，人这一辈子就是有舍有得，凭自己本事借的钱为什么要还？——不用还。\r\n\r\n　　如果我死了，那些我曾追求的人会很开心：每天烦我，我怎么知道喜不喜欢他？可能喜欢吧，可能不喜欢？无所谓了反正他都死了。哎呀，他一死去，就没人对我嘘寒问暖请我吃饭了，没人每天担心我了！算了，毕竟我这么漂亮，比不上明星也有自己的亮点，还会有下一个傻子不顾一切追求我的。可下一个人什么时候出现那？这么想来我还是亏本的啊，我怎么能做亏本的买卖——不能！他要是不死去多好，还能多一个追求者！我不喜欢他，我只是喜欢他追我无条件对我好，我这么做是有道理的，哪个人是不渴望被人爱的孩子那？我还是个孩子啊，我渴望人爱我追求我不图回报的对我好，我接受他的好有错吗？我是没错的？——恩。\r\n\r\n　　如果我死了，那些高谈阔论肆无忌惮吹牛逼的人会心头一震：他怎么死了？他不能死啊，他一死没人听我吹嘘了。我那些“丰功伟绩”辉煌历史，我那些绝地反击的故事跟谁炫耀啊？我曾经多么励志，我曾经多么孝顺，我曾经多么受人尊敬我曾经多么爱家人爱工作啊！他不能死，他死了谁听我吹嘘？不行，我还得再找个人！他死了，唉，他死了我英雄无用武之地，他死了我怎么展现给大家一个“君子好汉”的形象啊？不行，多亏他死了！他不死真求到我怎么办，那我是不是要兑现我说的力所能及尽力而为？我只是随口一说啊，虽然我这么完美，可他不该当真的啊——不该当真的。\r\n\r\n　　如果我死了，那些争夺我遗产的人会很兴奋：什么？他死了，他真的死了？他真的死了！哈哈！他死了！他真的死了！我想想，这样我就可以买个车，换个大点的房子，还能吃点不舍得吃的，去些平时消费不起的场所，早点死多好，何必等到现在那，人终有一死。不如成全我了，毕竟他这么无私，祝他上天堂哈哈！我谢谢他。不，我该恨他，怎么不早点死？愿他下地狱！我只是为了自己过得好一点，我每月赚几万块多吗？油价这么贵，海鲜这么贵，还得平时喝个酒旅个游，我还会有孩子，哪里不是开销的地方，我活的这么悲惨只是为了让自己过得好一点，我没有错，谁不想让自己过得好一点！他会尊重我的自私？——恩，他一定会的。\r\n\r\n　　如果我死了，那些垂涎于我爱人的会很激动：妈的，终于死了！这王八蛋！盼星星盼月亮终于死了。早点死啊，他那老婆可馋死我了，那身材，那大白腿，想想都过瘾！这下子我就不用害怕了，妈的，他活着我也不怕！这下子我就不用偷偷摸摸的了，妈的，他活着我也不怕！这下子我就不用跟他称兄道弟了，妈的，他活着我也不想跟他称兄道弟！占着茅坑不拉屎，凭什么那么漂亮的女人要跟他受罪？他那活的还算个人了？哪里比得上我，能让这女人吃香的喝辣的，马桶都是镀金边的！为什么不是金边的？金边的得多少钱，有那个钱找什么样的没有，我还用得上盼着他死？他这一死我也算做点好事，不然这么年轻守了寡还得改嫁，万一改嫁的是奔着她那张脸那个身材的人那。我这算是做点好事，给自己积德了，他应该谢谢我的！为什么我这么无私奉献那——妈的，老子一直就这么无私啊！\r\n\r\n　　如果我死了，那些我能帮助的人会很伤心：他怎么能死那？他怎么能死那！他死了谁帮我工作，他死了谁帮我做那些别人不愿做的事？他不能死他不能死！算了，死了就死了，我抓紧找下一个人吧。唉！他死了谁体现我的社会价值啊，他死了我怎么奔赴我的需求我的追求！他这就死了，我很伤心。曾经有那么个人可以帮我买东西的时候省钱，可以帮我去打架，可以难过的时候陪我喝酒，开导我听我倾诉，他怎么可以死！我恨他，我是不是该恨他？没错，我应该恨他，不说一声就死了。我恨他——这么不负责的人我恨他！\r\n\r\n　　如果我死了，那些朋友圈的高大上会埋怨我：他死了？那谁给我评论，谁给我点赞！我那些修过的照片，丰盛又廉价的美食小视频，盗的风景艺术图片谁给我评论，谁来展现我的品位我的生活。他怎么可以死，那谁来当我的仰慕者，谁来做围观群众，谁来发出一声哇塞！死了！算了，死了就死了吧。别问为什么——我这么高大上的人在乎个市井小民干嘛。\r\n\r\n　　 若是有来生\r\n\r\n　　若是有来生，我要做一个聋子。\r\n\r\n　　做一个聋子。我不想听那些废话，不想听失恋后的抱怨：我分手了，好难受，她那么漂亮，我想睡她！她那么善解人意，我想跟她过一辈子，可我没钱！努力，算了，太累了。\r\n\r\n　　做一个聋子。我不想听那些废话，不想听贫穷时的恳求：你帮帮我，我真的可怜，我真的走投无路！你不能不帮我，我们是朋友，我是什么样的人你知道的！还钱？算了，我缺钱你是朋友怎么能逼我！你知道我是什么样的人，有钱会不还你？——抱歉，我真的不知道你是什么样的人！\r\n\r\n　　做一个聋子。我不想听那些废话，不想听冠冕堂皇的仁义：你对我不仁我不能对你不义，虽然你对我不仁，但你是我朋友你是我亲戚你是追我的人，你那么那么孝顺那么那么善良那么那么义气那么那么钟情！尽管你对我这般如此，如此这般。但我还是念你的好！所以我不能借你钱看你堕落，不能帮助你看你不自己努力，不能接受你看你开心，因为我怕你得意忘形啊！\r\n\r\n　　因为我是个聋子，所以别对我说废话。\r\n\r\n　　若是有来生，我要做一个哑巴。\r\n\r\n　　做一个哑巴。我不想说那些违心话，不想说：因为我们是兄弟，好吧！\r\n\r\n　　做一个哑巴。我不想说那些违心话，不想说：因为我爱你，好吧！\r\n\r\n　　做一个哑巴。我不想说那些违心话，不想说：因为你是领导，好吧！\r\n\r\n　　因为我是个哑巴，所以我说不出逆来顺受，但我懂得己所不欲，勿施于人。\r\n\r\n　　若是有来生，我要做一个瞎子。\r\n\r\n　　做一个瞎子。我不想看那些悲哀，不想看公交上：你就给老人让个座怎么了，年轻立壮凭什么不让座，你还是人吗，爹妈怎么教的！\r\n\r\n　　做一个瞎子。我不想看那些悲哀，不想看大街上：我和他只是朋友，我们什么都没有，你别多想我还是爱你的。我不爱钱我爱你！……？。\r\n\r\n　　做一个瞎子。我不想看那些悲哀，不想看工作上：张三你说，这地球是方的还是圆的？张三顶着黑眼圈穿着没洗的衬衫吃着剩饭来到单位奉上笑脸说“方的方的，嘿嘿肯定是方的”！\r\n\r\n　　做一个瞎子。我不想看那些悲哀，不想看马路上：行行好吧，给点钱，好人一生平安，差五元车费回家。唉，这现在傻子少了，五块钱都舍不得我这豪车怎么加油！\r\n\r\n　　做一个瞎子。我不想看那些悲哀，不想看马路上：行行好吧大哥：我孩子真的好几天没吃饭了，求求你了求求你了！滚！孩子睡吧，睡着了就不饿了。\r\n\r\n　　若是有来生，莫要虚度光阴。\r\n\r\n　　如果我死了，愿以警醒世人。\r\n\r\n　　昏黄的路灯洒落一片片昏黄，如果一个人自愿高楼坠下，算自杀吗？算吧。——自杀究竟是一个人杀了自己，还是所有人杀了他一个人而已？\r\n','#友情#',1,NULL,6,'zz','2019-03-09',NULL,NULL,'很久都不曾写过文章了，上一篇文章还是四个月之前的。以此去命题，并非有什么轻生的念头，只是有感而发，勿念。其实我很想做个自私的人，因为这会让你吃尽苦头又吃足了甜头。而你却依然活的天真活的开心——序。',NULL,NULL,NULL,NULL,NULL),(5,'老干部','yyyy0101','http://www.duwenzhang.com/wenzhang/yuanchuang/20190224/399816.html','野心勃勃而又不去行动的人才会有更多的担心','images/9.jpg','> 杞人忧天的故事很多人都知道，说的是古时杞国有一个人会有各种各样的担心，比如担心会自己生病，担心自己会穷困，有一天甚至担心天会塌下来。别人都笑话他，说他的担忧是多余的，整天哪有果多的担心，人岂不是很悲催痛苦，后来有一成语来形容他，就是杞人忧天。\r\n\r\n在现实生活中，我发现有更多的人做着杞人忧天的提心。比方说，有人担心自己孩子输在起跑线上，就拼命给孩子报各种补习班，后来又担心孩子考不上好的大学，成年后，又担心没房没车没找不到好人家的姑娘，再后来结婚了，又担心孙子是不是健康，做着各种各样的检查……\r\n\r\n　　我们发现有一些人一生当中始终处于担忧里，这是很痛苦的，他们从来没有享受过生活，一生在担忧里小心谨慎的生活着，生活的美好他们体会不到，他们就高速运转的机器，哪来的闲功夫见看花开花落，松涛阵阵。\r\n\r\n　　那么，问题来了，这是怎么样形成的性格，有必于搞的这样紧张吗？一生这样无趣，还不如四五岁的孩童，天真烂漫无忧无虑的生活着。\r\n\r\n　　我们发现这些人都是不甘示弱的人，都是天生有着优越感的人，自认为自己就应该比别人过得好，他们也的确是生活的强者，但是却并非都是智者，不懂得享受生活。\r\n\r\n　　他们内心会有各种各样的欲望攀比，永无止境的奋斗目标，为此，这些想法让他们寝食难安，他们每天都会难受，因为内心的奋斗目标在召唤，他们对现实的生存环境是不满意的，甚至是反感的，于是痛苦产生了。接下来，就会有两种情况产生。\r\n\r\n　　一种是没有觉知，不知道自己痛苦的根源，过着得过且过的生活，因为他们生活并没有触及内心的根源，或者说没有产生直接的行动，他们会越来越担忧，严重了就会胡思乱想，就像那个杞国人一样担心天会塌下来。\r\n\r\n　　另一种是觉知，知道自己内心痛苦的根源，并积极朝着内心的目标奋进，做一个知行合一的人，这种人往往是野心勃勃的，并有积极的行动，因此，他们并不会胡思乱想，也不会害怕恐惧，这样的人如果持之以恒的专攻某一领域，往往能取得成功。\r\n\r\n　　所以第一种人应该向第二种人学习，如果认为自己非等闲之辈，就应该积极的行动，而不会各种担忧和恐惧，因为行动是战胜魔鬼最有效的武器，当你认为自己对前面临的是一座山时，走一步是一步，终究有一天会走完，当你认为面前拦路虎是一个魔鬼时，那么就亮出宝剑，勇敢战斗，那么你才有赢得胜利的机会，如果不去亮剑，不去行动，就永远没有成功的机会。\r\n\r\n　　当然了，生活也并非完全那么急促湍急，它也有柳暗花明花红叶绿云淡风轻的时刻，当你在为着自己理想和目标奋斗时，也要抽出一点时间来享受美好的生活，不要无趣的只知道奋斗。\r\n\r\n　　如果认为自己天生并非俗辈，那么就做个勇敢的人。欲望越大，烦恼越多，这是成正比的，所以担忧恐惧也会少不了的，如果想跨越这个坎，那么就再加上勇敢积极的行动吧，他们战胜一切负面情绪最有效的法定。\r\n','#故事#',1,NULL,6,'zz','2019-03-09',NULL,NULL,'杞人忧天的故事很多人都知道，说的是古时杞国有一个人会有各种各样的担心，比如担心会自己生病，担心自己会穷困，有一天甚至担心天会塌下来。别人都笑话他，说他的担忧是多余的，整天哪有果多的担心，人岂不是很悲催痛苦，后来有一成语来形容他，就是杞人忧天。',NULL,NULL,NULL,NULL,NULL),(6,'老干部','孟婷1234','http://www.duwenzhang.com/wenzhang/lizhiwenzhang/20180518/388882.html','三十多岁，如何打理尴尬年龄里的凌乱人生','images/6.jpg','> 三十岁是一个分水岭，一边是骄阳似火、山花烂漫的绚丽青春，一边是蝇营狗苟、满地鸡毛的凌乱人生，曾经的热血青年已经成为端着保温杯泡着枸杞的中年大叔。\r\n\r\n　　*三十岁是一扇门，门里面是此时的平淡安逸，门外面是未知的挑战与激情。看到众多招聘广告的年龄要求——三十五周岁以下，有一种莫名的恐慌，然后暗自庆幸自己还有一份工作。*\r\n\r\n　　三十岁是一道鸿沟，90后、00后的小孩们兴致勃勃地聊着跑男的情景恰似当年的我们对《流星花园》的执迷狂热，我们所说的责任、信念、三观等在他们看来不可思议。父辈们劝我们平安是福、知足常乐，而内心深处却住着一个倔强不屈、勇于挑战的自己。\r\n  三十岁是个岔路口，一边是安逸舒适的人生之路，就像温水中的青蛙，沉浸在一成不变、波澜不惊的生活中不能自拔，最终失了跳出去的斗志和勇气；另一边道路泥泞、弯曲、充满坎坷、前途未卜，机遇与挑战激励着我们不断成长进步，一路上感受着探索未知世界的乐趣。\r\n\r\n　　三十岁是人生中的一个转折，棱角分明、意气用事、口无遮拦、锋芒毕露被圆融世故、深思熟虑、谨言慎行、韬光养晦所代替；曾经追求生活品质热衷于名牌的我们觉得购买打折、促销商品有失风度，现在竟为秒杀到一件根本用不上的物品而欣喜不已；为维护自己的权益与商家据理力争，有时候也和买菜的小贩们调侃几句，发发牢骚，这就是所谓的中年油腻人生吗？ \r\n\r\n　　三十多岁，如何打理尴尬年龄里的凌乱人生？\r\n\r\n　　开始反思以前的生活，在反思中成长。\r\n\r\n　　三十多岁在工作、结婚、生子之后人生的雏形基本形成，当享受着日复一日的安逸闲适，突然发现年少时的学霸们已经在一个在众人不可企及的高度上继续攀爬，我开始怀疑人生了，比我们更优秀的人如此拼命，我们有什么理由故步自封、混沌度日呢？\r\n\r\n　　想起曾经年少无知虚度的光阴，想起在人生紧要关头错过的机遇，悲从中来。\r\n\r\n　　生活已经够安逸了，为什么还要在安逸中不思进取呢？在还可以努力的年龄里尽力拼一把，不要给人生留下遗憾。\r\n\r\n　　反思让我们清醒自己的现状，也让我看清以后要走的路，人格在反思中得以重构，思维在反思中明晰，个体在反思中脱胎换骨。\r\n\r\n　　《我的前半生》中为爱牺牲甘愿做家庭主妇的罗子君在遭遇婚变后，在痛定思痛的反思之后开启了崭新的人生。\r\n\r\n　　做人生的减法，根据自己的特长，选择那个最靠谱的目标。\r\n\r\n　　追求完美的我也曾给自己定了很多目标，总是在坚持了一段时间以后就放弃了，家里的跑步机成为晾衣服的最佳工具，买的书籍早已积上了厚厚的尘土……生命就一次次陷入这样的恶性循环：\r\n\r\n　　确立目标——斗志满满满 ——缺乏自制力、外在诱惑而放弃——痛下决心——再次确立目标\r\n\r\n　　树立太多的目标、兼顾太多反而会顾此失彼，三十多岁开始做人生的减法，在每个阶段确立一两项可行的、可发挥自己所长的目标然后坚持下来\r\n\r\n　　董明珠在35岁以后专注空调销售业务，以自己的死缠烂打和执着坚韧谱写了销售界的神话。\r\n\r\n　　持之以恒将一件事情做到极致的人是人生的赢家。\r\n\r\n　　那么确立目标之后怎样有效地坚持下来呢？半途而废源于缺乏强大的动力支持，朋友说她才开始跑步的那几天，每天跑完五公里后肌肉酸痛、身心疲惫，是什么让她支撑下来的呢？每次快要放弃的时候，像勾践卧薪尝胆，她默默地问自己：“你忘了曾经被当众嘲笑肥胖的耻辱吗？”，“一雪前耻”是她坚持的动力，多少次在别人的酣梦中她离开温暖的被窝，两年多的坚持带给她意想不到的人生收获。\r\n\r\n　　坚持总会伴随着突然的改变带来的阵痛与不适，这是正常现象，给自己找一个坚持下去的动力，回忆自己曾经因为坚持获得成功或者因为半途而废而错失良机的经历，或者给自己树立一个积极向上的榜样。就像母亲痛苦的分娩换来的是新生命的诞生，挺过生命状态改变之初这段最难熬的日子，坚持就成为了一种习惯，当习惯成为生活的常态，我们将会收获不一样的人生。\r\n\r\n　　缓解压力，学习一些缓解不良情绪的方法。\r\n\r\n　　我们努力在资历深厚的前辈和势头正猛的90后之间争得一席之地，孩子的教育、父母日渐衰老的身体需要我们承担起应有的责任来，看到别人家的孩子在周末努力学习着各种本领，感受着逢年过节相聚时充斥着的攀比、炫耀，品尝着生活的酸甜苦辣，我们眉头紧锁、焦虑不安，这些无形的压力正在考验着我们敏感脆弱的内心，不由地感慨：人到中年百事哀。\r\n\r\n　　三十多岁，要学会正确宣泄自己的不良情绪，在运动、音乐、冥想中让自己紧绷的神经得以放松，身心做一番休憩之后再继续上路。\r\n\r\n　　抛掉不切实际的幻想，为可以触摸到的现实而努力。\r\n\r\n　　我们喂马、劈柴，为粮食、蔬菜担心，用心经营着工作、生活，但不会冲动之下为诗和远方远走他乡，我们深知自己肩负的各种责任，而这些责任让我们的人生变得深刻。\r\n\r\n　　把工作当成提升历练自己的平台，30岁以后，要开始积累经验、能力、知识、人脉之类的东西，远离七嘴八舌、说长道短，在单位里每个员工身上都有值得学习的闪光点，做到博采众长不断完善自己，为实实在在可触摸到的东西努力才是值得的。\r\n\r\n　　珍惜和家人在一起的时光，放下手机，带老人孩子出去散心，哪怕是不咸不淡的聊天，不要用口头的承诺代替实际的陪伴，因为岁月匆匆，经不起太多的等待。\r\n\r\n　　利用好自己的业余时间，抛掉无用的社交。\r\n\r\n　　在这个世界上，无论你多么优秀，总有人喜欢你，也有人不喜欢你，所以不必讨好每一个人。三十岁之前为了保持合群的状态，我们总是削尖脑袋钻进那一堆聊天、嗑瓜子的人群之中，现在我们即使游离在众人之外却并不感到落寞。\r\n\r\n　　与其让生命的能量在虚情假意地应付无关痛痒的社交中慢慢流失，不如去拿起专业书籍提升自己的业务能力，或者是在知识的海洋汲取人生的精华，感悟生命的真谛。\r\n\r\n　　业余时间可以造就一个人，也可以毁掉一个人。\r\n\r\n　　工作之余把别人用来刷屏、谈论八卦的时间用于学习会收到意想不到的效果：手机里存上一本书籍，在等待孩子上兴趣班的时间可以看一看；如果时间允许可以步行上下班，锻炼身体的同时顺便对当天的生活做一番规划或者总结；抽空查看一下最近的消费明细，做到心中有数，减掉不必要的支出，学习一些实用的理财技巧让财富增值，利用好碎片化的时间人生会有意想不到的收获。\r\n\r\n　　三十多岁，把握机会、用心经营、努力付出的你会收获不一样的精彩人生。\r\n\r\n','#励志#',1,NULL,6,'zz','2019-03-09',NULL,NULL,'三十岁是一个分水岭，一边是骄阳似火、山花烂漫的绚丽青春，一边是蝇营狗苟、满地鸡毛的凌乱人生，曾经的热血青年已经成为端着保温杯泡着枸杞的中年大叔。三十岁是一扇门，门里面是此时的平淡安逸，门外面是未知的挑战与激情。看到众多招聘广告的年龄要求——三十五周岁以下，有一种莫名的恐慌，然后暗自庆幸自己还有一份工作。\r\n',NULL,NULL,NULL,NULL,NULL),(7,'老干部','心若雨汐','http://www.duwenzhang.com/wenzhang/renshengzheli/ganwu/20181002/394682.html','有一种心态叫放下，有一种境界叫舍得','images/2.jpg','> 心像是个口袋，什么都不装的叫心灵，装一点的叫心眼，装多了的的叫心计，装更多的叫心机，装得太多了最后那些负累就只能被当作心事了。人活在世往往过于在意近在咫尺的功名利禄，我们的生活是否如与朋友说起时一般绚烂夺目，现实生活中亦有很多人深陷进没有结果的爱情里，明知是错的，还要迂回前进。那些口口声声说着为了生活的衣食无忧、为了孩子不得不继续维持的婚姻。很多人拿不起又放不下，任由空白的生活在自己的眼中周而复始、慢慢的这种负累侵蚀的我们身心不堪重负。试着放下吧，放下你的疲惫、放下那些没有结果的执念、清醒时看到的你和他的未来若是并不理想，不如劝自己趁早放下，长痛不如短痛。再试着看开些，有钱就会拥有快乐么？就像你耗尽心力换得了工作场上的升职机会，而就在你即将上任时被查出了重症，钱能换回健康么？再多的钱能换回你的生命，换回勃勃生机的青春么？钱固然重要，可是与生命、与亲情、爱情比起来，钱真的没有那么重要。有形的财富无法与无价的情感、生命相提并论，何来取舍一说呢。\r\n\r\n#### 人一定要想清三个问题，第一你有什么，第二你要什么，第三你能放弃什么。对于多数人而言：有什么，我们往往很轻易的就评价出自己的现状；那要什么，大多数人内心也有明确的想法；那么问题来了，现在你告诉我你能放弃什么，几乎没有人可以做到不放弃就轻易获得了全部你想要的东西。人生不会每一件事都会让自己称心如意，常言道：人为财死，鸟为食亡。但有多少人为了事业有成，最后倒在了工作岗位上，那些口耳相传的过劳案例并非偶然意外、就像疾病的发展也是有一个循序渐进的过程。外在的过劳加上心里的过度忧思，外因内因从不分离。那些远赴千里外的地方工作的子女，其家中病重老母为不让远方的儿过于掂念，不忍心在孩子耳边传递生病讯息，弥留之际也未能见上最后一面。我并不赞成那些抛家舍业的一颗心思完全放在工作上的做法，工作一时的，即便离开这，你仍有再次获得的机会。而家庭、健康却要陪伴你很久，且一旦失去就是永远。或许你是为财而死，但是不值得。\r\n\r\n#### 　　生活中很多人喜欢就一件事左右摇摆，举棋不定。轻易落子怕输了，一子不落怕错过。于是他们一直纠结于细微得不值得一提的小事，让自己始终活在紧张的泥潭不能自拔。在自己短暂的一生中，谨小慎微，防微杜渐，也许别人的一句话，一个眼神，一个表情，都会不断揣摩，别人随口一说的话却始终放在心里耿耿于怀，凡事有一点端倪便以偏概全，杞人忧天。所以这些人总是活得很累，舒心二字与他们完全绝缘。其实人生有一种心态叫放下，。不必凡事都争个明白，我们生活的这个社会本就很复杂，然而很多人把这个本来就复杂的社会弄得更加复杂，复杂的无章可循。贪婪的人容易受到打击。欲望越少，生活越幸福。','#哲理#',1,NULL,6,'zz','2019-03-09',NULL,NULL,'心像是个口袋，什么都不装的叫心灵，装一点的叫心眼，装多了的的叫心计，装更多的叫心机，装得太多了最后那些负累就只能被当作心事了。人活在世往往过于在意近在咫尺的功名利禄，我们的生活是否如与朋友说起时一般绚烂夺目，现实生活中亦有很多人深陷进没有结果的爱情里，明知是错的，还要迂回前进。那些口口声声说着为了生活的衣食无忧、为了孩子不得不继续维持的婚姻。很多人拿不起又放不下，任由空白的生活在自己的眼中周而复始、慢慢的这种负累侵蚀的我们身心不堪重负。试着放下吧，放下你的疲惫、放下那些没有结果的执念、清醒时看到的你和他的未来若是并不理想，不如劝自己趁早放下，长痛不如短痛。再试着看开些，有钱就会拥有快乐么？就像你耗尽心力换得了工作场上的升职机会，而就在你即将上任时被查出了重症，钱能换回健康么？再多的钱能换回你的生命，换回勃勃生机的青春么？钱固然重要，可是与生命、与亲情、爱情比起来，钱真的没有那么重要。有形的财富无法与无价的情感、生命相提并论，何来取舍一说呢。',NULL,NULL,NULL,NULL,NULL),(8,'老干部','','','美国载人版“龙”飞船完成首次试飞返回地球','images/1.jpg','> 新华社洛杉矶3月8日电（记者 谭晶晶）在国际空间站停留5天后，美国太空探索技术公司的首艘载人版“龙”飞船8日凌晨脱离空间站，并于6个多小时后顺利溅落在预定的大西洋海域，完成首次试飞任务。\r\n\r\n美国航天局的直播画面显示，“龙”飞船于美国东部时间8日2时32分（北京时间8日15时32分）离开国际空间站。在近地轨道飞行5个多小时后，“龙”飞船点燃推进器开始回归。随后，飞船的4个降落伞展开，以减缓飞船下降速度。\r\n美国东部时间8时45分（北京时间21时45分），“龙”飞船落入佛罗里达海岸附近的大西洋海域。太空探索技术公司的回收船负责打捞飞船，并将其运回陆地。\r\n\r\n美国航天局局长布里登斯廷当天表示，在顺利完成国际空间站任务后，载人版“龙”飞船成功落入大西洋，成为人类太空飞行新时代的又一里程碑，距离“龙”飞船从美国本土将美国宇航员送入太空的目标更近了一步。\r\n\r\n据美国航天局介绍，“龙”飞船此次向国际空间站送去约200千克物资和设备，并将约150千克科学工具、空间站设备等带回地球。\r\n\r\n此次载人版“龙”飞船进行不载人试飞，飞船上载有一个身穿白色宇航服、名为“里普利”的假人模型。其头部、颈部和脊柱等装有多个传感器，用于收集飞船飞行过程中的相关数据。飞船回收后，科研人员将分析所有相关数据，为将来的载人飞行做准备。\r\n\r\n按照设计，载人版“龙”飞船可在空间站停留210天，但这次执行任务的“龙”飞船只在空间站停留5天。\r\n\r\n这次试飞旨在验证载人版“龙”飞船安全运送宇航员往返国际空间站的能力，是美国在航天飞机退役近8年后迈出的恢复载人发射能力的关键一步。按照美国航天局的计划，本次试飞成功后，载人版“龙”飞船将于今年7月进行首次载人飞行，将两名美国宇航员送往国际空间站。','',4,NULL,3,'yc','2019-03-09',NULL,NULL,'新华社洛杉矶3月8日电（记者 谭晶晶）在国际空间站停留5天后，美国太空探索技术公司的首艘载人版“龙”飞船8日凌晨脱离空间站，并于6个多小时后顺利溅落在预定的大西洋海域，完成首次试飞任务。\r\n美国航天局的直播画面显示，“龙”飞船于美国东部时间8日2时32分（北京时间8日15时32分）离开国际空间站。在近地轨道飞行5个多小时后，“龙”飞船点燃推进器开始回归。随后，飞船的4个降落伞展开，以减缓飞船下降速度。',NULL,NULL,NULL,NULL,NULL),(9,'老干部','','','web项目常见错误汇总','images/7.jpg','java.lang.IllegalStateException: Web app root system property already set to different value: \'webapp.root\' = [....\\tmp1\\wtpwebapps\\workreport\\] instead of [.....\\wtpwebapps\\ApprovalFront\\] \r\n- Choose unique values for the \'webAppRootKey\' context-param in your web.xml files!\r\n \r\n错误原因：Tomcat发布多个项目时抛的webAppRootKey错误,  原因是部署在同一容器中的Web项目，定义了相同的webAppRootKey或者都没有定义\r\n解决办法：需要为每个web都定义一个webAppRootKey\r\n<!--app1中的web.xml-->\r\n<context-param>\r\n    <param-name>webAppRootKey</param-name>\r\n    <param-value>app1name</param-value>\r\n</context-param>\r\n \r\n<!--app2中的web.xml-->\r\n<context-param>\r\n    <param-name>webAppRootKey</param-name>\r\n    <param-value>app2name</param-value>\r\n</context-param>','',2,NULL,1,'yc','2019-03-09',NULL,NULL,'Tomcat发布多个项目时抛的webAppRootKey错原因是部署在同一容器中的Web项目，定义了相同的webAppRootKey或者都没有定义\r\n解决办法：需要为每个web都定义一个webAppRootKey',NULL,NULL,NULL,NULL,NULL),(10,'老干部','','','如何在Maven下搭建SSM框架','images/6.jpg','如何在Maven下搭建SSM框架\r\n1.Eclipse配置\r\n \r\n这里提供两种开发工具\r\nSSM框架项目可以使用Eclipse进行开发为了能简化开发流程，首先需要在Eclipse中安装SpringIDE插件，详细安装步骤请参考：\r\nhttps://blog.csdn.net/zhen_6137/article/details/79383941\r\n或者使用Spring官方提供的STS工具进行开发，下载地址：\r\nhttps://spring.io/tools/sts/legacy\r\n2.构建Maven环境\r\nMaven下载配置\r\nMaven下载地址：http://maven.apache.org/download.cgi\r\n\r\n下载完成后解压到：D:\\Program Files\\apache-maven-3.5.3下\r\n\r\n在环境变量中，新增\r\n系统变量名：MAVEN_HOME\r\n变量值：D:\\Program Files\\apache-maven-3.5.3\r\n在Path中追加：%MAVEN_HOME%\\bin;\r\n在命令行窗口中输入：mvn –v 显示如下信息，这说明Maven安装成功；\r\n\r\nMaven仓库设置\r\n由于Maven提供的公共仓库的访问速度十分缓慢，所以这里修改使用阿里的Maven仓库镜像，编辑conf/setting.xml文件，在mirrors节点下，新增如下内容，这样从仓库中下载jar包速度上会快很多。\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n<mirror>\r\n<id>nexus-aliyun</id>\r\n<mirrorOf>*</mirrorOf>\r\n<name>Nexusaliyun</name>\r\n<url>http://maven.aliyun.com/nexus/content/groups/public</url>\r\n</mirror>\r\n同时需要将maven下载的jar包存放路径进行设置，编辑conf/setting.xml文件，配置本地仓库路径：\r\n\r\n\r\n1\r\n<localRepository>D:/ProgramFiles/apache-maven-3.5.3/repo</localRepository>\r\n3.Eclipse（STS）与Maven整合\r\n设置自带maven整合工具，在Preferences中找到Maven节点，将User Settings项的设置配置为自己maven所在路径然后更新设置（Update Settings Reindex）\r\n\r\n点击Installations节点，添加maven runtime，具体如图所示：\r\n\r\n4.创建maven项目时设置JDK\r\n问题描述：eclipse创建maven项目时，显示的JDK默认版本为1.5，实际使用的JDK为1.8，如何修改？\r\n解决方案：编辑conf/settings.xml文件，在profiles节点下配置\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n<id>jdk-1.8</id>\r\n<activation>\r\n<activeByDefault>true</activeByDefault>\r\n<jdk>1.8</jdk>\r\n</activation>\r\n<properties>\r\n<maven.compiler.source>1.8</maven.compiler.source>\r\n<maven.compiler.target>1.8</maven.compiler.target>\r\n<maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>\r\n</properties>\r\n5.使用maven创建项目\r\n新建项目，类型选择：Maven Project，点击Next\r\n\r\n选择默认工作空间，点击Next\r\n\r\n选择maven-archetype-webapp，点击Next\r\n\r\nGroup Id：com.ssm 表示应用的包名称\r\nArtifact Id：demossm 表示工程名称\r\n\r\n6.新建的项目问题处理\r\n创建完成后会出现如图所示报错：\r\n\r\n报错原因：\r\n\r\n解决办法：添加Tomcat Server 并选择JRE为本地安装的JDK的jre\r\n\r\n选择项目，右键编辑Build Path -> Configure Build Path\r\n\r\n将JRE System修改为自己本地安装的JDK下的jre，并添加Tomcat到编译环境中：\r\n\r\n此时项目已经不再报错\r\n\r\n创建后的工程需要完善目录信息，一般创建后需要存在4个目录（src/main/java  src/main/resources  src/test/java  src/test/resources）需要根据实际补充缺少的包；\r\n \r\n\r\n默认的Dynamic Web Module为2.3，使用Tomcat 8.0，需要修改为3.0\r\n这里如果直接修改是会报错并无法修改的，如下图所示：\r\n \r\n修改方法：\r\n \r\n① 编辑工程所在目录下.settrings文件夹中的org.eclipse.wst.common.project.facet.core.xml文件\r\n将\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<faceted-project>\r\n<fixedfacet=\"wst.jsdt.web\"/>\r\n<installedfacet=\"java\"version=\"1.5\"/>\r\n<installedfacet=\"jst.web\"version=\"2.3\"/>\r\n<installedfacet=\"wst.jsdt.web\"version=\"1.0\"/>\r\n</faceted-project>\r\n修改为：\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<faceted-project>\r\n<fixedfacet=\"wst.jsdt.web\"/>\r\n<installedfacet=\"java\"version=\"1.8\"/>\r\n<installedfacet=\"jst.web\"version=\"3.0\"/>\r\n<installedfacet=\"wst.jsdt.web\"version=\"1.0\"/>\r\n</faceted-project>\r\n \r\n修改项目web.xml文件为：\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<web-appxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\nxmlns=\"http://java.sun.com/xml/ns/javaee\"\r\nxsi:schemaLocation=\"http://java.sun.com/xml/ns/javaeehttp://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\r\nversion=\"3.0\">\r\n<display-name>ArchetypeCreatedWebApplication</display-name>\r\n</web-app>\r\n在pom.xml文件build节点中添加如下信息：\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n<plugins>\r\n<plugin>\r\n<groupId>org.apache.maven.plugins</groupId>\r\n<artifactId>maven-compiler-plugin</artifactId>\r\n<configuration>\r\n<source>1.8</source>\r\n<target>1.8</target>\r\n</configuration>\r\n</plugin>\r\n</plugins>\r\n \r\n修改后，在项目上右键，找到Maven属性下点击Update Project\r\n\r\n\r\n此时项目已经修改为Dynamic Web Module为3.0\r\n \r\n创建示例S_USER表：\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\nCREATETABLE\r\nS_USER\r\n(\r\nIDINT(4)NOTNULL,\r\nNAMEVARCHAR(80),\r\nACCOUNTVARCHAR(30),\r\nPASSWORDVARCHAR(128),\r\nPRIMARYKEY(ID)\r\n);\r\n7.添加基本配置文件\r\n添加以下配置文件\r\n\r\n \r\nPom.xml配置如下：\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n50\r\n51\r\n52\r\n53\r\n54\r\n55\r\n56\r\n57\r\n58\r\n59\r\n60\r\n61\r\n62\r\n63\r\n64\r\n65\r\n66\r\n67\r\n68\r\n69\r\n70\r\n71\r\n72\r\n73\r\n74\r\n75\r\n76\r\n77\r\n78\r\n79\r\n80\r\n81\r\n82\r\n83\r\n84\r\n85\r\n86\r\n87\r\n88\r\n89\r\n90\r\n91\r\n92\r\n93\r\n94\r\n95\r\n96\r\n97\r\n98\r\n99\r\n100\r\n101\r\n102\r\n103\r\n104\r\n105\r\n106\r\n107\r\n108\r\n109\r\n110\r\n111\r\n112\r\n113\r\n114\r\n115\r\n116\r\n117\r\n118\r\n119\r\n120\r\n121\r\n122\r\n123\r\n124\r\n125\r\n126\r\n127\r\n128\r\n129\r\n130\r\n131\r\n132\r\n133\r\n134\r\n135\r\n136\r\n137\r\n138\r\n139\r\n140\r\n141\r\n142\r\n143\r\n144\r\n145\r\n146\r\n147\r\n148\r\n149\r\n150\r\n151\r\n152\r\n153\r\n154\r\n155\r\n156\r\n157\r\n158\r\n159\r\n160\r\n161\r\n162\r\n163\r\n164\r\n165\r\n166\r\n167\r\n168\r\n169\r\n170\r\n171\r\n172\r\n173\r\n174\r\n175\r\n176\r\n177\r\n178\r\n179\r\n180\r\n181\r\n182\r\n183\r\n184\r\n185\r\n186\r\n187\r\n188\r\n189\r\n190\r\n191\r\n192\r\n193\r\n194\r\n195\r\n196\r\n197\r\n198\r\n199\r\n200\r\n201\r\n202\r\n203\r\n204\r\n205\r\n206\r\n207\r\n208\r\n209\r\n210\r\n211\r\n212\r\n213\r\n214\r\n215\r\n216\r\n217\r\n218\r\n219\r\n220\r\n221\r\n222\r\n223\r\n224\r\n225\r\n<projectxmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0http://maven.apache.org/maven-v4_0_0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <groupId>com.ssm</groupId>\r\n    <artifactId>demossm</artifactId>\r\n    <packaging>war</packaging>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <name>demossmMavenWebapp</name>\r\n    <url>http://maven.apache.org</url>\r\n    <properties>\r\n        <!--Spring版本号-->\r\n        <spring.version>4.3.8.RELEASE</spring.version>\r\n        <mybatis.version>3.3.0</mybatis.version>\r\n        <aspect.version>1.8.0</aspect.version>\r\n        <mysql.version>5.1.35</mysql.version>\r\n        <slf4j.version>1.7.12</slf4j.version>\r\n        <log4j.version>1.2.17</log4j.version>\r\n        <jackson.version>2.5.4</jackson.version>\r\n    </properties>\r\n    <dependencies>\r\n        <!--Spring相关包start-->\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-core</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-aop</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-web</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-webmvc</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-jdbc</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-tx</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <!--以下包看情况需要-->\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-test</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-oxm</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-context</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-context-support</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-expression</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-orm</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-webmvc</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <!--spring框架包end-->\r\n        <!--AOP相关包SpringAOP会使用到以下两个包-->\r\n        <dependency>\r\n            <groupId>org.aspectj</groupId>\r\n            <artifactId>aspectjrt</artifactId>\r\n            <version>${aspect.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.aspectj</groupId>\r\n            <artifactId>aspectjweaver</artifactId>\r\n            <version>${aspect.version}</version>\r\n        </dependency>\r\n        <!--MyBatis相关包-->\r\n        <dependency>\r\n            <groupId>org.mybatis</groupId>\r\n            <artifactId>mybatis</artifactId>\r\n            <version>${mybatis.version}</version>\r\n        </dependency>\r\n        <!--Spring集成MyBatis-->\r\n        <dependency>\r\n            <groupId>org.mybatis</groupId>\r\n            <artifactId>mybatis-spring</artifactId>\r\n            <version>1.2.3</version>\r\n        </dependency>\r\n        <!--MySQL相关包-->\r\n        <dependency>\r\n            <groupId>mysql</groupId>\r\n            <artifactId>mysql-connector-java</artifactId>\r\n            <version>${mysql.version}</version>\r\n        </dependency>\r\n        <!--数据库连接池-->\r\n        <dependency>\r\n            <groupId>com.alibaba</groupId>\r\n            <artifactId>druid</artifactId>\r\n            <version>1.0.20</version>\r\n        </dependency>\r\n        <!--json数据格式支持-->\r\n        <dependency>\r\n            <groupId>net.sf.json-lib</groupId>\r\n            <artifactId>json-lib</artifactId>\r\n            <version>2.4</version>\r\n            <classifier>jdk15</classifier>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>com.fasterxml.jackson.core</groupId>\r\n            <artifactId>jackson-core</artifactId>\r\n            <version>${jackson.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>com.fasterxml.jackson.core</groupId>\r\n            <artifactId>jackson-databind</artifactId>\r\n            <version>${jackson.version}</version>\r\n        </dependency>\r\n        <!--jstl标签类-->\r\n        <dependency>\r\n            <groupId>jstl</groupId>\r\n            <artifactId>jstl</artifactId>\r\n            <version>1.2</version>\r\n        </dependency>\r\n        <!--Servlet-->\r\n        <dependency>\r\n            <groupId>javax.servlet</groupId>\r\n            <artifactId>servlet-api</artifactId>\r\n            <version>2.5</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>javax.servlet.jsp</groupId>\r\n            <artifactId>jsp-api</artifactId>\r\n            <version>2.1</version>\r\n        </dependency>\r\n        <!--上传组件包start-->\r\n        <dependency>\r\n            <groupId>commons-fileupload</groupId>\r\n            <artifactId>commons-fileupload</artifactId>\r\n            <version>1.3.1</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>commons-io</groupId>\r\n            <artifactId>commons-io</artifactId>\r\n            <version>2.4</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>commons-codec</groupId>\r\n            <artifactId>commons-codec</artifactId>\r\n            <version>1.10</version>\r\n        </dependency>\r\n        <!--上传组件包end-->\r\n        <!--logstart-->\r\n        <dependency>\r\n            <groupId>log4j</groupId>\r\n            <artifactId>log4j</artifactId>\r\n            <version>${log4j.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.slf4j</groupId>\r\n            <artifactId>slf4j-api</artifactId>\r\n            <version>${slf4j.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.slf4j</groupId>\r\n            <artifactId>slf4j-log4j12</artifactId>\r\n            <version>${slf4j.version}</version>\r\n        </dependency>\r\n        <!--logEND-->\r\n        <!--Junit单元测试-->\r\n        <dependency>\r\n            <groupId>junit</groupId>\r\n            <artifactId>junit</artifactId>\r\n            <version>3.8.1</version>\r\n            <scope>test</scope>\r\n        </dependency>\r\n    </dependencies>\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.apache.maven.plugins</groupId>\r\n                <artifactId>maven-compiler-plugin</artifactId>\r\n                <configuration>\r\n                    <source>1.8</source>\r\n                    <target>1.8</target>\r\n                </configuration>\r\n            </plugin>\r\n        </plugins>\r\n        <finalName>demossm</finalName>\r\n    </build>\r\n</project>\r\n \r\njdbc.properties\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\ndriverClassName=com.mysql.jdbc.Driver\r\nurl=jdbc:mysql://localhost:3306/cpanydb\r\nusername=cpany\r\npassword=cpany\r\n#定义初始连接数\r\ninitialSize=1\r\n#定义最大连接数\r\nmaxActive=20\r\n#定义最大空闲\r\nmaxIdle=20\r\n#定义最小空闲\r\nminIdle=1\r\n#定义最长等待时间\r\nmaxWait=60000\r\n log4j.properties\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n#定义LOG输出级别\r\nlog4j.rootLogger=DEBUG,Console\r\n#定义日志输出目的地为控制台\r\nlog4j.appender.Console=org.apache.log4j.ConsoleAppender\r\nlog4j.appender.Console.Target=System.out\r\nlog4j.appender.Console.layout=org.apache.log4j.PatternLayout\r\nlog4j.appender.Console.layout.ConversionPattern=%d[%t]%-5p[%c]-%m%n\r\n#文件大小到达指定尺寸的时候产生一个新的文件\r\nlog4j.appender.File=org.apache.log4j.RollingFileAppender\r\n#指定输出目录\r\nlog4j.appender.File.File=C:/logs/demossm.log\r\n#定义文件最大大小\r\nlog4j.appender.File.MaxFileSize=10MB\r\n#输出所以日志，如果换成DEBUG表示输出DEBUG以上级别日志\r\nlog4j.appender.File.Threshold=ALL\r\nlog4j.appender.File.layout=org.apache.log4j.PatternLayout\r\nlog4j.appender.File.layout.ConversionPattern=[%p][%d{yyyy-MM-ddHH\\:mm\\:ss}][%c]%m%n\r\nlog4j.logger.java.sql.ResultSet=INFO\r\nlog4j.logger.org.apache=INFO\r\nlog4j.logger.java.sql.Connection=DEBUG\r\nlog4j.logger.java.sql.Statement=DEBUG\r\nlog4j.logger.java.sql.PreparedStatement=DEBUG\r\n mybatis-config.xml\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<!DOCTYPEconfiguration\r\nPUBLIC\"-//mybatis.org//DTDConfig3.0//EN\"\r\n\"http://mybatis.org/dtd/mybatis-3-config.dtd\">\r\n<configuration>\r\n<!--设置别名-->\r\n<typeAliases>\r\n<packagename=\"com.ssm.domain\"/>\r\n</typeAliases>\r\n</configuration>\r\nspring-mvc.xml\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<beansxmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xmlns:context=\"http://www.springframework.org/schema/context\"\r\n    xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\r\n    xsi:schemaLocation=\"\r\nhttp://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsd\r\nhttp://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context.xsd\r\nhttp://www.springframework.org/schema/mvchttp://www.springframework.org/schema/mvc/spring-mvc.xsd\">\r\n    <!--启动自动扫描-->\r\n    <context:component-scanbase-package=\"com.ssm.*\"/>\r\n    <!--注册MVC注解驱动-->\r\n    <mvc:annotation-driven>\r\n        <!--避免IE执行AJAX时,返回JSON出现下载文件-->\r\n        <mvc:message-converters>\r\n            <bean\r\n                class=\"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter\">\r\n                <propertyname=\"supportedMediaTypes\">\r\n                    <list>\r\n                        <value>text/html;charset=UTF-8</value>\r\n                        <value>text/json;charset=UTF-8</value>\r\n                        <value>application/json;charset=UTF-8</value>\r\n                    </list>\r\n                </property>\r\n            </bean>\r\n        </mvc:message-converters>\r\n    </mvc:annotation-driven>\r\n    <!--静态资源可访问的设置方式-->\r\n    <mvc:default-servlet-handler/>\r\n    <!--配置视图解析器，可以显式设置，也可以不设置，不设置会依据SpringMVC的默认设置-->\r\n    <beanid=\"viewResolver\"\r\n        class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\r\n        <propertyname=\"prefix\"value=\"/WEB-INF/views/\"/>\r\n        <propertyname=\"suffix\"value=\".jsp\"/>\r\n    </bean>\r\n</beans>\r\nspring-mybatis.xml\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<beansxmlns=\"http://www.springframework.org/schema/beans\"\r\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\nxsi:schemaLocation=\"\r\nhttp://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n<beanid=\"propertyConfigurer\"\r\nclass=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\r\n<propertyname=\"location\"value=\"classpath:jdbc.properties\"/>\r\n</bean>\r\n<!--定义数据源Bean-->\r\n<!--Druid-->\r\n<beanid=\"dataSource\"\r\nclass=\"com.alibaba.druid.pool.DruidDataSource\">\r\n<propertyname=\"driverClassName\"value=\"${driverClassName}\"/>\r\n<propertyname=\"url\"value=\"${url}\"/>\r\n<propertyname=\"username\"value=\"${username}\"/>\r\n<propertyname=\"password\"value=\"${password}\"/>\r\n<!--配置初始化大小、最小、最大连接数-->\r\n<propertyname=\"initialSize\"value=\"${initialSize}\"/>\r\n<propertyname=\"minIdle\"value=\"${minIdle}\"/>\r\n<propertyname=\"maxIdle\"value=\"${maxIdle}\"/>\r\n<propertyname=\"maxActive\"value=\"${maxActive}\"/>\r\n<!--配置获取连接等待超时的时间-->\r\n<propertyname=\"maxWait\"value=\"${maxWait}\"/>\r\n</bean>\r\n<!--注册SqlSessionFactoryBean-->\r\n<beanid=\"sqlSessionFactory\"\r\nclass=\"org.mybatis.spring.SqlSessionFactoryBean\">\r\n<propertyname=\"dataSource\"ref=\"dataSource\"/>\r\n<!--自动扫描mappers.xml文件-->\r\n<propertyname=\"mapperLocations\"\r\nvalue=\"classpath:mappers/*.xml\"/>\r\n<propertyname=\"configLocation\"\r\nvalue=\"classpath:mybatis-config.xml\"></property>\r\n</bean>\r\n<!--DAO接口所在包名，Spring会自动查找其下的类-->\r\n<beanclass=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\r\n<propertyname=\"basePackage\"value=\"com.ssm.dao\"/>\r\n<propertyname=\"sqlSessionFactoryBeanName\"\r\nvalue=\"sqlSessionFactory\"/>\r\n</bean>\r\n</beans>\r\nspring-tx.xml\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<beansxmlns=\"http://www.springframework.org/schema/beans\"\r\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\nxmlns:context=\"http://www.springframework.org/schema/context\"\r\nxmlns:aop=\"http://www.springframework.org/schema/aop\"\r\nxmlns:tx=\"http://www.springframework.org/schema/tx\"\r\nxsi:schemaLocation=\"\r\nhttp://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsd\r\nhttp://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context.xsd\r\nhttp://www.springframework.org/schema/aophttp://www.springframework.org/schema/aop/spring-aop.xsd\r\nhttp://www.springframework.org/schema/txhttp://www.springframework.org/schema/tx/spring-tx.xsd\">\r\n<!--开启AOP注解扫描-->\r\n<aop:aspectj-autoproxyproxy-target-class=\"true\"/>\r\n<!--事务管理器，依赖于数据源-->\r\n<beanid=\"txManager\"class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n<propertyname=\"dataSource\"ref=\"dataSource\"/>\r\n</bean>\r\n<!--编写通知：对事务进行增强（通知），需要编写对切入点和具体执行事务细节-->\r\n<tx:adviceid=\"txAdvice\"transaction-manager=\"txManager\">\r\n<tx:attributes>\r\n<!--\r\n为切入点方法添加事务详情\r\nname：方法名，*表示任意方法名称\r\npropagation：设置传播行为\r\nisolation：设置隔离级别\r\nread-only：是否只读\r\n-->\r\n<tx:methodname=\"add*\"propagation=\"REQUIRED\"isolation=\"DEFAULT\"read-only=\"false\"rollback-for=\"Exception\"/>\r\n<tx:methodname=\"delete*\"propagation=\"REQUIRED\"isolation=\"DEFAULT\"read-only=\"false\"rollback-for=\"Exception\"/>\r\n<tx:methodname=\"update*\"propagation=\"REQUIRED\"isolation=\"DEFAULT\"read-only=\"false\"rollback-for=\"Exception\"/>\r\n</tx:attributes>\r\n</tx:advice>\r\n<!--设置AOP，让Spring自动对目标生成代理，需要使用AspectJ表达式-->\r\n<aop:configproxy-target-class=\"true\">\r\n<!--切面：整合切入点和通知-->\r\n<aop:advisoradvice-ref=\"txAdvice\"pointcut=\"within(com.ssm.controller.*)\"/>\r\n</aop:config>\r\n</beans>\r\n8.配置web.xml文件\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n50\r\n51\r\n52\r\n53\r\n54\r\n55\r\n56\r\n57\r\n58\r\n59\r\n60\r\n61\r\n62\r\n63\r\n64\r\n65\r\n66\r\n67\r\n68\r\n69\r\n70\r\n71\r\n72\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<-appxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xmlns=\"http://java.sun.com/xml/ns/javaee\"\r\n    xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaeehttp://java.sun.com/xml/ns/javaee/-app_3_0.xsd\"\r\n    version=\"3.0\">\r\n    <display-name>ArchetypeCreatedApplication</display-name>\r\n    <welcome-file-list>\r\n        <welcome-file>/index.jsp</welcome-file>\r\n    </welcome-file-list>\r\n    <!--加载springbean-->\r\n    <context-param>\r\n        <param-name>contextConfigLocation</param-name>\r\n        <param-value>classpath:applicationContext.xml</param-value>\r\n    </context-param>\r\n    <listener>\r\n        <listener-class>org.springframework..context.ContextLoaderListener</listener-class>\r\n    </listener>\r\n    <!--编码过滤器-->\r\n    <filter>\r\n        <filter-name>encodingFilter</filter-name>\r\n        <filter-class>org.springframework..filter.CharacterEncodingFilter</filter-class>\r\n        <init-param>\r\n            <param-name>encoding</param-name>\r\n            <param-value>UTF-8</param-value>\r\n        </init-param>\r\n    </filter>\r\n    <filter-mapping>\r\n        <filter-name>encodingFilter</filter-name>\r\n        <url-pattern>/*</url-pattern>\r\n    </filter-mapping>\r\n    <!--日志记录-->\r\n    <context-param>\r\n        <!--日志配置文件路径-->\r\n        <param-name>log4jConfigLocation</param-name>\r\n        <param-value>classpath:log4j.properties</param-value>\r\n    </context-param>\r\n    <context-param>\r\n        <!--日志页面的刷新间隔-->\r\n        <param-name>log4jRefreshInterval</param-name>\r\n        <param-value>6000</param-value>\r\n    </context-param>\r\n    <listener>\r\n        <listener-class>org.springframework..util.Log4jConfigListener</listener-class>\r\n    </listener>\r\n    <!--SpringMVCservlet-->\r\n    <servlet>\r\n        <servlet-name>SpringMVC</servlet-name>\r\n        <servlet-class>org.springframework..servlet.DispatcherServlet</servlet-class>\r\n        <init-param>\r\n            <param-name>contextConfigLocation</param-name>\r\n            <param-value>classpath:spring-mvc.xml</param-value>\r\n        </init-param>\r\n        <load-on-startup>1</load-on-startup>\r\n    </servlet>\r\n    <servlet-mapping>\r\n        <servlet-name>SpringMVC</servlet-name>\r\n        <url-pattern>/</url-pattern>\r\n    </servlet-mapping>\r\n    \r\n<servlet-mapping>\r\n<servlet-name>default</servlet-name>\r\n<url-pattern>*.js</url-pattern>\r\n</servlet-mapping>\r\n<servlet-mapping>\r\n<servlet-name>default</servlet-name>\r\n<url-pattern>*.css</url-pattern>\r\n</servlet-mapping>\r\n</-app>\r\n9.添加相关处理类\r\n在src/main/java下分别添加我们的dao包，domain包，service包，还有controller包。包里面添加相应的类，效果图如下：\r\n\r\n \r\nSUser.java\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\npackagecom.ssm.domain;\r\npublicclassSUser{\r\n//成员变量\r\nprivateIntegerid;\r\nprivateStringname;\r\nprivateStringaccount;\r\nprivateStringpassword;\r\n//构造函数\r\npublicSUser(){\r\nsuper();\r\n}\r\npublicSUser(Integerid,Stringname,Stringaccount,Stringpassword){\r\nsuper();\r\nthis.id=id;\r\nthis.name=name;\r\nthis.account=account;\r\nthis.password=password;\r\n}\r\n//成员方法\r\npublicIntegergetId(){\r\nreturnid;\r\n}\r\npublicvoidsetId(Integerid){\r\nthis.id=id;\r\n}\r\npublicStringgetName(){\r\nreturnname;\r\n}\r\npublicvoidsetName(Stringname){\r\nthis.name=name;\r\n}\r\npublicStringgetPassword(){\r\nreturnpassword;\r\n}\r\npublicvoidsetPassword(Stringpassword){\r\nthis.password=password;\r\n}\r\npublicStringgetAccount(){\r\nreturnaccount;\r\n}\r\npublicvoidsetAccount(Stringaccount){\r\nthis.account=account;\r\n}\r\n}\r\nSUserController.java\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n50\r\n51\r\n52\r\n53\r\n54\r\n55\r\n56\r\n57\r\n58\r\n59\r\n60\r\n61\r\n62\r\n63\r\n64\r\n65\r\n66\r\n67\r\n68\r\n69\r\n70\r\n71\r\n72\r\n73\r\n74\r\n75\r\n76\r\n77\r\n78\r\n79\r\n80\r\n81\r\n82\r\n83\r\n84\r\n85\r\n86\r\n87\r\n88\r\n89\r\n90\r\n91\r\n92\r\n93\r\n94\r\n95\r\n96\r\n97\r\n98\r\n99\r\n100\r\n101\r\n102\r\n103\r\n104\r\n105\r\n106\r\n107\r\n108\r\n109\r\n110\r\n111\r\n112\r\n113\r\n114\r\n115\r\n116\r\n117\r\n118\r\n119\r\n120\r\n121\r\n122\r\n123\r\n124\r\n125\r\n126\r\n127\r\n128\r\n129\r\n130\r\n131\r\n132\r\n133\r\n134\r\n135\r\n136\r\n137\r\n138\r\n139\r\n140\r\n141\r\n142\r\n143\r\n144\r\n145\r\n146\r\n147\r\n148\r\n149\r\n150\r\n151\r\n152\r\n153\r\n154\r\n155\r\n156\r\n157\r\n158\r\n159\r\n160\r\n161\r\n162\r\n163\r\n164\r\n165\r\n166\r\n167\r\npackagecom.ssm.controller;\r\nimportjava.util.List;\r\nimportjavax.annotation.Resource;\r\nimportjavax.servlet.http.HttpServletRequest;\r\nimportorg.springframework.stereotype.Controller;\r\nimportorg.springframework.ui.Model;\r\nimportorg.springframework.web.bind.annotation.RequestMapping;\r\nimportorg.springframework.web.bind.annotation.ResponseBody;\r\nimportcom.ssm.domain.SUser;\r\nimportcom.ssm.service.SUserService;\r\nimportnet.sf.json.JSONObject;\r\n@Controller\r\n@RequestMapping(\"/suser\")\r\npublicclassSUserController{\r\n    @Resource\r\n    privateSUserServicesUserService;\r\n    /**\r\n    *列表数据\r\n    *\r\n    *@parammodel\r\n    *@return\r\n    */\r\n    @ResponseBody\r\n    @RequestMapping(\"/listSUserData\")\r\n    publicList<SUser>listSUserData(Modelmodel){\r\n        List<SUser>sUserList=sUserService.listSUserData();\r\n        returnsUserList;\r\n    }\r\n    /**\r\n    *新增数据\r\n    *\r\n    *@paramrequest\r\n    *@paramsUser\r\n    *@return\r\n    */\r\n    @RequestMapping(\"/addSUserData\")\r\n    @ResponseBody\r\n    publicJSONObjectaddSUserData(HttpServletRequestrequest,SUsersUser){\r\n        JSONObjectjsonObject=newJSONObject();\r\n        try{\r\n            sUserService.addSUserData(sUser);\r\n            jsonObject.put(\"flag\",\"success\");\r\n            jsonObject.put(\"msg\",\"成功\");\r\n        }catch(Exceptione){\r\n            jsonObject.put(\"flag\",\"failed\");\r\n            jsonObject.put(\"msg\",\"失败\");\r\n        }\r\n        returnjsonObject;\r\n    }\r\n    /**\r\n    *修改数据\r\n    *\r\n    *@paramrequest\r\n    *@paramsUser\r\n    *@return\r\n    */\r\n    @RequestMapping(\"/modifySUserData\")\r\n    @ResponseBody\r\n    publicJSONObjectmodifySUserData(HttpServletRequestrequest,SUsersUser){\r\n        JSONObjectjsonObject=newJSONObject();\r\n        try{\r\n            sUserService.modifySUserData(sUser);\r\n            jsonObject.put(\"flag\",\"success\");\r\n            jsonObject.put(\"msg\",\"成功\");\r\n        }catch(Exceptione){\r\n            jsonObject.put(\"flag\",\"failed\");\r\n            jsonObject.put(\"msg\",\"失败\");\r\n        }\r\n        returnjsonObject;\r\n    }\r\n    /**\r\n    *获取数据\r\n    *\r\n    *@paramrequest\r\n    *@parammodel\r\n    *@return\r\n    */\r\n    @ResponseBody\r\n    @RequestMapping(\"/getSUserData\")\r\n    publicSUsergetSUserData(HttpServletRequestrequest,Modelmodel){\r\n        SUsersUser=null;\r\n        Stringparam=request.getParameter(\"id\");\r\n        sUser=sUserService.getSUserData(param);\r\n        returnsUser;\r\n    }\r\n    /**\r\n    *删除数据\r\n    *\r\n    *@paramrequest\r\n    *@paramsUser\r\n    *@return\r\n    */\r\n    @RequestMapping(\"/deleteSUserData\")\r\n    @ResponseBody\r\n    publicJSONObjectdeleteSUserData(HttpServletRequestrequest,SUsersUser){\r\n        JSONObjectjsonObject=newJSONObject();\r\n        try{\r\n            sUserService.deleteSUserData(sUser);\r\n            jsonObject.put(\"flag\",\"success\");\r\n            jsonObject.put(\"msg\",\"成功\");\r\n        }catch(Exceptione){\r\n            jsonObject.put(\"flag\",\"failed\");\r\n            jsonObject.put(\"msg\",\"失败\");\r\n        }\r\n        returnjsonObject;\r\n    }\r\n    /**\r\n    *列表页面\r\n    *\r\n    *@return\r\n    */\r\n    @RequestMapping(\"/getSUserListPage\")\r\n    publicStringgetSUserListPage(){\r\n        return\"suser/listSUser\";\r\n    }\r\n    /**\r\n    *新增页面\r\n    *\r\n    *@return\r\n    */\r\n    @RequestMapping(\"/getSUserAddPage\")\r\n    publicStringgetSUserAddPage(){\r\n        return\"suser/addSUser\";\r\n    }\r\n    /**\r\n    *修改页面\r\n    *\r\n    *@paramrequest\r\n    *@parammodel\r\n    *@return\r\n    */\r\n    @RequestMapping(\"/getSUserModifyPage\")\r\n    publicStringgetSUserModifyPage(HttpServletRequestrequest,Modelmodel){\r\n        Stringparam=request.getParameter(\"id\");\r\n        model.addAttribute(\"param\",param);\r\n        return\"suser/modifySUser\";\r\n    }\r\n    /**\r\n    *查看页面\r\n    *\r\n    *@paramrequest\r\n    *@parammodel\r\n    *@return\r\n    */\r\n    @RequestMapping(\"/getSUserDetailPage\")\r\n    publicStringgetSUserDetailPage(HttpServletRequestrequest,Modelmodel){\r\n        Stringparam=request.getParameter(\"id\");\r\n        model.addAttribute(\"param\",param);\r\n        return\"suser/detailSUser\";\r\n    }\r\n}\r\nSUserService.java\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\npackagecom.ssm.service;\r\nimportjava.util.List;\r\nimportcom.ssm.domain.SUser;\r\npublicinterfaceSUserService{\r\n    publicvoidaddSUserData(SUsersUser);\r\n    publicvoidmodifySUserData(SUsersUser);\r\n    publicvoiddeleteSUserData(SUsersUser);\r\n    publicSUsergetSUserData(Stringid);\r\n    publicList<SUser>listSUserData();\r\n}\r\nSUserServiceImpl.java\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\npackagecom.ssm.service.impl;\r\nimportjava.util.List;\r\nimportjavax.annotation.Resource;\r\nimportorg.springframework.stereotype.Service;\r\nimportcom.ssm.dao.SUserDao;\r\nimportcom.ssm.domain.SUser;\r\nimportcom.ssm.service.SUserService;\r\n@Service(\"sUserService\")\r\npublicclassSUserServiceImplimplementsSUserService{\r\n    @Resource\r\n    privateSUserDaosUserDao;\r\n    @Override\r\n    publicvoidaddSUserData(SUsersUser){\r\n        sUserDao.addSUser(sUser);\r\n    }\r\n    @Override\r\n    publicvoidmodifySUserData(SUsersUser){\r\n        sUserDao.modifySUser(sUser);\r\n    }\r\n    @Override\r\n    publicSUsergetSUserData(Stringid){\r\n        returnsUserDao.detailSUser(id);\r\n    }\r\n    @Override\r\n    publicvoiddeleteSUserData(SUsersUser){\r\n        sUserDao.deleteSUser(sUser);\r\n    }\r\n    @Override\r\n    publicList<SUser>listSUserData(){\r\n        returnsUserDao.listSUser();\r\n    }\r\n}\r\nSUserDao.java\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\npackagecom.ssm.dao;\r\nimportjava.util.List;\r\nimportcom.ssm.domain.SUser;\r\npublicinterfaceSUserDao{\r\n    publicvoidaddSUser(SUsersUser);\r\n    publicvoidmodifySUser(SUsersUser);\r\n    publicvoiddeleteSUser(SUsersUser);\r\n    publicSUserdetailSUser(Stringid);\r\n    publicList<SUser>listSUser();\r\n}\r\n \r\n在resources下添加映射文件\r\n \r\n\r\nSUserMapper.xml\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n50\r\n51\r\n52\r\n53\r\n54\r\n55\r\n56\r\n57\r\n58\r\n59\r\n60\r\n61\r\n62\r\n63\r\n64\r\n65\r\n66\r\n67\r\n68\r\n69\r\n70\r\n71\r\n72\r\n73\r\n74\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<!DOCTYPEmapperPUBLIC\"-//mybatis.org//DTDMapper3.0//EN\"\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\r\n<mappernamespace=\"com.ssm.dao.SUserDao\">\r\n    <resultMapid=\"BaseResultMap\"type=\"com.ssm.domain.SUser\">\r\n        <resultcolumn=\"id\"property=\"id\"jdbcType=\"INTEGER\"/>\r\n        <resultcolumn=\"name\"property=\"name\"jdbcType=\"VARCHAR\"/>\r\n        <resultcolumn=\"account\"property=\"account\"jdbcType=\"VARCHAR\"/>\r\n        <resultcolumn=\"password\"property=\"password\"\r\n            jdbcType=\"VARCHAR\"/>\r\n    </resultMap>\r\n    <sqlid=\"Base_Column_List\">\r\n        id,name,account,password\r\n    </sql>\r\n    <!--查询所有用户-->\r\n    <selectid=\"listSUser\"resultMap=\"BaseResultMap\">\r\n        select\r\n        <includerefid=\"Base_Column_List\"/>\r\n        froms_user\r\n    </select>\r\n    <selectid=\"detailSUser\"resultMap=\"BaseResultMap\">\r\n        select\r\n        <includerefid=\"Base_Column_List\"/>\r\n        froms_userwhereid=#{id}\r\n    </select>\r\n    <updateid=\"modifySUser\">\r\n        updates_userset\r\n        name=#{name},\r\n        account=#{account},\r\n        password=#{password}\r\n        where\r\n        id=#{id,jdbcType=INTEGER}\r\n    </update>\r\n    <deleteid=\"deleteSUser\">\r\n        deletefroms_userwhereid=#{id,jdbcType=INTEGER}\r\n    </delete>\r\n    <!--插入-->\r\n    <insertid=\"addSUser\">\r\n        insertintos_user\r\n        <trimprefix=\"(\"suffix=\")\"suffixOverrides=\",\">\r\n            <iftest=\"id!=null\">\r\n                id,\r\n            </if>\r\n            <iftest=\"name!=null\">\r\n                name,\r\n            </if>\r\n            <iftest=\"account!=null\">\r\n                account,\r\n            </if>\r\n            <iftest=\"password!=null\">\r\n                password,\r\n            </if>\r\n        </trim>\r\n        <trimprefix=\"values(\"suffix=\")\"suffixOverrides=\",\">\r\n            <iftest=\"id!=null\">\r\n                #{id,jdbcType=INTEGER},\r\n            </if>\r\n            <iftest=\"name!=null\">\r\n                #{name,jdbcType=VARCHAR},\r\n            </if>\r\n            <iftest=\"account!=null\">\r\n                #{account,jdbcType=VARCHAR},\r\n            </if>\r\n            <iftest=\"password!=null\">\r\n                #{password,jdbcType=VARCHAR},\r\n            </if>\r\n        </trim>\r\n    </insert>\r\n</mapper>\r\n10.添加相关前台页面\r\nwebapp目录下添加如下信息：\r\n\r\naddSUser.jsp\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n50\r\n51\r\n52\r\n53\r\n54\r\n55\r\n56\r\n57\r\n58\r\n59\r\n60\r\n61\r\n62\r\n63\r\n<%@pagelanguage=\"java\"contentType=\"text/html;charset=UTF-8\"\r\n    pageEncoding=\"UTF-8\"%>\r\n<!DOCTYPEhtmlPUBLIC\"-//W3C//DTDHTML4.01Transitional//EN\"\"http://www.w3.org/TR/html4/loose.dtd\">\r\n<html>\r\n<head>\r\n<metahttp-equiv=\"Content-Type\"content=\"text/html;charset=UTF-8\">\r\n<title>新增页面</title>\r\n<jsp:includepage=\"/includeUI.jsp\"></jsp:include>\r\n</head>\r\n<body>\r\n    <divclass=\"easyui-panel\"title=\"新增\"style=\"width:300px;\">\r\n        <formid=\"ff\"method=\"post\">\r\n            <tablecellpadding=\"5\">\r\n                <tr>\r\n                    <td>id</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"id\"name=\"id\"data-options=\"required:true\"></input></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>name</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"name\"name=\"name\"></input></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>account</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"account\"name=\"account\"></input></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>password</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"password\"name=\"password\"></input></td>\r\n                </tr>\r\n            </table>\r\n            <divalign=\"center\">\r\n                <aclass=\"easyui-linkbutton\"data-options=\"iconCls:\'icon-ok\'\"onclick=\"submit()\">确定</a>\r\n                <aclass=\"easyui-linkbutton\"data-options=\"iconCls:\'icon-cancel\'\"onclick=\"reset()\">重置</a>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</body>\r\n<scripttype=\"text/javascript\">\r\nfunctionsubmit(){\r\n    $(\'#ff\').form(\'submit\',{\r\n        url:\'addSUserData\',\r\n        dataType:\'json\',\r\n        onSubmit:function(){\r\n            //dosomecheck\r\n            //returnfalsetopreventsubmit;\r\n        },\r\n        success:function(data){\r\n            responseText=JSON.parse(data);\r\n            if(responseText.flag==\'success\'){\r\n                $.messager.alert(\'提示\',responseText.msg,\'info\');\r\n                window.opener.location.href=window.opener.location.href;\r\n                window.close();\r\n            }else{\r\n                $.messager.alert(\'错误\',responseText.msg,\'error\');\r\n            }\r\n        }\r\n    });\r\n}\r\nfunctionreset(){\r\n    $(\'#ff\').form(\'clear\');\r\n}\r\n</script>\r\n</html>\r\ndetailSUser.jsp\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n<%@pagelanguage=\"java\"contentType=\"text/html;charset=UTF-8\"\r\npageEncoding=\"UTF-8\"%>\r\n<!DOCTYPEhtmlPUBLIC\"-//W3C//DTDHTML4.01Transitional//EN\"\"http://www.w3.org/TR/html4/loose.dtd\">\r\n<html>\r\n<head>\r\n<metahttp-equiv=\"Content-Type\"content=\"text/html;charset=UTF-8\">\r\n<title>查看页面</title>\r\n<jsp:includepage=\"/includeUI.jsp\"></jsp:include>\r\n</head>\r\n<body>\r\n    <divclass=\"easyui-panel\"title=\"查看\"style=\"width:300px;\">\r\n        <formid=\"ff\"method=\"post\">\r\n            <tablecellpadding=\"5\">\r\n                <tr>\r\n                    <td>id</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"id\"name=\"id\"disabled=\"disabled\"data-options=\"required:true\"></input></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>name</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"name\"name=\"name\"disabled=\"disabled\"></input></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>account</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"account\"name=\"account\"disabled=\"disabled\"></input></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>password</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"password\"name=\"password\"disabled=\"disabled\"></input></td>\r\n                </tr>\r\n            </table>\r\n            <divalign=\"center\">\r\n                <aclass=\"easyui-linkbutton\"data-options=\"iconCls:\'icon-cancel\'\"onclick=\"close()\">关闭</a>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</body>\r\n<scripttype=\"text/javascript\">\r\n$(function(){\r\n    varparam=\'${param.id}\';\r\n    varurl=\'getSUserData?id=\'+param;\r\n    $(\'#ff\').form(\'load\',url);\r\n});\r\nfunctionclose(){\r\n    window.close();\r\n}\r\n</script>\r\n</html>\r\nmodifySUser.jsp\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n50\r\n51\r\n52\r\n53\r\n54\r\n55\r\n56\r\n57\r\n58\r\n59\r\n60\r\n61\r\n62\r\n63\r\n64\r\n65\r\n66\r\n67\r\n68\r\n69\r\n<%@pagelanguage=\"java\"contentType=\"text/html;charset=UTF-8\"\r\npageEncoding=\"UTF-8\"%>\r\n<!DOCTYPEhtmlPUBLIC\"-//W3C//DTDHTML4.01Transitional//EN\"\"http://www.w3.org/TR/html4/loose.dtd\">\r\n<html>\r\n<head>\r\n<metahttp-equiv=\"Content-Type\"content=\"text/html;charset=UTF-8\">\r\n<title>修改页面</title>\r\n<jsp:includepage=\"/includeUI.jsp\"></jsp:include>\r\n</head>\r\n<body>\r\n    <divclass=\"easyui-panel\"title=\"修改\"style=\"width:300px;\">\r\n        <formid=\"ff\"method=\"post\">\r\n            <tablecellpadding=\"5\">\r\n                <tr>\r\n                    <td>id</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"id\"name=\"id\"readonly=\"readonly\"data-options=\"required:true\"></input></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>name</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"name\"name=\"name\"></input></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>account</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"account\"name=\"account\"></input></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>password</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"password\"name=\"password\"></input></td>\r\n                </tr>\r\n            </table>\r\n            <divalign=\"center\">\r\n                <aclass=\"easyui-linkbutton\"data-options=\"iconCls:\'icon-ok\'\"onclick=\"submit()\">确定</a>\r\n                <aclass=\"easyui-linkbutton\"data-options=\"iconCls:\'icon-cancel\'\"onclick=\"cancel()\">取消</a>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</body>\r\n<scripttype=\"text/javascript\">\r\n$(function(){\r\n    varparam=\'${param.id}\';\r\n    varurl=\'getSUserData?id=\'+param;\r\n    $(\'#ff\').form(\'load\',url);\r\n});\r\nfunctionsubmit(){\r\n    $(\'#ff\').form(\'submit\',{\r\n        url:\'modifySUserData\',\r\n        dataType:\'json\',\r\n        onSubmit:function(){\r\n            //dosomecheck\r\n            //returnfalsetopreventsubmit;\r\n        },\r\n        success:function(data){\r\n            responseText=JSON.parse(data);\r\n            if(responseText.flag==\'success\'){\r\n                $.messager.alert(\'提示\',responseText.msg,\'info\');\r\n                window.opener.location.href=window.opener.location.href;\r\n                window.close();\r\n            }else{\r\n                $.messager.alert(\'错误\',responseText.msg,\'error\');\r\n            }\r\n        }\r\n    });\r\n}\r\nfunctioncancel(){\r\n    window.close();\r\n}\r\n</script>\r\n</html>\r\nlistSUser.jsp\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n50\r\n51\r\n52\r\n53\r\n54\r\n55\r\n56\r\n57\r\n58\r\n59\r\n60\r\n61\r\n62\r\n63\r\n64\r\n65\r\n66\r\n67\r\n68\r\n69\r\n70\r\n71\r\n72\r\n73\r\n74\r\n75\r\n76\r\n77\r\n78\r\n79\r\n80\r\n81\r\n82\r\n83\r\n84\r\n85\r\n86\r\n87\r\n88\r\n89\r\n90\r\n91\r\n92\r\n93\r\n94\r\n95\r\n96\r\n97\r\n98\r\n99\r\n<%@pagelanguage=\"java\"contentType=\"text/html;charset=UTF-8\"\r\n    pageEncoding=\"UTF-8\"%>\r\n<!DOCTYPEhtmlPUBLIC\"-//W3C//DTDHTML4.01Transitional//EN\"\"http://www.w3.org/TR/html4/loose.dtd\">\r\n<html>\r\n<head>\r\n<metahttp-equiv=\"Content-Type\"content=\"text/html;charset=UTF-8\">\r\n<title>列表页面</title>\r\n<jsp:includepage=\"/includeUI.jsp\"></jsp:include>\r\n</head>\r\n<body>\r\n    <tableid=dgclass=\"easyui-datagrid\"title=\"列表页面\"style=\"width:500px\"\r\n        data-options=\"rownumbers:true,\r\n                    singleSelect:true,\r\n                    method:\'post\',\r\n                    loadMsg:\'数据加载中，请稍等...\',\r\n                    toolbar:toolbar,\r\n                    pagination:true,\r\n                    pageSize:10\">\r\n        <thead>\r\n            <tr>\r\n                <thdata-options=\"field:\'id\',width:100\">ID</th>\r\n                <thdata-options=\"field:\'name\',width:100\">Name</th>\r\n                <thdata-options=\"field:\'account\',width:100,align:\'left\'\">Account</th>\r\n                <thdata-options=\"field:\'password\',width:100,align:\'right\'\">Password</th>\r\n            </tr>\r\n        </thead>\r\n    </table>\r\n</body>\r\n<scripttype=\"text/javascript\">\r\n$(function(){\r\n    //指定url\r\n    $(\'#dg\').datagrid({\r\nurl:\'listSUserData\',\r\n});\r\n//刷新表格\r\n$(\"#dg\").datagrid(\"reload\");\r\n});\r\nvartoolbar=[{\r\n    text:\'新增\',\r\n    iconCls:\'icon-add\',\r\n    handler:function(){\r\n        varurl=\"getSUserAddPage\";\r\n        window.open(url,\"newWindow\");\r\n    }\r\n},{\r\n    text:\'修改\',\r\n    iconCls:\'icon-edit\',\r\n    handler:function(){\r\n        vardata=$(\"#dg\").datagrid(\"getSelected\");\r\n        if(data!=null){\r\n            varurl=\"getSUserModifyPage?id=\"+data.id;\r\n            window.open(url,\"newWindow\");\r\n        }else{\r\n            $.messager.alert(\'提示\',\'请选择一条记录！\',\'info\');\r\n        }\r\n    }\r\n},{\r\n    text:\'删除\',\r\n    iconCls:\'icon-remove\',\r\n    handler:function(){\r\n        vardata=$(\"#dg\").datagrid(\"getSelected\");\r\n        if(data!=null){\r\n            $.messager.confirm(\'提示\',\'确定要删除吗？\',function(r){\r\n                if(r){\r\n                    $.ajax({\r\n                                            type:\"POST\",\r\n                                            url:\"deleteSUserData\",\r\n                                            data:\"id=\"+data.id,\r\n                                            dataType:\"json\",\r\n                                            success:function(data){\r\n                                                    if(data.flag==\"success\"){\r\n                                                        $.messager.alert(\'提示\',data.msg,\'info\');\r\n                                                        $(\"#dg\").datagrid(\'reload\');\r\n                                        }else{\r\n                                            $.messager.alert(\'错误\',data.msg,\'error\');\r\n                                        }\r\n                                            }\r\n                                    });\r\n                }\r\n            });\r\n        }else{\r\n            $.messager.alert(\'提示\',\'请选择一条记录！\',\'info\');\r\n        }\r\n    }\r\n},{\r\n    text:\'查看\',\r\n    iconCls:\'icon-search\',\r\n    handler:function(){\r\n        vardata=$(\"#dg\").datagrid(\"getSelected\");\r\n        if(data!=null){\r\n            varurl=\"getSUserDetailPage?id=\"+data.id;\r\n            window.open(url,\"newWindow\");\r\n        }else{\r\n            $.messager.alert(\'提示\',\'请选择一条记录！\',\'info\');\r\n        }\r\n    }\r\n}];\r\n</script>\r\n</html>\r\n includeUI.jsp为引入easyui样式公共文件\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n<%@pagelanguage=\"java\"contentType=\"text/html;charset=UTF-8\"\r\npageEncoding=\"UTF-8\"%>\r\n<%@tagliburi=\"http://java.sun.com/jsp/jstl/core\"prefix=\"c\"%>\r\n<!DOCTYPEhtmlPUBLIC\"-//W3C//DTDHTML4.01Transitional//EN\"\"http://www.w3.org/TR/html4/loose.dtd\">\r\n<html>\r\n    <head>\r\n        <metahttp-equiv=\"Content-Type\"content=\"text/html;charset=UTF-8\">\r\n        <title>js/css</title>\r\n        <!--以下内容引入为默认easyui样式-->\r\n        <linkrel=\"stylesheet\"type=\"text/css\"href=\"<%=request.getContextPath()%>/jquery-easyui/themes/default/easyui.css\">\r\n        <linkrel=\"stylesheet\"type=\"text/css\"href=\"<%=request.getContextPath()%>/jquery-easyui/themes/icon.css\">\r\n        <scripttype=\"text/JavaScript\"src=\"<%=request.getContextPath()%>/jquery-easyui/jquery.min.js\"></script>\r\n        <scripttype=\"text/javascript\"src=\"<%=request.getContextPath()%>/jquery-easyui/jquery.easyui.min.js\"></script>\r\n        <scripttype=\"text/javascript\"src=\"<%=request.getContextPath()%>/jquery-easyui/locale/easyui-lang-zh_CN.js\"></script>\r\n    </head>\r\n    <body>\r\n    </body>\r\n</html>\r\n11.展示效果\r\n至此，简单的ssm框架整合已经完成，同时添加了基本的操作功能；\r\n列表页面\r\n\r\n新增页面\r\n\r\n修改页面\r\n\r\n查看页面\r\n\r\n删除操作\r\n','#JAVA#/#maven#',5,NULL,1,'yc','2019-03-09',NULL,NULL,'提供两种开发工具\r\nSSM框架项目可以使用Eclipse进行开发为了能简化开发流程，首先需要在Eclipse中安装SpringIDE插件，详细安装步骤请参考：\r\nhttps://blog.csdn.net/zhen_6137/article/details/79383941\r\n或者使用Spring官方提供的STS工具进行开发，下载地址：\r\nhttps://spring.io/tools/sts/legacy',NULL,NULL,NULL,NULL,NULL),(11,'老干部','','','Linux下的定时任务crontab的配置','images/7.jpg','> crontab是linux中的一种定时调度配置管理，我们可以使用crontab来按照自己的需求配置相应的定时任务\r\n\r\n1.查看linux下是否已经安装了crontab以及相关服务\r\n    rpm -qa|grep vixie-cron\r\n    rpm -qa|grep crontabs\r\n其中vixie-cron软件包是cron的主程序。\r\ncrontabs软件包是用来安装、卸装、或列举用来驱动 cron 守护进程的表格的程序。\r\n \r\n如果系统中没有安装这两个软件包，则需要手动安装，执行如下命令：\r\n    yum -y install vixie-cron\r\n    yum -y install crontabs\r\n \r\n2.确认crontab服务是否已经启动\r\n    cron服务对应的后台进程名称为cornd，所以我们需要查看crond进程的状态。\r\n \r\n    查看crontd进程运行状态：service crond status 或者 systemctl status crond.service\r\n    启动crontab服务：service crond start 或者 systemctl start crond.service\r\n    停止crontab服务：service crond stop 或者 systemctl stop crond.service\r\n    重启crontab服务：service crond restart 或者 systemctl restart crond.service\r\n    重新载入crontab配置：service crond reload 或者 systemctl reload crond.service \r\n    （备注：在CentOS 7 以后的版本中建议使用systemctl命令来监控和调用服务）\r\n \r\n3.配置定时任务\r\n    cron有两个配置文件，一个是一个全局配置文件（/etc/crontab），是针对系统任务的；\r\n一组是crontab命令生成的配置文件（/var/spool/cron下的文件），是针对某个用户的.定时任务配置到任意一个中都可以。\r\n \r\n在/etc/crontab中添加定时任务\r\n \r\n普通用户配置定时任务：','',5,NULL,3,'yc','2019-03-09',NULL,NULL,'crontab是linux中的一种定时调度配置管理，我们可以使用crontab来按照自己的需求配置相应的定时任务',NULL,NULL,NULL,NULL,NULL),(12,'老干部','','','VNC CentOS Linux下VNC Server远程桌面配置详解','images/6.jpg','# VNC概述\r\n  VNC (Virtual Network Console)是虚拟网络控制台的缩写。VNC 是一款优秀的远程控制工具软件，由著名的 AT&T 的欧洲研究实验室开发的。VNC 是在基于 UNIX 和 Linux操作系统的免费的开源软件，远程控制能力强大，高效实用，其性能可以和 Windows 或 MAC中的任何远程控制软件媲美。在 Linux 中，VNC 包括以下四个命令：vncserver，vncviewer，vncpasswd，和 vncconnect。大多数情况下只需要其中的两个命令：vncserver 和 vncviewer。目前，原来的AT&T版本已经不再使用，因为更多有重大改善的分支版本已经出现， 像是RealVNC， VNC tight 和UltraVNC。 Real VNC 是当前最活跃和强大的主流应用。\r\n RealVNC官方网址  :  http://www.realvnc.com/\r\n Tight VNC官方网址:  http://www.tightvnc.com/\r\n UltraVNC官方网址 ： http://www.uvnc.com/\r\n#  VNC原理\r\nVNC系统由客户端，服务端和一个协议组成。VNC的服务端目的是分享其所运行机器的屏幕， 服务端被动的允许客户端控制它。 VNC客户端（或Viewer） 观察控制服务端，与服务端交互。 VNC 协议 Protocol (RFB)是一个简单的协议，传送服务端的原始图像到客户端（一个X,Y 位置上的正方形的点阵数据）， 客户端传送事件消息到服务端。\r\n服务器发送小方块的帧缓存给客户端，在最简单的情况，VNC协议使用大量的带宽，因此各种各样的方法被发明出来减少通讯的开支，举例来说，有各种各样的编码方法来决定最有效率的方法来传送这些点阵方块）\r\n协议允许客户端和服务端去协议哪种编码会被使用，最简单的编码，被大多数客户端和服务端所支持的是， 从左到右的像素扫描数据的原始编码， 当原始的满屏被发送后，只发送变化的方块区域。这种编码在幁间只有小部分屏幕变化的情况下工作的非常好（像是鼠标键在桌面移动的情况，或在光标处敲击文字），不过如果大量的像素同时变化带宽将会增加的非常高，像是拖动一个窗口或观看全屏录像。\r\nVNC默认使用TCP端口5900至5906，而JAVA的VNC客户端使用5800至5806。一个服务端可以在5500口用“监听模式”连接一个客户端，使用监听模式的一个好处是服务端不需要设置防火墙。\r\nUNIX上的VNC称为xvnc，同时扮演两种角色，对X窗口系统的应用程序来说它是X server，对于VNC客户端来说它是VNC服务器程序。\r\n# VNC安装配置\r\n安装相应桌面环境与vnc服务端和客户端：\r\n# yum groupinstall \"GNOME Desktop Environment\"（CentOS 5.x安装GNOME桌面环境）\r\n# yum groupinstall \"X Window System\" \"Desktop\"（CentOS 6.x安装GNOME桌面环境）\r\n# yum groupinstall Xfce（CentOS安装Xfce桌面环境，可选）\r\n# yum install vnc-server vnc* （CentOS 5.x里）\r\n# yum install tigervnc-server tigervnc （CentOS 6.x里）\r\n说明：Xfce与KDE，Gnome都是图形桌面环境，其特点是占用资源更小资源占用情况大致为：Gnome>KDE>Xfce。具体情况与版本有关。一般版本越新，资源占用越大。\r\n1.确认VNC是否安装\r\n默认情况下，CentOS Linux安装程序会将VNC服务安装在系统上。\r\n确认是否已经安装VNC服务及查看安装的VNC版本\r\n[root@ localhost ~]# rpm -q vnc-server\r\nvnc-server-4.1.2-9.el5\r\n[root@ localhost ~]#\r\n若系统没有安装,可以到操作系统安装盘的Server目录下找到VNC服务的RPM安装包vnc-server-4.1.2-9.el5.x86_64.rpm，安装命令如下\r\nrpm -ivh /mnt/Server/vnc-server-4.1.2-9.el5.x86_64.rpm\r\n也可以连网直接用yum源安装。\r\n2.启动VNC服务\r\n使用vncserver命令启动VNC服务，命令格式为“vncserver :桌面号”，其中“桌面号”用“数字”的方式表示，每个用户连接需要占用1个桌面\r\n启动编号为1的桌面示例如下\r\n=======================================================================\r\n[root@ localhost ~]# vncserver :1\r\nYou will require a password to access your desktops.\r\nPassword:                                            #要求输入密码\r\nVerify:                                                #验证刚才输入的密码\r\nxauth:  creating new authority file /root/.Xauthority\r\nNew \'testdb:1 (root)\' desktop is testdb:1\r\nCreating default startup script. /root/.vnc/xstartup\r\nStarting applications specified in /root/.vnc/xstartup\r\nLog file is /root/.vnc/testdb:1.log\r\n=======================================================================\r\n命令执行的过程中，是在root用户提示符下执行同时也是第一次执行，会在此用户的主目录（/root/）下生成.vnc子目录和相应的配置文件，同时需要输入密码(vncviewer端用此用户访问的密码)，这个密码被加密保存在此用户主目录下的.vnc子目录（/root/.vnc/passwd）中；同时在用户主目录下的.vnc子目录中为用户自动建立xstartup配置文件（/root/.vnc/xstartup），在每次启动VND服务时，都会读取该文件中的配置信息。上面的是添加root用户通过VNC访问权限，如果想添加其他用户访问权限，需要在相应的用户命令提示符下进行上面的操作（如test用户也需要执行[test@ localhost ~]$ vncserver :1   在相应的主目录下生成对应的.vnc子目录）。对不同用户的访问密码更改也需要在相应的命令提示符下操作。\r\n在/root/.vnc/目录下还有一个“root:1.pid”文件，这个文件记录着启动VNC后对应后天操作系统的进程号，用于停止VNC服务时准确定位进程号.\r\n3.VNC服务使用的端口号与桌面号的关系\r\nVNC服务使用的端口号与桌面号相关，VNC使用TCP端口从5900开始，对应关系如下\r\n桌面号为“1”  ---- 端口号为5901\r\n桌面号为“2”  ---- 端口号为5902\r\n桌面号为“3”  ---- 端口号为5903\r\n……\r\n基于Java的VNC客户程序Web服务TCP端口从5800开始，也是与桌面号相关，对应关系如下\r\n桌面号为“1”  ---- 端口号为5801\r\n桌面号为“2”  ---- 端口号为5802\r\n桌面号为“3”  ---- 端口号为5803\r\n……\r\n基于上面的介绍，如果Linux开启了防火墙功能，就需要手工开启相应的端口，以开启桌面号为“1”相应的端口为例，命令如下\r\n=========================================================================\r\n[root@ localhost ~]# iptables -I INPUT -p tcp --dport 5901 -j ACCEPT\r\n[root@ localhost ~]# iptables -I INPUT -p tcp --dport 5801 -j ACCEPT\r\n==========================================================================\r\n4.测试VNC服务\r\n第一种方法是使用VNC Viewer软件登陆测试，操作流程如下\r\n启动VNC Viewer软件 --> Server输入“192.168.1.100:1” --> 点击“OK” --> Password输入登陆密码 --> 点击“OK”登陆到X-Window图形桌面环境 --> 测试成功\r\n第二种方法是使用Web浏览器（如Firefox,IE,Safari）登陆测试，操作流程如下\r\n地址栏输入192.168.1.100:1:5801/ --> 出现VNC viewer for Java（此工具是使用Java编写的VNC客户端程序）界面，同时跳出VNC viewer对话框，在Server处输入“144.194.192.183:1”点击“OK” --> Password输入登陆密码 --> 点击“OK”登陆到X-Window图形桌面环境 --> 测试成功\r\n（注：VNC viewer for Java需要JRE支持，如果页面无法显示，表示没有安装JRE，可以到http://java.sun.com/javase/downloads/index_jdk5.jsp这里下载最新的JRE进行安装）\r\n5.配置VNC图形桌面环境为KDE或GNOME桌面环境\r\n如果您是按照我的上面方法进行的配置的，登陆到桌面后效果是非常简单的，只有一个Shell可供使用，这是为什么呢？怎么才能看到可爱并且美丽的KDE或GNOME桌面环境呢？回答如下\r\n之所以那么的难看，是因为VNC服务默认使用的是twm图形桌面环境的，可以在VNC的配置文件xstartup中对其进行修改(需要登录的每个用户主目录下的.vnc/xstartup文件都要修改)，先看一下这个配置文件。\r\n==========================================================================\r\n[root@ localhost ~]# vi /root/.vnc/xstartup\r\n#!/bin/sh\r\n# Uncomment the following two lines for normal desktop:\r\n# unset SESSION_MANAGER\r\n# exec /etc/X11/xinit/xinitrc\r\n[ -x /etc/vnc/xstartup ] && exec /etc/vnc/xstartup\r\n[ -r $HOME/.Xresources ] && xrdb $HOME/.Xresources\r\nxsetroot -solid grey\r\nvncconfig -iconic &\r\nxterm -geometry 80x24+10+10 -ls -title \"$VNCDESKTOP Desktop\" &\r\ntwm &\r\n==========================================================================\r\n取消这个xstartup文件中下面两行的注释，就是删除行前面的“#”的符号。\r\n# unset SESSION_MANAGER\r\n# exec /etc/X11/xinit/xinitrc\r\n这个xstartup文件的最后一行twm& 前面加“#” 注释”， 在新建一行添加gnome-session &  ，重新启动vncserver服务后就可以登陆到GNOME桌面环境。\r\n这个xstartup文件的最后一行twm& 前面加“#” 注释”， 在新建一行添加startkde &  ，重新启动vncserver服务后就可以登陆到KDE桌面环境 。                             \r\n重新启动vncserver服务的方法：\r\n==========================================================================[[root@ localhost ~]# vncserver -kill :1\r\n[root@ localhost ~]# vncserver :1\r\n==========================================================================\r\n6.配置多个桌面\r\n可以使用如下的方法启动多个桌面的VNC\r\nvncserver :1\r\nvncserver :2\r\nvncserver :3\r\n……\r\n但是这种手工启动的方法在服务器重新启动之后将失效，因此，下面介绍如何让系统自动管理多个桌面的VNC，方法是将需要自动管理的信息添加到/etc/sysconfig/vncservers配置文件中，先以桌面1为root用户、桌面2为test用户为例进行配置如下：\r\n格式为：VNCSERVERS=\"桌面号:使用的用户名  桌面号:使用的用户名\"   \r\n修改/etc/sysconfig/vncservers文件，未经修改的vncservers文件如下所示：\r\n===========================================================\r\n[root@localhost ~]# more /etc/sysconfig/vncservers\r\n# The VNCSERVERS variable is a list of display:user pairs.\r\n#\r\n# Uncomment the lines below to start a VNC server on display :2\r\n# as my \'myusername\' (adjust this to your own).  You will also\r\n# need to set a VNC password; run \'man vncpasswd\' to see how\r\n# to do that. \r\n#\r\n# DO NOT RUN THIS SERVICE if your local area network is\r\n# untrusted!  For a secure way of using VNC, see\r\n# <URL:http://www.uk.research.att.com/archive/vnc/sshvnc.html>.\r\n# Use \"-nolisten tcp\" to prevent X connections to your VNC server via TCP.\r\n# Use \"-nohttpd\" to prevent web-based VNC clients connecting.\r\n# Use \"-localhost\" to prevent remote VNC clients connecting except when\r\n# doing so through a secure tunnel.  See the \"-via\" option in the\r\n# `man vncviewer\' manual page.\r\n# VNCSERVERS=\"2:myusername\"\r\n# VNCSERVERARGS[2]=\"-geometry 800x600 -nolisten tcp -nohttpd -localhost\"\r\n===========================================================\r\n \r\n将最后两行配置信息取消注释。\r\nVNCSERVERS=\"2:myusername\"\r\n上面这行添加两个用户，可以添加多个用户中间用空格隔开，如下：\r\nVNCSERVERS=\"1：root  2：test\"\r\n VNCSERVERARGS[2]=\"-geometry 800x600 -nolisten tcp -nohttpd -localhost\"\r\n上面这行是每个用户的配置参数，用户和用户参数要一一对应，修个成如下参数：\r\nVNCSERVERARGS[1]=\"-geometry 1024x768 \"\r\nVNCSERVERARGS[2]=\"-geometry 1024x768 \"\r\n关于参数配置说明：\r\n1）、VNCSERVERS 是用来设定可以使用VNC的服务器账号，可以设定多个，这里的“用户名”是指linux系统用户的名称（root用户和普通用户），例如上面root、test，但是中间要用空格隔开。使用VNCVIEWER登录时，192.168.1.100:1表示是以root账号登录，以此类推。\r\n2）、注意前面的数字“1”或是“2”为桌面号，每个用户可以有多个桌面号，但是每个桌面号只能属于一个用户，当你要从其它电脑用VNC访问服务器时，就需要用IP:1这种方法，而不能直接用IP。如假定你的VNC服务器IP是192.168.1.100，那想进入VNC服务器，并以test用户登录时，需要在vncviewer里输入IP的地方输入：192.168.1.100:2 （2对应的就是test用户）,如果是root,那就是192.168.1.100:1 （1对应的就是root用户）；\r\n3）、下面两行[1][2]最好与上面那个相对应，后面的800X600可以换成你电脑支持的分辨率。注意中间的”x”不是“*”，而是小写字母”x”。\r\n4）：-geometry 表示远程桌面分辨率，默认为800x600，根据vncviewer所在电脑的分辨率设置。\r\n5）：-nohttpd  表示不监听HTTP端口（58xx），这个在参数里面去掉不加影响效果。\r\n6）：-nolisten tcp 表示不监听TCP端口（60xx），这个在参数里去掉不加影响效果。\r\n7）：-localhost 只运行从本机访问，这个在参数里去掉不加，加了远程登录不了。\r\n8）：AlwaysShared 默认只允许一个VNCVIEWER连接，此参数表示同一个显示端口允许多用户同时登录.\r\n9）：-depth  表示色深，参数有8,16,24,32. 可以不加。\r\n7）: SecurityTypes None 登录不需要密码认证VncAuth默认值,要密码认证。\r\n7.修改VNC访问的密码\r\n使用命令vncpasswd对不同用户的VNC的密码进行修改，一定要注意，如果配置了不同用户的VNC需要分别到各自用户中进行修改，例如在我的这个实验中，root用户和test用户需要分别修改，修改过程如下：\r\n==========================================================================\r\n[root@ localhost ~]# vncpasswd\r\nPassword:                                                       #输入密码\r\nVerify:                                                           #确认密码\r\n[root@ localhost ~]#\r\n8.启动和停止VNC服务\r\n1）启动VNC服务命令\r\n[root@ localhost ~]# service vncserver start\r\n2）停止VNC服务命令\r\n[root@ localhost ~]# service vncserver stop\r\n3）重新启动VNC服务命令\r\n[root@ localhost ~]# service vncserver restart\r\n\r\n9设置VNC服务随系统启动自动加载\r\n第一种方法：使用“ntsysv”命令启动图形化服务配置程序，在vncserver服务前加上星号，点击确定，配置完成。\r\n第二种方法：使用“chkconfig”在命令行模式下进行操作，命令使用如下（预知chkconfig详细使用方法请自助式man一下）\r\n[root@testdb ~]# chkconfig vncserver on\r\n[root@testdb ~]# chkconfig --list vncserver\r\nvncserver       0:off   1:off   2:on    3:on    4:on    5:on    6:off\r\n10、可能遇到的问题:\r\n1）、黑屏\r\n在Linux里安装配置完VNC服务端，发现多用户登陆会出现黑屏的情况，具体的现象为：\r\n客户端可以通过IP与会话号登陆进入系统，但登陆进去是漆黑一片，除了一个叉形的鼠标以外，伸手不见五指。\r\n原因：用户的VNC的启动文件权限未设置正确。\r\n解决方法：将黑屏用户的xstartup（一般为：/用户目录/.vnc/xstartup）文件的属性修改为755（rwxr-xr-x）。\r\n完后杀掉所有已经启动的VNC客户端：\r\nvncserver -kill :1\r\nvncserver -kill :2 （注意：-kill与:1或:2中间有一空格）\r\n最后重启vncserver服务即可！ # service vncserver restart\r\n注意：vncserver只能由启动它的用户来关闭，即时是root也不能关闭其它用户开启的vncserver，\r\n除非用kill命令暴力杀死进程。\r\n2）、Windown下如何登陆VNC Server\r\na从浏览器登录（浏览器需要安装JAVA支持库，作为java applet来实现，才能登录控制VNC服务器，可以yum install java*安装）\r\n直接从浏览器中输入如下地址：\r\nhttp://xxx.xxx.xxx.xxx:5801\r\nb从VNC客户端登录\r\n在windows上安装vnc客户端，然后输入xxx.xxx.xxx.xxx:x，连接登录。\r\n备注：\r\n输入的格式为IP:桌面号，桌面号要看你自己的配置而定。如192.168.80.128:1\r\n登陆提示connection refused(10061)，则是因为linux防火墙的问题，请检查防火墙设置。\r\n后面的尾缀”:x”也是不能少的，要不然老提示failed to connect : connection refused (10061)\r\n11.小结\r\n  VNC的详细配置方法到此已经写完，都是在网上搜索的加自己的实践。VNC对于远程调用图形化界面来说非常的轻巧和便捷！','',1,NULL,2,'yc','2019-03-09',NULL,NULL,'VNC (Virtual Network Console)是虚拟网络控制台的缩写。VNC 是一款优秀的远程控制工具软件，由著名的 AT&T 的欧洲研究实验室开发的。VNC 是在基于 UNIX 和 Linux操作系统的免费的开源软件，远程控制能力强大，高效实用，其性能可以和 Windows 或 MAC中的任何远程控制软件媲美。在 Linux 中，VNC 包括以下四个命令：vncserver，vncviewer，vncpasswd，和 vncconnect。大多数情况下只需要其中的两个命令：vncserver 和 vncviewer。目前，原来的AT&T版本已经不再使用，因为更多有重大改善的分支版本已经出现， 像是RealVNC， VNC tight 和UltraVNC。 Real VNC 是当前最活跃和强大的主流应用。\r\n RealVNC官方网址  :  http://www.realvnc.com/\r\n Tight VNC官方网址:  http://www.tightvnc.com/\r\n UltraVNC官方网址 ： http://www.uvnc.com/',NULL,NULL,NULL,NULL,NULL),(13,'老干部','','','Linux基础命令','images/1.jpg','Part1:\r\n系统命令存放:/bin或/sbin\r\n#start x 调回xwindows\r\n/etc/inittab\r\n启动级别解释:0-6\r\n0:关机\r\n1:单用户\r\n2:无网络无图形 \r\n3:有网络无图形\r\n4:预留\r\n5:有网络有图形\r\n6:重启\r\n-----------------------------------------------------------\r\nshell:命令解释器，用户通过shell和操作系统的内核之间进行交互,linux命令又分为\r\n内部，与外部俩部分，例如：qq软件不属于linux原有命令。\r\n-----------------------------------------------------------\r\nPart2:\r\n基础捷键：\r\n1.tab ：补齐\r\n2.反斜杠 \\ 强制换行 \r\n3.ctrl+u 清空至行首 \r\n4.ctrl+k 清空至行尾 \r\n5.ctrl+l 清屏 \r\n6.ctrl+c 取消本次命令编辑终断\r\n扩展：windows帮助执行：cmd输入 dir /? \r\n----------------------------------------------------\r\nPart3:基础命令\r\n一.目录操作命令\r\n1.pwd:打印显示当前路径\r\n2.cd:切换工作目录\r\n\r\n#cd ~ 表示返回主目录\r\n绝对路径与相对路径:\r\n绝对路径：直观从根开始执行 ：#cd /root/Desktop\r\n相对路径：从当下开始执行 #cd . 或 cd .. 当前目录 ，上级目录 的切换\r\n--------------------------------------------------------------------\r\n3.ls:显示目录内容\r\n\r\n-a 显示所有子目录和文件信息包括隐藏文件\r\n-l 以长格式显示 \r\n-R 递归显示内容\r\n-i 查看文件的节点数\r\n-d 显示目录本身属性（只显示目录不关心内容）\r\n--color 以颜色区别不同类型文件 \r\n例如：ls -l /usr表示以长格式显示/usr下的文件信息\r\n4.mkdir:创建目录\r\n#mkdir -p /haha/xixi/qq 递归一次创建多个目录\r\n5.du:统计目录及文件空间占用情况\r\n-a 默认-a \r\n-s 只统计每个参数占用空间大小\r\n-h 以更为易懂的字节单位(K,M 等)\r\n二.文件操作命令\r\n6.touch:创建空文件 \r\ntouch test.txt表示在当前目录下创建test.txt \r\ntouch /usr/test.txt表示在usr目录下创建test.txt\r\n7.cp:复制 格式:#cp 源 目标 \r\n例：cp /usr/test.txt /usr/test2.txt /home表示将usr下面的test.txt和test2.txt拷贝到home目录下\r\n例：cp -R /usr /home 其中R表示复制目录 表示就爱了个usr目录拷贝到home下\r\n-R 递归复制整个目录树\r\n-p 保持原文件属性不变（时间，作者...）\r\n-f 强制覆盖目标同名文件或目录\r\n-i 需要覆盖文件或目录时进行提醒\r\n---------------------------------------\r\n8.rm -rf:强制删除不提示 \r\nrm file1 删除file1 \r\nrm -r dir1 删除目录dir1（一般使用rm -rf dir1 强制删除所有文件，避免询问是否删除）\r\n9.mv:移除 \"在同目录下修改文件名\"\r\n例：mv test.txt test2.txt表示将test.txt改名为test2.txt\r\n例：mv test.txt /home表示将test.txt剪切到/home下 \r\n10.which:查找系统命令位置\r\n11.find:查找文件或目录 格式#find / -name qq\r\n-name:按文件名称查找\r\n-size:按文件大小查找\r\n-user:按文件属主查找\r\n-type:按文件类型查找\r\n12.ln -s :软链接 格式：#ln -s /etc/passwd /home\r\n-----------------------------------------------------\r\n三.文件内容操作命令\r\n13.cat 显示文件全部内容\r\n14.more 逐屏显示文件内容\r\n15.less 与more命令相同 格式：#cat /etc/passwd |more或less\r\n16.head -数字 查看显示默认前10行 格式：#head /etc/passwd\r\n17.tail -数字 查看显示默认后10行 格式：#tail /etc/passwd \r\ntail -F 监控 执行不退出多用于监视日志\r\n18.wc:统计文件中单词数量 格式：#wc -l /etc/passd\r\n-l:统计行数\r\n-w:统计单词个数\r\n-c:统计字节数 \r\n----------------------\r\n19.grep:过滤 格式：#grep ^root /etc/passwd \r\n-i：查找忽略大小写\r\n-v：反向过滤\r\n^:表示以。。。开头\r\n$:表示以。。。结尾\r\n20.tar:归档及压缩命令 \r\n-c:创建.tar格式的包文件\r\n-x:解开.tar格式的包文件\r\n-v:输出详细信息\r\n-f:表示使用归档文件 \r\n-p:打包时保留原始文件及目录权限 \r\n-t:列表查看包内的文件\r\n-C：指定解压路径\r\n格式：#tar -cvf passwd.tar passwd 创\r\n#tar -xvf passwd.tar -C /home 解\r\n调用： -z :gzip \r\n-j :bzip2\r\n格式:#tar -czvf passwd.tar.gz \r\n#tar -cjvf passwd.tar.bz2 创\r\n#tar -xzvf passwd.tar.gz -C /home \r\n#tar -xjvf passwd.tar.bz2 -C /home 解\r\n ','#Linux#',5,NULL,5,'yc','2019-03-09',NULL,NULL,'系统命令存放:/bin或/sbin\r\n#start x 调回xwindows\r\n/etc/inittab\r\n启动级别解释:0-6\r\n0:关机\r\n1:单用户\r\n2:无网络无图形 \r\n3:有网络无图形\r\n4:预留\r\n5:有网络有图形\r\n6:重启',NULL,NULL,NULL,NULL,NULL),(14,'老干部','','','Spring基础知识学习总结','images/1.jpg','Spring是什么？\r\nSpring是一个开源框架\r\nSpring为简化企开发而生，使用spring可以简化javabean的实现和管理\r\nSpring是一个IOC控制反转/DI依赖注入和AOP容器框架\r\n \r\n-轻量级：非侵入性\r\n-依赖注入IOC DI\r\n-面向切面编程 AOP\r\n-容器：spring是一个容器，它包含并管理整个应用对象的生命周期\r\n-一站式框架(可以整合其他框架)：在IOC和AOP的基础上可以去整合一些优秀的第三方框架（spring自身也提供了展现层SpringMVC和持久层SpringJDBC）\r\n \r\nIOC和DI\r\nIOC（Inversion Of　Control）：其思想是反转资源获取的方向。传统的资源查找方式要求组件向容器发起请求获取资源。作为响应，容器适时的返回资源。而应用了IOC之后，容器主动的将资源推送给它所管理的组件，组件所要做的仅仅是选择一种合适的方式来接受资源，也被称为查找的被动形式。\r\nDI（Dependency Injection）：IOC的另一种表达方式，即组件以一些预定好的方式（例如setter方法）接受来自容器注入的资源。\r\n \r\nIOC前生\r\n--分离接口与实现（自己实现）\r\n--工厂设计模式（工厂中获取）\r\n--采用控制反转\r\n \r\n \r\n \r\nIOC&DI概述：\r\n配置bean\r\n配置形式：基于XML文件的方式；基于注解的方式\r\nBean的配置方式：通过全类名（反射）、通过工厂方法（静态工厂方法&实例工厂方法）、\r\nIOC容器BeanFactory & ApplicaitonContext概述\r\n依赖注入的方式：属性注入；构造器注入\r\n注入属性细节\r\n自动转配\r\nBean之间的关系：继承；依赖\r\nBean的作用域：singleton单例；prototype；WEB 环境作用域\r\n使用外部属性文件\r\nspEL表达式\r\nIOC容器中Bean的生命周期\r\nSpring4新特性：泛型依赖注入\r\n \r\n在Spring的IOC容器里配置Bean\r\n在XML文件中通过bean节点来配置bean\r\n<!--通过全类名来配置bean    -->\r\n<bean id=\"user\" class=\"cn.demo.spring.User\">\r\n    <constructor-arg name=\"name\" value=\"Spring\"></constructor-arg>\r\n</bean>\r\nid:bean的名称\r\n在ioc容器中必须是唯一的\r\n容id没有指定，spring自动将权限限定性类型作为bean的名字\r\nId可以指定多个名字，名字之间可以用逗号、分号、或者空格分隔\r\nSpring容器\r\n在Spring IOC容器读取bean配置创建bean实例之前，必须对它进行实例化，只有在容器实例化之后，才能从IOC容器里获取bean实例并使用。\r\nSpring提供了两种类型的IOC容器实现：\r\nBeanFactory：IOC容器的基本实现\r\nApplicationContext提供了更多的高级特性，是BeanFactory的子接口\r\nBeanFactory是Spring的基础设施，面向Spring本身；\r\nApplicationContext面向使用Spring框架的开发者，几乎所有的应用场合都直接使用ApplicationContext而非底层的BeanFactory\r\n无论何种方式配置文件是相同的\r\nApplicationContext\r\nApplicationContext的主要是实现类：\r\nClassPathXmlApplicationContext：从类路径加载配置文件\r\nFileSystemXmlApplicationContext：从文件系统中加载配置文件\r\nConfigurableApplictionContext扩展于ApplicationContext，新增两个主要方法：refresh()和close()，让ApplicationContext具有驱动刷新和关闭上下文的能力；\r\nApplicationContext在初始化上下文时就实例化所有的单例Bean。\r\nWebApplictionContext是专门为web应用而准备的，它允许从相当于web根目录的路径中完成初始化工作。\r\n \r\n依赖注入的方式\r\n属性注入\r\n构造器注入\r\n工厂方法注入（很少用，不推荐）\r\n属性注入\r\n通过setter方法注入bean的属性或依赖的对象\r\n属性注入使用<property>元素，使用name属性指定bean的属性名称，value属性或<value>子节点指定属性值\r\n属性注入是实际应用中最常用的注入方式\r\n构造方法注入\r\n通过构造方法注入bean的属性或依赖的对象，它保证了bean实例在实例化之后就能使用。\r\n构造器注入在<constructor-arg>元素里声明，它没有name属性。\r\n \r\n字面值\r\n字面值：可以用字符串表示的值，可以通过<value>元素标签或value属性进行注入。\r\n基本数据类型及其封装类、String等类型都可以采用字面值注入的方式。\r\n若字面值中包含特殊字符，可以使用<![CDATA[]]>把字面值包裹起来。\r\n \r\n \r\n引用其他bean\r\n组成引用程序的bean经常需要相互协作以完成应用程序的功能，要使bean能够相互访问，就必须在bean文职文件中指定对bean的引用。\r\n在bean的配置文件中可以通过<ref>元素或ref属性问bean的属性或构造器参数指定对bena的引用。\r\n也可以在属性或者构造器里包含bean的声明，这样的bean称为内部bean。\r\n \r\n内部bean\r\n当bean实例仅仅给一个特定的属性使用时，可以将其声明为内部bean，内部bean声明直接包含在<property>或<constructor-arg>元素里，不需要设置任何id或name属性。\r\n内部bean不能使用在其他地方。\r\n \r\n注入参数详解：null值和级联属性\r\n可以使用专用的<null/>元素标签为bean的字符串或其他对象类型的属性注入null值。\r\n和Struts、hibernate等框架一样，spring支持级联属性的配置。\r\n集合属性\r\n在Spring中可以通过一组内置的xml标签，例如<list> <set> <map> <array>等来配置集合属性。\r\n配置java.util.list类型的属性需要指定<list>标签，在标签里包含一些元素，这些标签可以通过<value>指向简单的常量值，也可以通过<ref>指向对其他bean的引用，通过<bean>指定内置bean的定义，通过<null/>指定空元素，甚至可以内嵌其他集合。\r\n数组的定义可以使用<array>，也可以和list一样使用<list>\r\n配置java.util.Set需要使用<set>标签，定义元素的方法与List一样\r\nJava.util.Map通过<map>标签定义，<map>标签可以使用多个<entry>作为子标签，每个条目包含一个键和一个值。\r\n必须在<key>标签里定义键\r\n因为键和值的类型没有限制，所以可以自由地位他们指定<value> <ref> <bean>或<null/>元素。\r\n可以将Map的键和值最为<entry>的属性定义，简单常量使用key和value来定义；bean引用通过key-ref和val-ref属性定义。\r\n使用<props>定义java.util.Properties，该标签使用多个<prop>座位子标签，每个子标签必须定义key属性。\r\n \r\n使用P命名空间\r\n为了简化XML文件的配置，越来越多的XML文件采用属性而非子元素配置信息\r\nSpring从2.5版本开始引入了一个新的p命名空间，可以通过<bean>元素属性的方式配置bean的属性。\r\n使用p命名空间后，基于XML的配置方式将进一步简化。\r\n \r\nXML配置里的bean自动装配\r\nSpring IOC容器可以自动装配bean，需要做的仅仅是在<bean>的autowire属性里指定自动装配的模式：byName byType\r\nbyType（根据类型自动装配）：若IOC容器中有多个与目标bean类型一致的bean，则在这种抢矿下，spring将无法判断bean哪个bean最适合该属性，所以不能执行自动装配。\r\nbyName（根据名称自动装配）：必须将目标bean的名称和属性设置的完全相同。\r\nConstructor（通过构造器自动装配）：当bean中存在多个构造器时，此种自动装配方式将会很复杂，不推荐使用。\r\n \r\nXML配置里的bean自动装配缺点\r\n在bean配置文件里设置autowire属性进行自动装配将会装配bean的所有属性，然而，如果希望装配个别属性时，autowire属性就不够灵活了。\r\nAutowire属性要么根据类型自动装配，要么根据名称自动装配，不能两者兼容。\r\n一般情况下，在实际项目中很少使用自动装配的功能，因为和自动装配功能所带来的好处相比起来，明确清晰的配置文档更有说服力一些。\r\n \r\n \r\n基于注解的方式配置bean\r\n组件扫面（component scanning）：Spring能够从classpath下自动扫描，侦测和实例化具有特定注解的组件。\r\n特定组件包括：\r\n         -@Component：基于注解，标识了一个受Spring管理的组件\r\n         -@Respository：标识持久层组件\r\n         -@Service：标识服务层（业务层）组件\r\n         -@Controller：标识表现层组件\r\n         对于扫描到的组件，Spring有默认的命名策略：使用非限定类名，第一个字母小写，也可以在注解中通过value书信值标识组件的名称。\r\n \r\n当在组件类上使用了特定的注解之后，还需要在Spring的配置文件中声明<context：component-scan>\r\n         -base-package属性指定一个需要扫描的基类包，Spring容器将会扫描这个基类包及其子包中的所有类。\r\n-但需要扫描多个包时，可以使用逗号分隔。\r\n-如果仅希望扫描特定的类而非基包下的所有类，可以使用resource-pattern属性过滤特定的类，示例：\r\n        <context:component-scan base-package=\"cn.demo.bean.annotation\" resource-pattern=\"service/*.*\"/>\r\n-<context:include-filter>子节点表示要包含的目标类\r\n-<context:exclude-filter>子节点表示要排除在外的目标类\r\n-<context:component-scan>下可以拥有若干个<context:include-filter>和<context:exclude-filter>子节点\r\n \r\n使用@Autowired自动装配bean\r\n@AutoWired注解自动装配具有兼容类型的单个bean属性\r\n         -构造器，普通字段（即使是非public），一切具有参数的方法都可以应用@Autowired注解。\r\n         -默认情况下，所有使用@Autowired注解的属性都需要被设置，当Spring找不到匹配的bean装配属性时，会抛出异常，若某一个属性允许不被设置，可以设置@Autowired注解的required属性为false；\r\n         -默认情况下，单IOC容器中存在多个类型兼容的bean时，通过类型的自动装配将无法工作，此时可以在@Quailfier已制定注入bean的名称。\r\n         -@Autowired注解也可以应用在数组类型的属性上，此时Spring将会吧所有匹配的bean进行自动装配。\r\n         -@Autowired注解可以应用在集合属性上，此时Spring读取该集合的类型信息，然后自动装配所有与之兼容的bean。\r\n         -@Autowired注解用在java.util.Map上时，若该Map的键值为String，那么Spring将自动装配与之Map值类型兼容的bean，此时bean的名称作为键。\r\n \r\nAOP简介\r\nAspectJ：Java社区你最完整最流行的AOP框架，在Spring2.0以上版本中，可以使用基于AspectJ注解或者基于XML配置的AOP\r\nAOP（Aspect-Object Programming，面向切面编程）：是一种新的方法论，是对传统的OOP（Object-Oriented Programming，面向对象编程）的补充。\r\nAOP的主要编程对象是切面（aspect），而切面模块化横切关注点。\r\n在应用AOP编程时，仍然需要定义公共功能，但可以明确的在定义这个功能在哪里，以什么方式应用，并且不必修改受影响的类，这样一来，横切关注点就被模块化到特殊的对象（切面）里。\r\nAOP的好处：\r\n每个事物逻辑位于一个位置，代码不分散，便于维护和升级\r\n业务模块更简洁，值包含核心业务代码\r\n用AspectJ注解声明切面\r\n要在Spring中声明AspectJ切面，只需要在IOC容器中将切声明为bean实例，当Spring IOC容器中初始化AspectJ切面之后，Spring IOC容器就会为哪些与AspectJ切面相匹配的bean创建代理。\r\n在AspectJ注解中，切面只有一个带有@AspectJ注解的Java类。\r\n通知是标注有某种注解的简单的java方法。\r\nAspectJ支持5种类型的通知注解：\r\n@Before：前置通知，在方法调用之前执行。\r\n@After：后置通知，在方法调用之后执行。\r\n@AfterRunning：返回通知，在方法返回结果之后调用\r\n@AfterThrowing：异常通知，在方法抛出异常之后执行\r\n@Around：环绕通知，围绕着方法执行\r\n \r\n利用方法签名编写AspectJ切入点表达式\r\n最典型的切入点表达式根据方法的签名来匹配各种方法：\r\n-execution * com.spring.demo.LoggingAspect.*(..):匹配LoggingAspect中声明的所有方法，第一个*代表任意修饰符以及任意返回值，第二个*表示任意方法，..匹配任意数量的参数。若目标类与接口与该切面在同一个保重，可以省略包名。\r\n-execution public * LoggingAspect.*(..):匹配LoggingAspect接口的所有公共方法\r\n-execution public int LoggingAspect*(..):匹配LoggingAspect接口中所有返回类型为int的方法\r\n-execution public int LoggingAspect.*(int ,..):匹配第一个参数为int类型的所有方法\r\n-execution public int LoggingAspect.*(int,double):匹配第一个参数类型为int，第二个为double的所有方法\r\n \r\n让通知访问当前连接点的细节\r\n可以在通知方法中声明一个类型为JoinPoint的参数，然后就能访问连接点的细节，例如方法名称和参数值等。\r\n@Before(\"execution(public int cn.demo.aop.impl.CalculatorImpl.*(int,int))\")\r\npublic void beforeMethod2(JoinPoint joinPoint){\r\n    String methodName = joinPoint.getSignature().getName();\r\n    List<Object> args = Arrays.asList(joinPoint.getArgs());\r\n    System.out.println(\"before method2 ......\");\r\n    System.out.println(\"the method \" + methodName + \" start with args \" + args);\r\n}\r\n \r\n基于XML的配置声明切面\r\n除了使用AspectJ注解方式声明切面以外，Spring也支持在Bean配置文件中声明切面的方式。这种声明通过aop schema中的特定元素标签来完成。\r\n正常情况下，基于注解的声明要优先于基于XML的声明，通过AspectJ注解，切面可以兼容AspectJ，而基于Xml的配置则是Spring专有的。由于AspectJ得到越来越多的AOP框架支持，所以注解风格编写的切面将会有更多的重用机会。\r\n以下为XML配置举例：\r\n\r\n\r\n\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<beansxmlns=\"http://www.springframework.org/schema/beans\"\r\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"xmlns:aop=\"http://www.springframework.org/schema/aop\"\r\nxsi:schemaLocation=\"http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/aophttp\r\n    ://www.springframework.org/schema/aop/spring-aop.xsd\">\r\n<!--配置bean-->\r\n<beanid=\"calculatorImpl\"class=\"cn.demo.aop.impl.xml.CalculatorImpl\"></bean>\r\n<!--配置切面bean-->\r\n<beanid=\"logginAspect\"class=\"cn.demo.aop.impl.xml.LogginAspect\"></bean>\r\n<beanid=\"validationAspect\"class=\"cn.demo.aop.impl.xml.ValidationAspect\"></bean>\r\n<!--配置AOP-->\r\n<aop:config>\r\n<!--配置切点表达式-->\r\n<aop:pointcutid=\"pointcut\"expression=\"execution(publicintcn.demo.aop.impl.xml.CalculatorImpl.*(int,int))\"></aop:pointcut>\r\n<!--配置切面及通知-->\r\n<!--1.配置验证通知-->\r\n<aop:aspectorder=\"1\"ref=\"validationAspect\">\r\n<aop:beforemethod=\"validateMethod\"pointcut-ref=\"pointcut\"></aop:before>\r\n</aop:aspect>\r\n<!--2.配置日志通知-->\r\n<aop:aspectorder=\"2\"ref=\"logginAspect\">\r\n<!--前置通知-->\r\n<aop:beforemethod=\"beforeMethod\"pointcut-ref=\"pointcut\"></aop:before>\r\n<!--后置通知-->\r\n<aop:aftermethod=\"afterMethod\"pointcut-ref=\"pointcut\"></aop:after>\r\n<!--返回通知-->\r\n<aop:after-returningmethod=\"AfterReturningMethod\"pointcut-ref=\"pointcut\"returning=\"result\"></aop:after-returning>\r\n<!--异常通知-->\r\n<aop:after-throwingmethod=\"afterThrowingMethod\"pointcut-ref=\"pointcut\"throwing=\"ex\"></aop:after-throwing>\r\n<!--环绕通知-->\r\n<aop:aroundmethod=\"aroundMethod\"pointcut-ref=\"pointcut\"></aop:around>\r\n</aop:aspect>\r\n</aop:config>\r\n</beans>\r\n \r\n ','',5,NULL,2,'yc','2019-03-09',NULL,NULL,'Spring是一个开源框架\r\nSpring为简化企开发而生，使用spring可以简化javabean的实现和管理\r\nSpring是一个IOC控制反转/DI依赖注入和AOP容器框架\r\n ',NULL,NULL,NULL,NULL,NULL),(15,'老干部','','','IDEA下创建基于Spring的Hello World','images/8.jpg','前言：使用eclipse的同学对eclipse中的工作空间（workspace）比较熟悉，但是在idea中没有workspace的概念，idea中首先需要创建project，此处的project相当于eclipse中的workspace，在project下可以创建Module，Module相当于eclipse中的project工程。理解了这个概念，请项下继续看！\r\n\r\n创建一个maven简单quickstart工程，以便于组织依赖包导入。\r\n右键project -> New ->Module -> Maven 勾选Create from archetype\r\n选择maven-atchetype-quickstart\r\n\r\n填写maven工程相关参数名称\r\n\r\n \r\n这里选择的是与maven相关的配置，maven必须提前已经安装配置完成并且整合到idea中，具体安装maven步骤请参考（Apache Maven 3.6.0安装配置）。\r\n添加spring需要的最小单元依赖jar包到pom.xml文件中，以下为最小依赖单元：\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\nspring-core\r\nspring-context\r\nspring-beans\r\ncommons-logging\r\n \r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n<dependency>\r\n<groupId>org.springframework</groupId>\r\n<artifactId>spring-core</artifactId>\r\n<version>4.3.17.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n<groupId>org.springframework</groupId>\r\n<artifactId>spring-context</artifactId>\r\n<version>4.3.17.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n<groupId>org.springframework</groupId>\r\n<artifactId>spring-beans</artifactId>\r\n<version>4.3.17.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n<groupId>commons-logging</groupId>\r\n<artifactId>commons-logging</artifactId>\r\n<version>1.2</version>\r\n</dependency>\r\n 创建文件夹目录：resource，并转换为资源文件夹根目录；\r\n\r\n\r\n创建User类\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\npackagecn.demo.spring;\r\npublicclassUser{\r\npublicStringgetName(){\r\nreturnname;\r\n}\r\npublicvoidsetName(Stringname){\r\nthis.name=name;\r\n}\r\nprivateStringname;\r\npublicUser(Stringname){\r\nthis.name=name;\r\n}\r\n@Override\r\npublicStringtoString(){\r\nreturn\"Hello\"+this.name;\r\n}\r\n}\r\n创建Spring配置文件spring.xml，内容如下：\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<beansxmlns=\"http://www.springframework.org/schema/beans\"\r\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\nxsi:schemaLocation=\"http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n<beanid=\"user\"class=\"cn.demo.spring.User\">\r\n<constructor-argname=\"name\"value=\"Spring\"/>\r\n</bean>\r\n</beans>\r\n创建测试类Main\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\npackagecn.demo.spring;\r\nimportorg.springframework.context.ApplicationContext;\r\nimportorg.springframework.context.support.ClassPathXmlApplicationContext;\r\npublicclassMain{\r\npublicstaticvoidmain(String[]args){\r\nApplicationContextctx=newClassPathXmlApplicationContext(\"spring.xml\");\r\nUseru=(User)ctx.getBean(\"user\");\r\nSystem.out.println(u);\r\n}\r\n}\r\n启动测试类，得到如下结果：\r\n\r\n工程结构如下：\r\n\r\n至此，基于Spring的Hello World已经创建完成。','',5,NULL,2,'yc','2019-03-09',NULL,NULL,'前言：使用eclipse的同学对eclipse中的工作空间（workspace）比较熟悉，但是在idea中没有workspace的概念，idea中首先需要创建project，此处的project相当于eclipse中的workspace，在project下可以创建Module，Module相当于eclipse中的project工程。理解了这个概念，请项下继续看！',NULL,NULL,NULL,NULL,NULL),(16,'老干部','','','常用数据库连接语句','images/1.jpg','MySQL:\r\nDriver:com.mysql.jdbc.Driver\r\nURL:jdbc:mysql://localhost:3306/db_name\r\nClass.forName(Driver);\r\nConnection con = DriverManager.getConnection(URL,Username,Password);\r\n \r\nMicrosoft SQL Server\r\nDriver:com.microsoft.jdbc.sqlserver.SQLServerDriver\r\nURL:jdbc:microsoft:sqlserver://localhost:1433;DatabaseName=db_name\r\n \r\n \r\nSysBase:\r\nDriver:com.sybase.jdbc.SybDriver\r\nURL:jdbc:Sysbase://localhost:5007/db_name\r\n \r\n \r\nOracle:\r\nDriver:oracle.jdbc.driver.OracleDriver\r\nURL:jdbc:oracle:thin@localhost:1521:orcl\r\n \r\nDB2:\r\nDriver:com.ibm.db2.jdbc.app.DB2.Driver  (这是连接具有DB2客户端的Provider)\r\nDriver:com.ibm.db2.jdbc.net.DB2.Driver  (这是连接不具有DB2客户端的Provider)\r\nURL:jdbc:db2://localhost:5000/db_name\r\n ','',5,NULL,5,'yc','2019-03-09',NULL,NULL,'MySQL:\r\nDriver:com.mysql.jdbc.Driver\r\nURL:jdbc:mysql://localhost:3306/db_name\r\nClass.forName(Driver);\r\nConnection con = DriverManager.getConnection(URL,Username,Password);\r\n',NULL,NULL,NULL,NULL,NULL),(17,'老干部','','','恢复回收站删除的文件','images/3.jpg','回收站删除了怎么恢复\r\n步骤/方法\r\n \r\n在cmd中运行“regedit”\r\n\r\n进入注册表，找到“HKEY_LOCAL_MACHINE”，请依据下图指示，点击红色框内，箭头所示的文件夹前的三角按钮\r\n\r\n在展开的文件夹中，找到“SOFTWARE”点击红色框内，箭头所示的文件夹前的三角按钮\r\n\r\n在展开的文件夹中，找到“Microsoft”点击红色框内，箭头所示的文件夹前的三角按钮\r\n\r\n展开的文件夹中，找到“Windows”点击红色框内，箭头所示的文件夹前的三角按钮\r\n\r\n在展开的文件夹中，找到“CurrentVersion”点击红色框内，箭头所示的文件夹前的三角按钮\r\n\r\n在展开的文件夹中，找到“Explorer”点击红色框内，箭头所示的文件夹前的三角按钮\r\n\r\n在展开的文件夹中，找到“DeskTop”点击红色框内，箭头所示的文件夹前的三角按钮\r\n点击红色框内的“NameSpace”文件夹，右边出现“默认”等\r\n\r\n在右边空白区域，点击右键，新建“项”\r\n\r\n点击新建项后，出现如下界面，将新出现的项的名字（红色框框内显示）重命名为“{645FFO40-5081-101B-9F08-00AA002F954E}”------------请注意，要把大括号也带入\r\n\r\n点击新建的项，右边会出现默认等显示，右键点击“默认”二字，点击修改，出现如下界面\r\n \r\n点击修改后，出现如下界面，请在数值名称一项中，将“{默认}”修改为“{回收站}”点击确定\r\n \r\n重新启动电脑即可！','#操作系统#',5,NULL,4,'zz','2019-03-09',NULL,NULL,'回收站删除了怎么恢复步骤/方法\r\n在cmd中运行“regedit”\r\n进入注册表，找到“HKEY_LOCAL_MACHINE”，请依据下图指示，点击红色框内，箭头所示的文件夹前的三角按钮',NULL,NULL,NULL,NULL,NULL),(18,'老干部','','','Windows7下配置java环境变量','images/1.jpg','windows下java环境变量配置方法\r\n\r\n   windows7下java环境变量配置方法：\r\n   1.用鼠标右击“我的电脑”->属性   \r\n\r\n   选择左边导航的“高级系统设置”选项，然后这回熟悉了吧？\r\n\r\n   继续选择右下角的“环境变量”选项\r\n\r\n   2.进行win7下Java环境变量配置\r\n   \r\n   在\"系统变量\"下进行如下配置：\r\n  (1)新建->变量名：JAVA_HOME 变量值：D:/Java/jdk1.6.0_12(这只是我的JDK安装路径)\r\n  (2)编辑->变量名：Path 在变量值的最前面加上：%JAVA_HOME%/bin;%JAVA_HOME%/jre/bin\r\n  (3)新建->变量名：CLASSPATH 变量值：.;%JAVA_HOME%/lib;%JAVA_HOME%/lib/dt.jar;%JAVA_HOME%/lib/tools.jar\r\n   注意：当设置的变量在末尾时，不要加上“；”。\r\n\r\n  3.测试下环境变量是否设置成功\r\n    在左下角的搜索框中键入\r\n    cmd\r\n    或者按下“WIN+R”键,“WIN”键就是\"CTRL\"和“ALT””中间那个微软图标那个键；\r\n   分别输入java，javac，java -version 命令\r\n   如果出现如下信息：\r\n\r\n   \r\n   4.你的Java环境变量配置成功！\r\n   注意:\r\n   若出现\r\n   \'javac\' 不是内部或外部命令，也不是可运行的程序\r\n   或批处理文件。\r\n   说明此次Java环境变量配置出错了，仔细检查下吧！','#windows#',3,NULL,5,'yc','2019-03-09',NULL,NULL,'windows7下java环境变量配置方法：\r\n   1.用鼠标右击“我的电脑”->属性   \r\n   选择左边导航的“高级系统设置”选项，然后这回熟悉了吧？\r\n   继续选择右下角的“环境变量”选项\r\n   2.进行win7下Java环境变量配置\r\n   在\"系统变量\"下进行如下配置：\r\n  (1)新建->变量名：JAVA_HOME 变量值：D:/Java/jdk1.6.0_12(这只是我的JDK安装路径)\r\n  (2)编辑->变量名：Path 在变量值的最前面加上：%JAVA_HOME%/bin;%JAVA_HOME%/jre/bin\r\n  (3)新建->变量名：CLASSPATH 变量值：.;%JAVA_HOME%/lib;%JAVA_HOME%/lib/dt.jar;%JAVA_HOME%/lib/tools.jar\r\n   注意：当设置的变量在末尾时，不要加上“；”。',NULL,NULL,NULL,NULL,NULL),(19,'老干部','','','IDEA下创建git项目','images/5.jpg','在IDEA中已经为我们集成了git相关的插件，我们只需要配置相应的内容即可使用Git提供给我们的功能。在这之前需要我们电脑中已经安装并配置了Git，具体安装配置请参见《Git安装和使用》。\r\n1.IDEA配置Git\r\n配置git\r\n选择git命令所在路径，点击Test，出现如下界面。\r\n\r\n添加GitHub账户\r\n\r\n\r\n2.在服务器中创建git项目仓库\r\n\r\n3在idea中新建project\r\n \r\n \r\n\r\n此时我们可以看到文件夹下多了一个.git文件夹，说明git项目已经创建完成。\r\n\r\n4.创建Module工程\r\n我们在idea下新建一个JAVA工程demoGit\r\n\r\n国际惯例，添加HelloWorld程序进行测试。\r\n项目结构如下图：\r\n\r\n5.将新建的module工程转换为git项目\r\n进入D:\\01_Work\\demoProject目录，打开Git Bash，执行git init\r\ngit remote add origin git@github.com:*********/demoProject.git\r\n\r\n此时我们可以看到文件夹下多了一个.git文件夹，说明git项目已经创建完成。\r\n\r\n \r\n6.提交到服务器\r\n现在我们需要将helloGit项目提交到github下。\r\n右键helloGit项目 -> 选择Git ->Commit Directory\r\n添加提交注释，Commit and Push\r\n\r\n再次登录github查看\r\n\r\n新建的工程已经被提交，操作完成。\r\n ','#idea#/#Git#',2,NULL,3,'yc','2019-03-09',NULL,NULL,'在IDEA中已经为我们集成了git相关的插件，我们只需要配置相应的内容即可使用Git提供给我们的功能。在这之前需要我们电脑中已经安装并配置了Git，具体安装配置请参见《Git安装和使用》。',NULL,NULL,NULL,NULL,NULL),(20,'老干部','','','Apache Maven 3.6.0安装配置','images/1.jpg','第一步：下载maven安装包\r\n下载地址：http://maven.apache.org/download.cgi  注意下载bin文件 src为源码\r\n\r\n \r\n第二步：解压下载文件\r\n将下载的压缩包解压，例如：D:\\Program Files\\apache-maven-3.6.0\r\n\r\n第三步：配置maven环境变量\r\n新建环境变量MAVEN_HOME 并添加路径值D:\\Program Files\\apache-maven-3.6.0\r\n\r\n编辑环境变量Path，添加%MAVEN_HOME%\\bin\\\r\n\r\n进入cmd 输入mvn -v查看maven是否正确安装\r\n\r\n \r\n配置Maven本地仓库\r\n打开文件D:\\Program Files\\apache-maven-3.6.0\\conf\\setting.xml\r\n找到如下代码：<localRepository>/path/to/local/repo</localRepository>\r\n我们可以看到，此段代码已经被注释了，需要取消注释，同时将值修改为本地路径，我这里选择D:\\Program Files\\apache-maven-3.6.0\\repo为本地maven仓库路径。\r\n（配置本地仓库的目的是为了能够更加快速的查找我们在程序开发的过程中需要用到的依赖包，如果本地仓库存在，则直接从仓库中获取，如果不存在，则会去远程仓库下载并保存到本地仓库）\r\n修改前\r\n\r\n修改后\r\n\r\n \r\n配置阿里云镜像仓库\r\n在settings.xml文件中的mirrors下添加mirror标签\r\n<mirror>\r\n<id>alimaven</id>\r\n<name>aliyun maven</name>\r\n<url>http://maven.aliyun.com/nexus/content/groups/public/</url>\r\n<mirrorOf>central</mirrorOf>\r\n</mirror>\r\n\r\n验证之前配置是否生效，命令窗口输入：mvn help:system\r\n \r\n可以发现，maven已经从阿里云镜像中下载了部分相关文件到本地配置路径下\r\n\r\n至此，Maven的安装和配置都已经完成，','',2,NULL,2,'yc','2019-03-09',NULL,NULL,'第一步：下载maven安装包下载地址：http://maven.apache.org/download.cgi  注意下载bin文件 src为源码',NULL,NULL,NULL,NULL,NULL),(21,'老干部','','','Git安装和使用','images/7.jpg','Git安装和使用\r\n \r\n1.Git（分布式版本管理）简述\r\n我们在项目开发的过程中通常是团队协作完成的，在这个过程中，我们会用到版本控制管理工具，例如：SVN Git CVS等。\r\nSVN托管网站需要我们拥有一个（版本库）中央仓库，并且需要每一个工作站与中央仓库网络互通才能进行访问。而Git中没有一个中央仓库的概念，每一个工作站拥有一个本地版本库(分支)，用户将修改后的代码存放到本地版本库中，开发过程中不需要依赖网络环境，只是在最终合并的时候将工作站中的所有版本库进行推送合并到服务器版本库（master）。\r\n2.Git工作原理：\r\n本地工作目录提交到暂存区，当代码达到一定量后最终提交到服务器版本库。\r\n本地工作目录 -> 暂存区：git add\r\n暂存区 -> 版本库：git commit\r\n本地计算机工作目录 推送到 其他计算机工作目录：git push\r\n其他计算机工作目录 拉取到 本地计算机工作目录：git pull\r\n \r\n3.Git的安装\r\n下载地址：msysgit.github.io 会根据自己当前用户的操作系统类型重定向到相应的下载页面\r\n\r\n\r\n下载完成后打开，选择默认配置进行安装。\r\n安装完成后进入cmd下确认输入：git --version 查看是否已经将git添加到环境变量中（2.19默认自动将git添加到环境变量中），如果没有添加，则需要在path中添加git命令执行路径，例如：D:\\Program Files\\Git\\cmd\r\n\r\n \r\n4.Git的本地配置\r\n打开git bash，配置用户名和邮箱,用户名和邮箱相当于SVN中的用户名密码，是区分用户的唯一标识符，输入如下命令：\r\ngit config --global user.name \"example\"\r\ngit config --global user.email \'example@163.com\'\r\n添加完成后可以使用：git config --list 来查看配置是否生效，也可以在本地用户目录下查看.gitconfig文件中的内容与配置是否一致。\r\n\r\n5.配置远程仓库\r\n登录https://github.com，新建仓库\r\n\r\n添加仓库名称：demo 添加描述：初始化demo版本\r\n\r\n对应的https地址：https://github.com/hairuizone/demo.git\r\n对应的ssh地址：git@github.com:hairuizone/demo.git\r\n此时远程仓库已经配置完成。\r\n6.配置本地免密登录服务器仓库\r\n目的：本地计算机与远程服务器之间进行通信关联\r\n本地打开git bash，输入：ssh-keygen -t rsa -C example@163.com\r\n将密钥创建到本地用户目录下\r\n\r\n将本地公钥添加到服务器：\r\n    使用记事本打开id_rsa.pub，并将内容拷贝。\r\n    打开github服务器，选择Settings，并选择如图操作创建新的SSH key\r\n\r\nTitle：任意名称\r\nKey：将刚才拷贝的密钥粘贴进来，并将最后的回车删除\r\n\r\n此时，已经将本地的ssh公钥添加到服务器端，可以使用如下命令验证免密钥登录是否成功：\r\nssh -T git@github.com 提示输入：yes 出现如下界面说明免密登录已经配置完成。同时本地用户目录文件下可以看到一个known_hosts的文件。\r\n\r\n \r\n7.创建Git案例项目\r\n    在本地创建git项目\r\nD盘新建文件夹：gitdemo\r\n在此文件夹下创建文件helloGit.txt \r\nhelloGit.txt内容如下：hello this is git\r\n    在项目根目录（gitdemo文件夹内）右键 Git Bash Here\r\n    输入git init，完成后可以看到当前目录下出现了.git文件夹 则说明git本地项目创建成功。\r\n    \r\n    \r\n8.本地项目与远程资源库进行关联\r\ngit remote add origin https://github.com/hairuizone/demo.git\r\n或者使用ssh唯一标识符进行关联\r\ngit remote add origin git@github.com:hairuizone/demo.git\r\n\r\n \r\n9.Git常见命令的使用\r\n第一次发布项目\r\n将本地项目发布到服务器\r\n将本地项目提交到暂存区：git add .\r\n暂存区推到本地分支：git commit -m \"注释内容\"\r\n第一次将本地分支提交到远程仓库：git push -u origin master\r\n\r\n登录服务器查看查看刚才提交的内容如下：\r\n\r\n第一次下载项目\r\n    远程下载到本地：git clone https://github.com/hairuizone/demo.git\r\n \r\n提交项目\r\n    我们将hellGit.txt中的文件进行修改：hello this is git 1234，然后进行提交。\r\ngit add .\r\ngit commit -m \"注释\"\r\ngit push origin master\r\n\r\n\r\n \r\n更新项目\r\n远程更新到本地\r\ngit pull\r\n ','',2,NULL,3,'yc','2019-03-09',NULL,NULL,'我们在项目开发的过程中通常是团队协作完成的，在这个过程中，我们会用到版本控制管理工具，例如：SVN Git CVS等。\r\nSVN托管网站需要我们拥有一个（版本库）中央仓库，并且需要每一个工作站与中央仓库网络互通才能进行访问。而Git中没有一个中央仓库的概念，每一个工作站拥有一个本地版本库(分支)，用户将修改后的代码存放到本地版本库中，开发过程中不需要依赖网络环境，只是在最终合并的时候将工作站中的所有版本库进行推送合并到服务器版本库（master）。',NULL,NULL,NULL,NULL,NULL),(22,'老干部','','','DB2常见命令','images/5.jpg','DAS服务启动：db2admin start\r\nDB2启动命令：db2start\r\nDB2停止命令：db2stop / db2stop force\r\n停止所有连接：db2 force application all\r\n连接到指定数据库：db2 connect to dbname user username using password\r\n \r\nBD2数据库导出orcl库中的所有表结构\r\ndb2look -d orcl -e -a -l -o /home/cmis/orcl.ddl\r\n导出指定用户的表结构\r\ndb2look -d orcl -z user1-e -o aa.sql\r\n \r\nDB2数据库导入表结构\r\ndb2 -tvf /home/cmis/orcl.ddl\r\n \r\n导出orcl下的所有数据\r\ndb2move orcl export -sn *\r\n \r\n导出orcl数据库下指定schema下的数据\r\ndb2move orcl export -sn schemaname\r\n \r\n使用db2move导入数据（替换原数据）\r\ndb2move orcl load -lo replace\r\n\r\n更新某张表的某个字段（扩容）\r\nalter table tablename alter columnname set data type CLOB(2048);\r\nalter table tablename alter columnname set data type VARCHAR(20);\r\n \r\n导出某一张表\r\ndb2 export to a.del of del select * from schema.tablename\r\n插入某张表数据\r\ndb2 import from a.del of del insert into schema.tablename\r\n替换某张表数据\r\ndb2 import from a.del of del replace into schema.tablename\r\n \r\n数据库清理日志\r\ndb2 list history archive log all for orcl\r\ndb2 prune history 20161118091620（最新的时间戳）\r\ndb2 list history backup all for orcl\r\ndb2 prune history 20161116160313 with force option and delete\r\ndb2 backup db orck online to /dev/null\r\n \r\n赋予某个用户操作数据库权限\r\ndb2 \"grant dbadm,createtab,bindadd,connect,create_not_fenced_routine,implicit_schema,load,create_external_routine,quiesce_connect,secadm on database  to user usename\"\r\n \r\n \r\n \r\n \r\nselect INDSCHEMA,indname from syscat.indexes where tabname=\'CUSTINFO\'\r\ndb2expln -d testdb -u easycore easycore -t -g -q \"SELECT USERPK,DEPTPK FROM easymis.s_userduty WHERE 9=9 and USERPK=\'admin\'\"\r\nDB2中的转意符为 \'\r\nUser exit for logging enabled (USEREXIT) = OFF\r\n如果等于ON则, 日志慢了, 要备份, 且会引发 table space 无法访问的问题\r\ndb2 list tables for schema easymis\r\n\r\ndb2 \"import from xxx.txt of del modified by coldel| insert into szjxx\"\r\n这个命令可以在DB2V8下load |分隔的文本。\r\n\r\ndb2 connect to easydb user easymis using easymis\r\ndb2 \"import from easymis.xxx.ixf of ixf insert into xxx\"\r\ncreate table student \r\n( \r\nno integer, \r\nname varchar(30), \r\nage integer, \r\nsex integer, \r\ncountry varchar(20), \r\ncity char(10) \r\n); \r\ncreate unique index ix_stu on student (no asc) include(name);\r\n\r\n测试管理系统SQL性能的过程中发现, 有些大的数据表在过渡完后,没有执行runstats on table ..., 这导致在大表关联查询或者其它复杂查询时性能差异极大,例如:\r\nSELECT A.CUSTNO,CUSTNAME,CERTTYPE,CERTNO,CUSTMGR,CUSTTERM,SEX,BIRTHDAY,CARDORGAN,ORGANDISTNO,MOBILETEL,OFFICETEL,HOMETEL,HOSTHOLDADDR,HOMEADDRESS,UNIT,MANAGEUNTNAME,UNTADDR,MANAGEUNTADDR,KHSFLB FROM EASYPUB.PRICUSTINF A,EASYPUB.CUSTINFO B WHERE (A.CUSTNO = B.CUSTNO ) AND ( CUSTNAME = ? )\r\nrunstats: 0.09秒\r\n未runstats: 1m20s\r\n注意在数据过渡后,对大表都加上runstats处理,加在数据过渡的脚本上\r\n \r\ndb2相关端口\r\n449\r\n8471\r\n8476\r\n#查看本instance下有哪些database \r\ndb2 LIST DATABASE DIRECTORY [ on /home/db2inst1 ] \r\n#启动数据库 \r\ndb2start\r\n#停止数据库\r\ndb2stop\r\n#连接数据库\r\ndb2 connect to database_name user db2 using pwd \r\n#中断数据库连接 \r\ndb2 disconnect database_name\r\n#查看及更改数据库实例的配置 \r\ndb2 get dbm cfg \r\ndb2 update dbm cfg for database_name using 参数名 参数\r\n4.10.1 打开对锁定情况的监控。 \r\ndb2 update dbm cfg using dft_mon_lock on \r\n4.10.2 更改诊断错误捕捉级别 \r\ndb2 update dbm cfg using diaglevel 3 \r\n0 为不记录信息 \r\n1 为仅记录错误 \r\n2 记录服务和非服务错误 \r\n缺省是3，记录db2的错误和警告 \r\n4 是记录全部信息，包括成功执行的信息 \r\n一般情况下，请不要用4，会造成db2的运行速度非常慢。 \r\n#查看数据库的配制\r\ndb2 get db cfg for database_name \r\n#写数据库管理程序配置\r\ndb2 update db cfg for database_name using 参数名 参数?\r\n4.9.1 改排序堆的大小 \r\ndb2 update db cfg for head using SORTHEAP 2048 \r\n将排序堆的大小改为2048个页面，查询比较多的应用最好将该值设置比较大一些。 \r\n4.9.2 改事物日志的大小 \r\ndb2 update db cfg for head using logfilsiz 40000 \r\n该项内容的大小要和数据库的事物处理相适应，如果事物比较大，应该要将该值改大一点。否则很容易处理日志文件满的错误。 \r\n4.9.3 出现程序堆内存不足时修改程序堆内存大小 \r\ndb2 update db cfg for head using applheapsz 40000 \r\n该值不能太小,否则会没有足够的内存来运行应用程序。\r\n#关闭所有应用连接\r\ndb2 force application all\r\n#查看应用连接\r\ndb2 list application for db database_name show detail\r\n授权标识 | 应用程序名 | 应用程序句柄 | 应用程序标识 | 序号# | 代理程序 | 协调程序 | 状态 | 状态更改时间 | DB 名 |DB 路径| | 节点号 | pid／线程\r\n其中：1、应用程序标识的第一部分是应用程序的IP地址，不过是已16进制表示的。 \r\n2、pid/线程即是在unix下看到的线程号。 \r\n停止应用程序： \r\ndb2 \"force application(236)\" \r\ndb2 \"force application all\"\r\n该236是查看中的应用程序句柄\r\n#整理表\r\ndb2 reorg table table_name \r\ndb2 runstats on table table_name with distribution and indexes all \r\n#导出表\r\ndb2 export to table_name.txt of del select * from table_name \r\ndb2 export to table_name.ixf of ixf select * from table_name \r\n#导入数据,自增字段不出现在txt里,insert values时自增字段用default\r\ndb2 import from table_name.txt of del insert into table_name\r\ndb2 \"insert into test.test values(\'姓名\',28,default)\"\r\n#执行一个批处理文件\r\ndb2 -tf 批处理文件名(命令结束;\\n)\r\ndb2 -f 批处理文件名(命令结束\\n)\r\n#从系统表中取所有表名\r\ndb2 \"select tabname,tabschema,type from syscat.tables\"\r\n#生成所有建库语句\r\ndb2look -d easydb -e -o ddd2.txt\r\ndb2look -d easydb -u ht -e -p\r\ndb2look -d easydb -u ht -w -asd -a -e\r\n#赋予user表权限\r\ndb2 \"grant all on table_name to user_name\"\r\ndb2 \"grant select/insert/update on table_name to user_name\"\r\ndb2 \"grant select on table_name to public\"\r\n#回收表权限\r\ndb2 \"revoke all on table_name from user user_name\"\r\ndb2 \"revoke select/insert/update on table_name from user user_name\"\r\ndb2 \"revoke all on table_name from public\"\r\n#取前3条记录\r\nselect * from table_name fetch first 3 rows only\r\n#显示当前用户所有表 \r\ndb2 list tables\r\n#显示所有系统表\r\ndb2 list tables for system \r\n#显示所有表\r\ndb2 list tables for all \r\n#显示指定模式所有表\r\ndb2 list tables for schema SCHEMA_NAME\r\n#确定表空间的状态\r\ndb2 list tablespaces show detail\r\n#显示当前活动数据库 ??\r\n#显示当前表结构\r\ndb2 \"describe select * from table_name\"\r\ndb2 \"describe table test.test\"\r\n#查看索引\r\ndb2 \"describe indexes for table test.test show detail\"\r\n#在db2中如何知道表的锁情况\r\n#在你执行你的存储过程之前，执行命令打开锁的监视开光\r\ndb2 update monitor switches using lock on\r\n#然后执行你的存储过程，在执行存储过程期间的时候使用命令\r\ndb2 get snapshot for locks on database_name\r\n#查看数据库表的死锁\r\n再用命令中心查询数据时要注意,如果用了交互式查询数据,命令中心将会给所查的记录加了s锁.这时如果要update记录,由于update要使用x锁,排它锁,将会处于锁等待.\r\n首先,将监视开关打开 \r\ndb2 update dbm cfg using dft_mon_lock on \r\n快照 \r\ndb2 get snapshot for Locks on cleardb >snap.log \r\ntables \r\nbufferpools \r\ntablespaces \r\ndatabase \r\n然后再看snap.log中的内容即可。 \r\n对Lock可根据Application handle（应用程序句柄）看每个应用程序的锁的情况。 \r\n监视完毕后，不要忘了将监视器关闭 \r\ndb2 update dbm cfg using dft_mon_lock off\r\n#可以看正在运行的程序有没有处于锁等待状态的\r\nlist applications for db database_name show detail\r\n#DB2的log sqllib/db2dump/db2diag.log\r\n#查看版本\r\ndb2level\r\ndb2 \"select * from sysibm.sysversions\"\r\n#设置当前schema\r\nSET SCHEMA=SCHEMA_NAME\r\n#查看能在配置文件注册表中设置的所有变量的列表\r\ndb2set -lr\r\n#修改注册项的值\r\n设定当前实例的一个参数\r\nDB2SET PARAMETER=VALUE\r\n设定一个全局级的参数\r\nDB2SET PARAMETER=VALUE -g (小写)\r\n#在DB2 CLP中执行操作系统命令\r\ndb2 => !command\r\n#如何获得DB2的命令的语法相关信息\r\nDB2 ? 显示所有DB2命令 \r\nDB2 ? COMMAND 显示命令信息\r\nDB2 ? SQLnnnn 显示这个SQLCODE的解释信息\r\nDB2 ? DB2nnnn 显示这个DB2错误的解释信息\r\n#如何查看当前CLP的设置\r\ndb2 LIST COMMAND OPTIONS\r\n#如何更新当前CLP会话的特定项设置\r\nDB2 UPDATE COMMAND OPTIONS USING OPTIONS ...\r\n#如何查看系统数据库目录\r\ndb2 LIST DB DIRECTORY\r\n#表空间\r\ndb2 list tablespaces\r\n#表容器空间\r\nLIST TABLESPACE CONTAINERS FOR 1\r\n#如何知道一个用户有多少表\r\nSELECT * FROM SYSIBM.SYSTABLES WHERE CREATOR=\'USER\'\r\n#如何知道用户下的函数\r\ndb2 \"select NAME from sysibm.SYSFUNCTIONS\"\r\n#如何知道用户下的VIEW数\r\ndb2 \"select NAME from sysibm.sysviews WHERE CREATOR=\'USER\'\"\r\n#如何知道用户下的TRIGGER数\r\nselect * from sysibm.SYSTRIGGERS WHERE SCHEMA=\'USER\'\r\n#如何知道TABLESPACE的状况\r\nselect * from sysibm.SYSTABLESPACES\r\n#如何知道SCHEMA的状况\r\ndb2 \"select NAME from sysibm.SYSSCHEMATA\"\r\n#如何知道INDEX的状况\r\nselect * from sysibm.SYSINDEXES\r\n#如何知道表的字段的状况\r\nselect * from sysibm.SYSCOLUMNS WHERE TBNAME=\'TABLE_NAME\'\r\n#如何知道DB2的数据类型\r\nselect * from sysibm.SYSDATATYPES\r\n#如何知道BUFFERPOOLS状况\r\nselect * from sysibm.SYSBUFFERPOOLS\r\n#DB2表的字段的修改限制\r\nalter table只能修改VARCHAR类型的并且只能增加不能减少\r\nalter table yhdab ALTER kh SET DATA TYPE varchar(13)\r\n#一次给一个表增加多个字段 \r\ndb2 \"alter table table_name add column t1 char(1) add column t2 char(2) add column t3 int\" \r\n#如何快速清除一个大表\r\nALTER TABLE TABLE_NAME ACTIVE NOT LOGGED INITALLY WITH EMPTY TABLE\r\n#如何查看数据库的包\r\ndb2 \"select * from sysCAT.PACKAGES\"\r\n#如何查看数据库的存储过程\r\nSELECT * FROM SYSCAT.PROCEDURES\r\nSELECT SUBSTR(PROCSCHEMA,1,15),SUBSTR(PROCNAME,1,15) FROM SYSCAT.PROCEDURES\r\n#如何查看表的约束\r\nSELECT * FROM SYSCAT.CHECKS WHERE TABNAME=\'TABLE_NAME\'\r\n#如何查看表的引用完整约束\r\nSELECT * FROM SYSCAT.REFERENCES WHERE TABNAME=\'TABLE_NAME\'\r\n#别名的使用\r\ndb2 \"create alias test.column for syscat.columns\"\r\ndb2 \"drop alias test.column\"\r\n#复制表结构建表\r\ncreate table new_table as (select * from old_table) definition only; \r\n#插入数据\r\ninsert into new_table select * from old_table; \r\n#建立VIEW\r\ndb2 \"create view test.v_test as select name from test.test\"\r\n#查看view,VIEWNAME要大写\r\ndb2 \"select viewname from syscat.views where viewname=\'V_TEST\'\"\r\n#建立唯一索引\r\ndb2 \"create unique index test.ix_test on test.test(name)\"\r\n#查看索引\r\ndb2 \"select indname from syscat.indexes\"\r\n#SUBSTR\r\ndb2 \"select substr(name,1,2) from test.test\"\r\n#数据类型转换,name为CHARACTER\r\ndb2 \"select cast(name as integer)+12 from test.test\"\r\n#LOCK\r\nlock table test in exclusive mode\r\nlock table test in share mode\r\n#用户权限\r\ndb2 GET AUTHORIZATIONS\r\n#模式特权\r\nGRANT CREATEIN ON SCHEMA SCHEMA-name TO USER USER_NAME\r\nGRANT ALTERIN ON SCHEMA SCHEMA-name TO USER USER_NAME\r\nGRANT DROPIN ON SCHEMA SCHEMA-name TO USER USER_NAME\r\nrevoke CREATEIN ON SCHEMA SCHEMA-name TO USER USER_NAME\r\nrevoke ALTERIN ON SCHEMA SCHEMA-name TO USER USER_NAME\r\nrevoke DROPIN ON SCHEMA SCHEMA-name TO USER USER_NAME\r\n#数据库特权 \r\ndb2 \"grant connect,createtab,dbadm on database to user user_name\"\r\ndb2 \"revoke connect,createtab,dbadm on database from user user_name\"\r\n#索引特权\r\ndb2 \"grant control on index test.ix_test to user_name\"\r\n#检索具有特权的所有授权名\r\n　　SELECT DISTINCT GRANTEE, GRANTEETYPE, \'DATABASE\' FROM SYSCAT.DBAUTH \r\n　　UNION \r\n　　SELECT DISTINCT GRANTEE, GRANTEETYPE, \'TABLE \' FROM SYSCAT.TABAUTH \r\n　　UNION \r\n　　SELECT DISTINCT GRANTEE, GRANTEETYPE, \'PACKAGE \' FROM SYSCAT.PACKAGEAUTH \r\n　　UNION \r\n　　SELECT DISTINCT GRANTEE, GRANTEETYPE, \'INDEX \' FROM SYSCAT.INDEXAUTH \r\n　　UNION \r\n　　SELECT DISTINCT GRANTEE, GRANTEETYPE, \'COLUMN \' FROM SYSCAT.COLAUTH \r\n　　UNION \r\n　　SELECT DISTINCT GRANTEE, GRANTEETYPE, \'SCHEMA \' FROM SYSCAT.SCHEMAAUTH \r\n　　UNION \r\n　　SELECT DISTINCT GRANTEE, GRANTEETYPE, \'SERVER \' FROM SYSCAT.PASSTHRUAUTH \r\n　　ORDER BY GRANTEE, GRANTEETYPE, 3\r\n#创建含identity值(即自动生成的ID)的表\r\ncreate table test2 ( name char(20) not null, age integer not null, number integer not null GENERATED ALWAYS AS IDENTITY (START WITH 500, INCREMENT BY 1)); \r\n#BEFORE CREATE DATABASE\r\ndb2set DB2CODEPAGE -null\r\n\r\ndb2 connect to boc user boc using boc\r\nlist applications for db boc show detail\r\ndb2 get snapshot for locks on boc\r\nlock table L_G_dksqdj in share mode\r\n \r\n\r\n^B^×^Adb2 get monitor switches\r\ndb2 update monitor switches STATEMENT on\r\nset -o vi\r\ndb2 update monitor switches using STATEMENT on\r\ndb2 update monitor switches using SORT on\r\ndb2 update monitor switches using BUFFERPOOL on\r\ndb2 reset monitor\r\ndb2 \\?\r\ndb2 RESET MONITOR\r\ndb2 \\? RESET MONITOR\r\ndb2 RESET MONITOR for tzcbmis\r\ndb2 RESET MONITOR for database tzcbmis\r\ndb2 \\? get snapshot\r\ndb2 get snapshot bufferpools\r\ndb2 get snapshot for bufferpools\r\ndb2 get snapshot for bufferpools on tzcbmis\r\ndb2 RESET MONITOR for tzcbmis\r\ndb2 RESET MONITOR for database tzcbmis\r\ndb2 get snapshot for application on tzcbmis\r\ndb2 get snapshot for all application\r\ndb2 get snapshot for application\r\ndb2 get snapshot for applications\r\ndb2 get snapshot for tables on dbnm\r\ndb2 get snapshot for all on dbnm\r\ndb2 update monitor switches using STATEMENT on\r\n \r\n\r\n对表进行任何操作都不被允许，提示SQLSTATE=57016 SQLCODE=-668 ，原因码 \"7\"的错误：SQL0668N Operation not allowed for reason code \"7\" on table XXX.\r\n首先查一下:\r\ndb2 ? 57016\r\nSQLSTATE 57016: 因为表不活动，所以不能对其进行访问。\r\n解决方法为：执行命令：reorg table XXX；即可。\r\n\r\nrunstats on table administrator.test;\r\nreorg table administrator.test;\r\n\r\nDB2事务隔离级别\r\n1、 RR 可重复读\r\n在SQL执行期间，所有执行些语句扫描过的纪录都会被加上相应的锁，它保证了SQL语句在看到数据之前，所有返回数据都保持不变\r\n2、 RS 读稳定性\r\n些隔离级别下，会锁定所有符合条件的记录\r\n3、 CS 游标稳定性\r\n只锁定游标所在位置以下的行，担是，如果改变了某一行数据，则挂起锁定该行，直到数据库落实\r\n4、 UR 未落实的读\r\n此级别允许访问其他事务未落实的更改，除非其他事务尝试删除或改变表\r\n例子\r\nselect * from db2uat.test for read only with ur\r\nselect * from db2uat.test with ur\r\n\r\n修改OS中 文件型内存占比\r\nvmo -o maxclient%=20\r\nvmo -o maxperm%=20\r\nsvmon -G\r\nvmo -o strict_maxperm=1\r\nSELECT BPNAME FROM SYSCAT.BUFFERPOOLS\r\nCREATE BUFFERPOOL <buffer pool name> PAGESIZE 4096\r\ndb2 list tablespace containers for 6 -- 其中6为表空间标识 用 db2 list tablespace可以看到\r\nselect * from sysibmadm.snapappl\r\ndb2diag -rc 0xFFFF889 --可以看db2dialog.log文件中的ZRC错误码\r\ndb2pd -agents -db sample --查看所有agent （pid client进程之间的关系）\r\ndb2pd -edu --查看edu线程\r\ndb2mtrk -i -d -v --查看DB2内存情况\r\n\r\ndb2 list applications --看当前联链的应用 apphandl=48\r\ndb2pd -db sample -app 48 --看apphandl=48 程序详细情况 查L-AnchID的值 233\r\ndb2pd -db sample -dyn 查看AnchID为233的SQL(用grep过滤) , 上述步骤可以倒序执行：\r\n首先找到文件对应的表，然后db2pd -db dbname –dyn找到操作这个表的sql，通过AnchID在db2pd -app -db dbname 找到AppHandl，通过db2pd -agent就可以找到agent\r\n\r\ndb2pd -db sample -tcbstats 可以查出进行过全表查询的表，和查询次数\r\n\r\nsqlcode：-805 sqlstate：51002 程序没有释放Statemt、 result会导致\r\n/home/db2inst1/sqllib/db2dump/db2diag.log\r\n\r\nINTRA_PARALLEL参数：\r\n该参数指定数据库管理器是否可以使用内部分区并行性(intra-partition parallelism)。默认值 NO 对于并发连接较多的情况(主要是OLTP)最好，而 YES 对于并发连接较少的情况以及复杂 SQL (OLAP/DSS)来说最好。混合的工作负载通常可以得益于NO。\r\n当启用该参数时，就会导致从共享内存中分配排序内存。此外，如果并发程度显著增加，那么还可能导致过多的系统开销。如果系统是非OLTP的，则CPU数与分区数的比例是 4:1，而CPU负载运行的平均百分比是50%，INTRA_PARA LLEL很可能会提高性能\r\n\r\ndb2 -v get snapshot for dbm\r\n\r\ndb2的log file是否可以创建在raw设备上？\r\nIt\'s possible, but as of DB2 V9.1, the use of raw devices for database logging is deprecated. As an alternative to using raw logs, you can use either direct input/output (DIO) or concurrent input/output (CIO).\r\nCheck registry variable DB2_LOGGER_NON_BUFFERED_IO.\r\nDB2? database products support the use of non-buffered I/O (also known as Direct I/O or DIO) when managing database recovery logs on AIX? JFS and JFS2 file systems. To disable file system caching for the file system that contains the database recovery logs, specify the AIX dio or cio (Concurrent I/O) mount options.\r\nNote: Do not use the dio or cio mount options on file systems that contain other DB2 files or directories, such as the sqllib directory.\r\nIf the file system will also contain non-DB2 files, consult your operating system documentation before disabling file system caching. Some AIX operating systems have requirements such as serialization of read and write access. DB2 database manager adheres to these requirements.\r\nTo configure database logging without file system caching:\r\n1.Mount the file system, specifying the AIX dio or cio mount options. \r\nConcurrent I/O (CIO) is an enhanced version of Direct I/O and is supported only on JFS2 file systems. Consult your operating system documentation for more information.\r\n2.Create a directory on the file system for the database recovery logs. For example: \r\nmkdir /new_filesystem/db2logs where new_filesystem is the mount point for the file system.\r\n3.Update the database log path. For example: \r\ndb2 update db cfg for sample using newlogpath /new_filesystem/db2logswhere SAMPLE is the database name. The new setting does not become the value for the logpath database configuration parameter until both of the following occur: \r\n?The database is in a consistent state, as indicated by the database_consistent database configuration parameter. \r\n?All users are disconnected from the database.\r\nThis configuration eliminates any overhead incurred by the operating system as a result of caching database recovery logs. However, the lack of file caching might degrade the performance of log archiving and rollback operations. This performance degradation can be addressed by ensuring that you use an appropriate number of disk spindles and by tuning the log buffer size database configuration parameter (logbufsz).\r\nDB2 database products also support non-buffered I/O for table spaces. Refer to Creating table spaces without file system caching\r\n--------------------------------------\r\ngrant某个schema下所有表的select权限\r\n如何给一个用户grant某个schema下所有表的select权限？\r\n可以用下面语句建立一个批处理文件：\r\nselect \'grant select on \'||rtrim(tabschema)||\'.\'||tabname||\' to user xlhe ;\' from syscat.tables where type=\'T\' and tabschema =\'某个shcema名称\'\r\n---------------------\r\n\r\nDB2日志是以文件的形式存放在文件系统中，分为两种模式：循环日志和归档日志。当创建新数据库时，日志的缺省模式是循环日志。在这种模式下，只能实现数据库的脱机备份和恢复。如果要实现联机备份和恢复，必须设为归档日志模式。在 DB2 UDB 中，脱机备份也是最简单的备份。脱机备份要求采取完全数据库备份，显然，在备份的过程中，数据库是脱机的。换言之，当执行脱机备份时，用户无法访问数据库。如果您正在使用循环日志记录，脱机备份是惟一受支持的备份类型。当首先创建一个数据库的时候，这是默认的日志记录方法。对于循环日志记录，log retain for recovery status 和 user exit for logging status 都被设为 NO。LOGRETAIN 和 USEREXIT 两个参数都被设为 OFF。\r\n目前在综合业务系统中，设置的均是归档日志模式；其它系统（如事后监督、经营决策、中间业务等）一般都设置为循环日志模式。至于采用何种模式，可以通过修改数据库配置参数（LOGRETAIN）来实现： 归档日志模式：db2 update db cfg for using logretain on 注：改为on后，查看数据库配置参数logretain的值时，实际显示的是recovery。改变此参数后，再次连接数据库会显示数据库处于备份暂挂（BACKUP PENDING）状态。这时，需要做一次对数据库的脱机备份（db2 backup db ），才能使数据库状态变为正常。\r\n \r\n----------------\r\n创建死锁事件监控器\r\ndb2 \"create event monitor dlockevm for deadlocks with details history write to file \'/home/cmsinst/deadlocks\'\"\r\ndb2 set event monitor dlockevm state=1\r\n查看事件输出\r\ndb2evmon -db cmsdb -evm dlockevm\r\n关闭并输出结果至文件\r\ndb2 flush event monitor dlockevm\r\ndb2 set event monitor dlockevm state=0\r\ndb2evmon -path /home/cmsinst/deadlocks > deadlock.txt\r\n删除监控器\r\ndb2 \"drop event monitor dlockevm\"\r\n-----------------\r\n当处理程序逻辑为对同一张表 select - update - select 时，有可能在并发操作时出现死锁，若该逻辑在循环中，则出现死锁的概率更大。\r\n\r\n树型数据查询\r\nwith T(usr_id,usr_super) as (select usr_id,usr_super from s_usr where usr_id=\'xxx\'\r\nunion all select s.usr_id,s.usr_super from s_usr S,T where s.usr_super=t.usr_id )\r\nselect usr_id,usr_super from T;\r\n\r\n当查询多条数据1000+时返回列数50+过多时性能会急剧下降\r\n\r\nLOB INLINE 方式可以将较小的LOB数据与普通数据存放在一起，因此可以用BUFFERPOOL，可以被压缩\r\ncreate table xxxt ( yyycoln clob inline length 1000 ); -- 小于1000的大数据，将与普通数据共同存储\r\n由于BLOB没有字符转换，因此推荐用BLOB\r\n复合索引中的第一个字段的数据区分度对索引性能影响大，区分度高的尽量放在第一个字段\r\nINSERT时慢，发生在PCTFREE较高且行记录较大时，频繁地寻找新空闲数据块，对于批量INSERT可以将表的参数设置APPEND ON，在INSERT结束时再改回APPEND OFF。\r\nUPDATE时慢，可以调整表的PCTFREE参数，防止出现行的溢出\r\n对于DISTINCT、ORDER BY、MAX也需要建索引\r\n \r\n--删除某个schema下所有的表\r\nselect \'DROP TABLE \' || tabname ||\' ;\' from syscat.tables where tabschema=\'tabschema\'\r\n \r\n \r\n \r\n \r\nSQLCODE: -443, SQLSTATE: 38553\r\n解决方法：\r\n打开db2命令行，切换到本机db2的/bnd”目录下，\r\n1、db2 connect to 数据库名 user 用户名 using 密码\r\n2、执行db2 bind db2schema.bnd blocking all grant public\r\n \r\nDB2 rbind报错处理\r\nExplicitly rebind packages by performing the below commands.\r\n\r\ndb2 connect to SAMPLE\r\n\r\ndb2 -x \"select \'REBIND PACKAGE \' || rtrim(pkgschema) || \'.\' || rtrim(pkgname) || \';\' as command from syscat.packages\" > rebind.sql\r\n\r\ndb2 -tvf rebind.sql\r\n \r\n如果显示需要先绑定NULLID.***  请先执行 REBIND PACKAGENULLID.***\r\n \r\n \r\n \r\n \r\n','',2,NULL,5,'yc','2019-03-09',NULL,NULL,'DB2常见命令',NULL,NULL,NULL,NULL,NULL),(23,'老干部','','','Oracle数据库常用操作','images/7.jpg','登录oracle数据库\r\nsqlplus / as sysdba\r\n创建用户\r\ncreate user username identified by password;\r\n给用户赋dba权限\r\ngrant dba to username;\r\n \r\n创建表空间TBS_CIIS2ND_DATA\r\n\r\n\r\n1\r\ncreatetablespaceTBS_CIIS2ND_DATAdatafile\'D:\\app\\thinkpad\\oradata\\cmis\\TBS_CIIS2ND_DATA.DBF\'size256Mautoextendonnext100M\r\n \r\n使用exp导出dmp文件\r\nexp username/password@orcl file=/home/user/orcl-exp.dmp log=/home/user/orcl-exp.log owner=username\r\n使用imp导入dmp文件\r\nimp username/password file=/home/user/orcl-exp.dmp touser=username full=y ignore=y;\r\n \r\n查看oracle directory目录\r\nselect * from dba_directories;\r\n \r\n用expdp导出数据\r\n1)导出用户\r\nexpdp scott/tiger@orcl schemas=scott dumpfile=expdp.dmp directory=dump_dir;\r\n2)导出表\r\nexpdp scott/tiger@orcl tables=emp,dept dumpfile=expdp.dmp directory=dump_dir;\r\n3)按查询条件导\r\nexpdp scott/tiger@orcl directory=dump_dir dumpfile=expdp.dmp tables=empquery=\'where deptno=20\';\r\n4)按表空间导\r\nexpdp system/manager@orcl directory=dump_dir dumpfile=tablespace.dmptablespaces=temp,example;\r\n5)导整个数据库\r\nexpdp system/manager@orcl directory=dump_dir dumpfile=full.dmp full=y;\r\n \r\n用impdp导入数据\r\n1)导入用户（从用户scott导入到用户scott）\r\nimpdp scott/tiger@orcl directory=dump_dir dumpfile=expdp.dmp schemas=scott;\r\n2)导入表（从scott用户中把表dept和emp导入到system用户中）\r\nimpdp system/manager@orcl directory=dump_dir dumpfile=expdp.dmptables=scott.dept,scott.emp remap_schema=scott:system;\r\n3)导入表空间\r\nimpdp system/manager@orcl directory=dump_dir dumpfile=tablespace.dmp tablespaces=example;\r\n4)导入数据库\r\nimpdb system/manager@orcl directory=dump_dir dumpfile=full.dmp full=y;\r\n5)追加数据\r\nimpdp system/manager@orcl directory=dump_dir dumpfile=expdp.dmp schemas=systemtable_exists_action','#分布式#',2,NULL,4,'yc','2019-03-09',NULL,NULL,'Oracle数据库常用操作',NULL,NULL,NULL,NULL,NULL),(24,'老干部','','','你的微服务敢独立交付么？ ','images/3.jpg','最近经常在项目或是社区里听到大家谈论微服务架构，但谈论的焦点更多集中在微服务拆分，分布式架构，微服务门槛，DevOps配套设施等话题上。\r\n\r\n但是在我眼里，真正能称之为微服务架构的少之又少。原因也很简单，我所见到的很多所谓的微服务架构项目，大多都没有做到微服务架构的一个基本要求：服务的独立部署（交付）。\r\n\r\n这里的独立部署和自动化部署还不是一个概念，服务的自动化部署相对简单，已有大量的工具可以帮助我们做到。但是这里所谈的独立部署，我认为关键和难点并不在于“部署”，而在于“独立”。\r\n\r\n如果失去了服务独立部署（交付）的能力，一个微服务架构的威力将大打折扣，我们的系统虽然在物理上被拆分成了多个小的服务，但是如果从最终交付的角度来看，仍然是以一个整体存在的，就像单体应用一样，存在诸多的问题。\r\n为什么服务的独立交付并不简单？\r\n\r\n那为什么不能让每一个服务都独立部署到产品环境呢？问题的答案是：不是不能，而是不敢！\r\n\r\n为了表达清楚，让我们来看个例子吧。\r\n\r\n像下图一样，我现在就是那个程序员帅哥（本色出演），突然有一天心血来潮，动手开发了一个网上商城。代码Push到Github并通过CI构建持续交付流水线，最终自动化部署到云端产品环境，供用户访问使用。\r\n\r\n随着用户和访问量的增加，需求和功能也越来越多，系统也变得越发复杂。\r\n\r\n从网上了解到最近有个叫微服务的架构非常火爆，我也赶了回时髦，当然也觉得这种架构确实可以帮助我解决现在的一些问题。\r\n\r\n经过对系统的分析，我将商城的后台部分拆分出了3个服务，为了简单我们就称之为ABC三个服务。\r\n\r\n\r\n我们假设一个比较极端的情况，三个服务相互调用（先不考虑这样是否合理），每个服务通过自己的持续交付流水线独立部署到产品环境。当前产品环境的各个服务的版本是：A：1.0、B：2.0、C：3.0\r\n\r\n一切都非常完美是不是？看！我们已经做到了服务的独立部署！So easy~\r\n\r\n当然，事情肯定不会那么简单。\r\n\r\n问题出现在当我对A服务做了一次新的提交之后，A服务的最新版本升级到了1.1。不幸的是，这个新的版本意外的破坏了A与B之间的契约，错误的调用了B的接口，导致出现了错误。\r\n\r\n虽然我的A服务和B服务都有比较完备的UT（单元测试），但因为UT无法发现服务之间的集成是否被破坏，所以只有UT作为质量保障的A服务持续交付流水线也自然没有能力发现AB服务集成被破坏的这个问题。最终导致存在问题的A1.1版本被部署到了产品环境，产品环境出现了严重的Bug。\r\n\r\n请问在座的同学，碰到这样的情况，你会如何处理？\r\n\r\n“加集成测试啊！”\r\n\r\n这位同学说的极是，我这么聪明自然也想到了这一点，不就是要测集成吗？UT干不了就加集成测试不就成了。\r\n\r\n为了统一语言，毕竟对于各种测试的叫法太容易引起混淆，参考Martin Fowler在《微服务测试策略》中的定义，我们在本文中将这种测试多服务集成的测试统一称作端到端测试（End-to-End tests，简称E2E测试）。\r\n\r\n添加了E2E测试之后，我的交付流水线就变成了下面这个样子。\r\n\r\n因为有了E2E测试的存在，问题迎刃而解，当A服务的新版本破坏了与B服务的集成时，E2E测试就会及时诊断出来，并阻止A服务的最新版本向产品环境流动，保证产品环境不被破坏。\r\n\r\n这样看似没有什么问题，通过添加E2E测试，解决了服务间集成的验证问题，但在不知不觉中，我们也失去了微服务架构的那个重要的特性：“服务的独立交付”。\r\n\r\n怎么讲？别急，我们再往下看。\r\n\r\n假设A服务的修复过程中，B和C服务也提交了新的代码，我们假设这两个提交是没有问题的，但因为A服务的1.1版本导致E2E测试挂掉的问题还没有被修复，所以B和C的新版本也被E2E测试拦了下来，此时的E2E测试就像是一个亮起红灯的路口，阻塞了所有服务通往产品环境的通道。\r\n\r\n所以说，随着集中E2E测试的添加，质量被保障的同时，我们的“微服务架构”也已悄然失去了服务独立交付的能力，杀敌一千自损八百，损失惨重！\r\n\r\n这并不是我假想的场景，在我自己经历的几个真实项目中，这个问题都在一直困扰着我们。带来了各种各样的衍生问题，例如E2E测试长时间失败，无人修复，修复难度大，服务交付堵塞，为了保持交付通路畅通还不得不引入同样存在很大副作用的CodeFrezze机制和提交Token机制等。\r\n\r\n可以看到，虽然我们能够在代码库，在部署结构上，甚至在组织上进行服务化拆分，但就因为这最后一个交付的十里路口，最后这一个红绿灯，让所有的服务又纠缠在了一起，所有的服务化拆分形同虚设，最终我们得到的也只是一个看起来像微服务架构的单体应用而已。\r\n拆除红绿灯，各行其道，收复失地！\r\n\r\n那，如何才能将这个“红绿灯”拆除，让服务可以在有质量保障的前提下还可以做到独立交付呢？这就是本文要解决的问题，让我们继续往下看。\r\n\r\n我的解决方法其实也很简单：Inline E2E tests。\r\n\r\n即并不添加新的集中的Pipeline做E2E测试，而是为每一个服务的Pipeline都添加一个相同的E2E测试的Stage，就相当于将E2E测试Inline到每个服务各自的部署流水线中，如下图所示。\r\n\r\n其实Inline E2E测试还不是最关键的，最关键的变化点就是假设A服务有了新的提交，运行到A服务自己Pipeline的E2E测试的时候，此时的E2E测试并不是像之前一样获取B和C服务的最新代码库版本做集成验证，而获取当前产品环境上的B和C服务的已部署当前版本做集成验证。\r\n\r\n例如，如图所示A服务的版本从1.0升级到了1.1，当前产品环境的B和C的版本是2.0和3.0。在执行A服务Pipeline上的E2E测试时，验证出A1.1和B2.0集成存在问题，测试变红，Pipeline挂掉，从而阻断了A服务的1.1版本部署到产品环境，保证了产品环境不会被A的1.1版本破坏。\r\n\r\n同样，假设A还没有被修复之前，B也有了新的提交，产生了一个新的版本B2.1，这时在B服务Pipeline上的E2E测试并不获取当前A服务的代码库最新版本1.1做集成测试，而是获取产品环境上的当前版本A1.0版本做集成测试。我们假设B2.1和A1.0之间的集成没有问题，测试通过，所以B的2.1版本就被成功的交付到了产品环境，而此时产品环境的A服务的版本仍是1.0。\r\n\r\n看！服务之间的阻塞被神奇的解决了，服务再也不会被堵在一个统一的十字路口，而是各行其道，A的车道出了事故，是A的问题，应该由A来承担后果和解决问题，不应该影响到其他服务，其他服务依然可以持续的交付到产品环境。\r\n向前看是持续集成，向后看是持续交付！\r\n\r\n看到这里可能有些小伙伴会感到有些失望。咋呼半天，不就是将E2E测试整到每个服务的Pipeline里，再把获取版本从最新代码改成产品环境么？有啥厉害的。\r\n\r\n但是，在我看来，这个看似简单的变化，意义却是重大的：它揭示了“持续集成”和“持续交付”的一个主要区别。\r\n\r\n“持续集成”和”持续交付”，这两个概念相信大家一定都不陌生，在软件领域也被提了不少年头了，不算什么新概念新技术。但对于这两个概念，我们经常一起提及，也经常混淆，搞不清楚两者的区别到底是什么，可能认为持续交付只不过是持续集成的演进版，新瓶装旧酒而已。\r\n\r\n但其实它们却有着本质的区别。\r\n\r\n“持续集成”关注的是各个集成单元之前最新版本的集成问题，即是不是某个集成单元的最新版本破坏了系统整体的集成，我管这种视角叫：向“前”看。\r\n\r\n而“持续交付”关注的应该不是集成单元最新版本之间的集成问题，而是某个集成单元的最新版本是否可以（能和敢）部署到产品环境。换句话说就是维持产品环境的其他服务不变，只将当前集成单元的最新版本部署到产品环境，产品是否依然可用，不被破坏。所以在“持续交付”的视角下，应该关注的是当前集成单元与产品环境上的其他服务的版本是否兼容，我管这种视角叫：向“后”看。\r\n\r\n向前看是持续集成，向后看才是持续交付，如果前后都不看那就是在裸奔。\r\n\r\n但是肯定早有同学在心里疑惑，将E2E测试下放到每一个服务自己的Pipeline中，靠谱么？是不是太重了？根据测试金字塔，E2E测试应该是属于靠近金字塔顶端的测试种类，无论从数量和覆盖范围应该也都不会太多，怎么能靠它来保障服务之间的所有集成点和契约呢？\r\n主角登场-契约测试\r\n\r\n细心的同学肯定已经发现上面最后一张图中，我已经悄悄的把E2E测试变为了CT，即Contract Test，契约测试。\r\n\r\n契约测试也是这两年伴随微服务架构的兴起，经常被提及的一种比较新的测试类型。在测试金字塔中，他的位置介于E2E和Component Tests（可以理解成单个服务的API测试）之间。\r\n\r\n简单的理解，契约测试就是一种可以用类似于单元测试的技术验证两两服务之间集成的测试技术。它相比于更低层次的单元测试的优势是可以测集成（两两服务之间），相比于更高层次的E2E测试的优势是实现方式上又类似于单元测试，更轻量，跑的更快，覆盖的范围也自然可以更广更细。\r\n\r\n使用契约测试替换掉E2E测试之后，整个架构也会变得更复杂一些，目前契约测试的框架也有很多，如大家常常提到的Pact或是SpringContracts等等。这里我先以Pact为例予以说明，其他框架实现上可能有些差别，但是思路是一致的。\r\n\r\nA服务调用B服务的一个API，我们就称为A和B之间存在了一个契约，即B应该按照这个契约提供一个满足契约要求的API，而A也应该按照这个契约约定的方式来调用B的这个API。在这个过程中A作为调用方，我们称之为Consumer端。B作为被调用方，我们称之为Provider端。\r\n\r\n如果A和B都履行契约，按照契约定义的约定调用和被调用，我们就可以认为集成不会有问题。但无论是B擅自修改了API破坏了契约，还是A擅自修改了调用API的方式破坏了契约，都会导致契约被破坏，反应到测试上就是契约测试会失败，反应到产品上就是功能被破坏，出现Bug。\r\n\r\n每个契约，例如A->B，都会有Consumer端和Provider端生成的两个产出物：分别是a-b.consumer.json.1.1(由Consumer端生成的契约文件，所以版本也是Consumer端A的版本号)和a-b.provider.jar.2.0（由Provider端生成的契约验证测试包，他由Provider端生成，所以版本是B的版本）。这个jar包其实就是一组测试，他的输入是a-b.consumer.json，产出则是测试的结果，也就是契约的验证结果：成功或是失败。\r\n\r\n可以把A服务产出的契约文件a-b.consumer.json.1.1想象成一把钥匙，把B服务产出的Provider端的测试a-b.provider.jar.2.0想象成一把锁。那契约测试的执行过程就像是用这把钥匙试着去打开这把锁：如果可以打开，我们认为这A1.1->B2.0的契约是满足的，反之契约就是被破坏了。\r\n\r\n值得注意的一点就是，契约测试不像E2E测试，它是有方向的，所以我们看到a-b和b-a是两个不同的契约。\r\n\r\n所以，只有当A1.1->B2.0和B2.0->A1.1双向的契约都被验证通过后，我们才能认为A1.1版本和B2.0版本的集成是没有问题的。\r\n用契约测试替换E2E测试\r\n\r\n回到前面的例子上，假设我们已经构建了ABC三个服务两两之间的契约测试。此时，A服务有了新的提交升级到了1.1版本，那我们如何才能通过契约测试来验证A1.1版本能否交付到产品环境呢？\r\n\r\n答案就是只要通过A的1.1版本的最新代码，生成所有A作为Consumer端的契约文件（a-b.consumer.json.1.1和a-c.consumer.json.1.1），用这两把“钥匙”去试着开（作为输入执行Provider端测试）产品环境对应的两把“锁”（a-b.provider.jar.2.0和a-c.provider.jar.3.0）。\r\n\r\n如果都可以打开（测试通过）的话，就证明A的新版本1.1作为Consumer端与产品环境的B和C服务是兼容的。\r\n\r\n等等，别着急，还没完……\r\n\r\n因为我们还需要考虑A作为Provider的情况，做法还是通过A的1.1版本的最新代码生成A版本作为Provider端的契约测试（b-a.provider.jar.1.1和c-a.provider.jar.1.1），拿着这两把“新锁”，然后试着用产品环境上的两把“钥匙”（b-a.consumer.json.2.0和c-a.consumer.json3.0）去开。\r\n\r\n如果也都可以打开（测试通过）的话，就证明A的新版本1.1作为Provider端与产品环境的B和C服务也是兼容的。\r\n\r\n至此，当验证了A的新版本1.1无论是作为调用端还是被调用端都与产品环境上的其他服务契约满足后，我们就认为A1.1与B2.0和C3.0集成是没有问题的，也就代表A1.1可以被放心地部署到产品环境中，替代现在的1.0版本。\r\n最后，敲黑板划重点\r\n\r\n    微服务架构下的独立部署（交付）很重要，但往往容易被忽视，没有被引起足够重视。\r\n    为了实现微服务的独立持续交付，我们要向“后”看，不要向“前”看，即关注当前变更服务与部署环境中其他服务的兼容性而不是关注当前变更服务与其他服务最新版本的兼容性。\r\n    用契约测试来替代E2E测试，降低测试成本，提高测试覆盖，尽早测试。并通过不断地完善契约管理，保障微服务架构质量和避免微服务架构腐化僵化。\r\n','#微服务#/#cloud#/#架构师#/#部署#',3,NULL,3,'yc','2019-03-09',NULL,NULL,'最近经常在项目或是社区里听到大家谈论微服务架构，但谈论的焦点更多集中在微服务拆分，分布式架构，微服务门槛，DevOps配套设施等话题上。\r\n\r\n但是在我眼里，真正能称之为微服务架构的少之又少。原因也很简单，我所见到的很多所谓的微服务架构项目，大多都没有做到微服务架构的一个基本要求：服务的独立部署（交付）。',NULL,NULL,NULL,NULL,NULL),(25,'老干部','','','使用Consul做服务发现的若干姿势 ','images/7.jpg','从2016年起就开始接触Consul，使用的主要目的就是做服务发现，后来逐步应用于生产环境，并总结了少许使用经验。最开始使用Consul的人不多，为了方便交流创建了一个QQ群（群号在最后），这两年微服务越来越火，使用Consul的人也越来越多，目前群里已有400多人，经常有人问一些问题，比如：\r\n\r\n    服务注册到节点后，其他节点为什么没有同步？\r\n    Client是干什么的？（Client有什么作用？）\r\n    能不能直接注册到Server？（是否只有Server节点就够了？）\r\n    服务信息是保存在哪里的？\r\n    如果节点挂了健康检查能不能转移到别的节点？\r\n\r\n有些人可能对服务注册和发现还没有概念，有些人可能使用过其它服务发现的工具，比如zookeeper，etcd，会有一些先入为主的经验。这篇文章将结合Consul的官方文档和自己的实际经验，谈一下Consul做服务发现的方式，文中尽量不依赖具体的框架和开发语言，从原理上进行说明，希望能够讲清楚上边的几个问题。\r\n为什么使用服务发现\r\n\r\n防止硬编码、容灾、水平扩缩容、提高运维效率等等，只要你想使用服务发现总能找到合适的理由。\r\n\r\n一般的说法是因为使用微服务架构。传统的单体架构不够灵活不能很好的适应变化，从而向微服务架构进行转换，而伴随着大量服务的出现，管理运维十分不便，于是开始搞一些自动化的策略，服务发现应运而生。所以如果需要使用服务发现，你应该有一些对服务治理的痛点。\r\n\r\n但是引入服务发现就可能引入一些技术栈，增加系统总体的复杂度，如果你只有很少的几个服务，比如10个以下，并且业务不怎么变化，吞吐量预计也很稳定，可能就没有必要使用服务发现。\r\nConsul内部原理\r\n\r\n下面这张图来源于Consul官网，很好的解释了Consul的工作原理，先大致看一下。\r\n\r\n首先Consul支持多数据中心，在上图中有两个DataCenter，他们通过Internet互联，同时请注意为了提高通信效率，只有Server节点才加入跨数据中心的通信。\r\n\r\n在单个数据中心中，Consul分为Client和Server两种节点（所有的节点也被称为Agent），Server节点保存数据，Client负责健康检查及转发数据请求到Server；Server节点有一个Leader和多个Follower，Leader节点会将数据同步到Follower，Server的数量推荐是3个或者5个，在Leader挂掉的时候会启动选举机制产生一个新的Leader。\r\n\r\n集群内的Consul节点通过gossip协议（流言协议）维护成员关系，也就是说某个节点了解集群内现在还有哪些节点，这些节点是Client还是Server。单个数据中心的流言协议同时使用TCP和UDP通信，并且都使用8301端口。跨数据中心的流言协议也同时使用TCP和UDP通信，端口使用8302。\r\n\r\n集群内数据的读写请求既可以直接发到Server，也可以通过Client使用RPC转发到Server，请求最终会到达Leader节点，在允许数据轻微陈旧的情况下，读请求也可以在普通的Server节点完成，集群内数据的读写和复制都是通过TCP的8300端口完成。\r\nConsul服务发现原理\r\n\r\n下面这张图是自己画的，基本描述了服务发现的完整流程，先大致看一下。\r\n\r\n首先需要有一个正常的Consul集群，有Server，有Leader。这里在服务器Server1、Server2、Server3上分别部署了Consul Server，假设他们选举了Server2上的Consul Server节点为Leader。这些服务器上最好只部署Consul程序，以尽量维护Consul Server的稳定。\r\n\r\n然后在服务器Server4和Server5上通过Consul Client分别注册Service A、B、C，这里每个Service分别部署在了两个服务器上，这样可以避免Service的单点问题。服务注册到Consul可以通过HTTP API（8500端口）的方式，也可以通过Consul配置文件的方式。Consul Client可以认为是无状态的，它将注册信息通过RPC转发到Consul Server，服务信息保存在Server的各个节点中，并且通过Raft实现了强一致性。\r\n\r\n最后在服务器Server6中Program D需要访问Service B，这时候Program D首先访问本机Consul Client提供的HTTP API，本机Client会将请求转发到Consul Server，Consul Server查询到Service B当前的信息返回，最终Program D拿到了Service B的所有部署的IP和端口，然后就可以选择Service B的其中一个部署并向其发起请求了。如果服务发现采用的是DNS方式，则Program D中直接使用Service B的服务发现域名，域名解析请求首先到达本机DNS代理，然后转发到本机Consul Client，本机Client会将请求转发到Consul Server，Consul Server查询到Service B当前的信息返回，最终Program D拿到了Service B的某个部署的IP和端口。\r\n\r\n图中描述的部署架构笔者认为是最普适最简单的方案，从某些默认配置或设计上看也是官方希望使用者采用的方案，比如8500端口默认监听127.0.0.1，当然有些同学不赞同，后边会提到其他方案。\r\nConsul实际使用\r\n\r\n为了更快的熟悉Consul的原理及其使用方式，最好还是自己实际测试下。\r\n\r\nConsul安装十分简单，但是在一台机器上不方便搭建集群进行测试，使用虚拟机比较重，所以这里选择了docker。这里用了Windows 10，需要是专业版，因为Windows上的Docker依赖Hyper-V，而这个需要专业版才能支持。这里对于Docker的使用不会做过多的描述，如果遇到相关问题请搜索一下。\r\n安装Docker\r\n\r\n通过这个地址下载安装：\r\n\r\nhttps://store.docker.com/editions/community/docker-ce-desktop-windows\r\n\r\n安装完成后打开 Windows PowerShell，输入docker –version，如果正常输出docker版本就可以了。\r\n启动Consul集群\r\n\r\n在 Windows PowerShell中执行命令拉取最新版本的Consul镜像：\r\n\r\ndocker pull consul\r\n\r\n然后就可以启动集群了，这里启动4个Consul Agent，3个Server（会选举出一个leader），1个Client。\r\n\r\n#启动第1个Server节点，集群要求要有3个Server，将容器8500端口映射到主机8900端口，同时开启管理界面\r\ndocker run -d --name=consul1 -p 8900:8500 -e CONSUL_BIND_INTERFACE=eth0 consul agent --server=true --bootstrap-expect=3 --client=0.0.0.0 -ui\r\n \r\n#启动第2个Server节点，并加入集群\r\ndocker run -d --name=consul2 -e CONSUL_BIND_INTERFACE=eth0 consul agent --server=true --client=0.0.0.0 --join 172.17.0.2\r\n \r\n#启动第3个Server节点，并加入集群\r\ndocker run -d --name=consul3 -e CONSUL_BIND_INTERFACE=eth0 consul agent --server=true --client=0.0.0.0 --join 172.17.0.2\r\n \r\n#启动第4个Client节点，并加入集群\r\ndocker run -d --name=consul4 -e CONSUL_BIND_INTERFACE=eth0 consul agent --server=false --client=0.0.0.0 --join 172.17.0.2\r\n\r\n第1个启动容器的IP一般是172.17.0.2，后边启动的几个容器IP会排着来：172.17.0.3、172.17.0.4、172.17.0.5。\r\n\r\n这些Consul节点在Docker的容器内是互通的，他们通过桥接的模式通信。但是如果主机要访问容器内的网络，需要做端口映射。在启动第一个容器时，将Consul的8500端口映射到了主机的8900端口，这样就可以方便的通过主机的浏览器查看集群信息。\r\n\r\n进入容器consul1：\r\n\r\ndocker exec -it consul1 /bin/sh\r\n \r\n#执行ls后可以看到consul就在根目录\r\nls\r\n\r\n输入exit可以跳出容器。\r\n服务注册\r\n\r\n自己写一个web服务，用最熟悉的开发语言就好了，不过需要在容器中能够跑起来，可能需要安装运行环境，比如python、java、.net core等的sdk及web服务器，需要注意的是Consul的docker镜像基于alpine系统，具体运行环境的安装请搜索一下。\r\n\r\n这里写了一个hello服务，通过配置文件的方式注册到Consul，服务的相关信息：\r\n\r\n    name：hello，服务名称，需要能够区分不同的业务服务，可以部署多份并使用相同的name注册。\r\n    id：hello1，服务id，在每个节点上需要唯一，如果有重复会被覆盖。\r\n    address：172.17.0.5，服务所在机器的地址。\r\n    port：5000，服务的端口。\r\n    健康检查地址：http://localhost:5000/，如果返回HTTP状态码为200就代表服务健康，每10秒Consul请求一次，请求超时时间为1秒。\r\n\r\n请将下面的内容保存成文件services.json，并上传到容器的/consul/config目录中。\r\n\r\n{\r\n  \"services\": [\r\n    {\r\n      \"id\": \"hello1\",\r\n      \"name\": \"hello\",\r\n      \"tags\": [\r\n        \"primary\"\r\n      ],\r\n      \"address\": \"172.17.0.5\",\r\n      \"port\": 5000,\r\n      \"checks\": [\r\n        {\r\n        \"http\": \"http://localhost:5000/\",\r\n        \"tls_skip_verify\": false,\r\n        \"method\": \"Get\",\r\n        \"interval\": \"10s\",\r\n        \"timeout\": \"1s\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n\r\n复制到consul config目录：\r\n\r\ndocker cp {这里请替换成services.json的本地路径} consul4:/consul/config\r\n\r\n重新加载consul配置：\r\n\r\nconsul reload\r\n\r\n然后这个服务就注册成功了。可以将这个服务部署到多个节点，比如部署到consul1和consul4，并同时运行。\r\n\r\n服务发现\r\n\r\n服务注册成功以后，调用方获取相应服务地址的过程就是服务发现。Consul提供了多种方式。\r\n\r\nHTTP API方式：\r\n\r\ncurl http://127.0.0.1:8500/v1/health/service/hello?passing=false\r\n\r\n返回的信息包括注册的Consul节点信息、服务信息及服务的健康检查信息。这里用了一个参数passing=false，会自动过滤掉不健康的服务，包括本身不健康的服务和不健康的Consul节点上的服务，从这个设计上可以看出Consul将服务的状态绑定到了节点的状态。\r\n\r\n如果服务有多个部署，会返回服务的多条信息，调用方需要决定使用哪个部署，常见的可以随机或者轮询。为了提高服务吞吐量，以及减轻Consul的压力，还可以缓存获取到的服务节点信息，不过要做好容错的方案，因为缓存服务部署可能会变得不可用。具体是否缓存需要结合自己的访问量及容错规则来确定。\r\n\r\n上边的参数passing默认为false，也就是说不健康的节点也会返回，结合获取节点全部服务的方法，这里可以做到获取全部服务的实时健康状态，并对不健康的服务进行报警处理。\r\n\r\nDNS方式：\r\n\r\nhello服务的域名是：hello.service.dc1.consul，后边的service代表服务，固定；dc1是数据中心的名字，可以配置；最后的consul也可以配置。\r\n\r\n官方在介绍DNS方式时经常使用dig命令进行测试，但是alpine系统中没有dig命令，也没有相关的包可以安装，但是有人实现了，下载下来解压到bin目录就可以了。\r\n\r\ncurl -L https://github.com/sequenceiq/docker-alpine-dig/releases/download/v9.10.2/dig.tgz\\|tar -xzv -C /usr/local/bin\r\n\r\n然后执行dig命令：\r\n\r\ndig @127.0.0.1 -p 8600 hello.service.dc1.consul. ANY\r\n\r\n如果报错：parse of /etc/resolv.conf failed ，请将resolv.conf中的search那行删掉。\r\n\r\n正常的话可以看到返回了服务部署的IP信息，如果有多个部署会看到多个，如果某个部署不健康了会自动剔除（包括部署所在节点不健康的情况）。需要注意这种方式不会返回服务的端口信息。\r\n\r\n使用DNS的方式可以在程序中集成一个DNS解析库，也可以自定义本地的DNS Server。自定义本地DNS Server是指将.consul域的请求全部转发到Consul Agent，Windows上有DNS Agent，Linux上有Dnsmasq；对于非Consul提供的服务则继续请求原DNS；使用DNS Server时Consul会随机返回具体服务的多个部署中的一个，仅能提供简单的负载均衡。\r\n\r\nDNS缓存问题：DNS缓存一般存在于应用程序的网络库、本地DNS客户端或者代理，Consul Sever本身可以认为是没有缓存的（为了提高集群DNS吞吐量，可以设置使用普通Server上的陈旧数据，但影响一般不大），DNS缓存可以减轻Consul Server的访问压力，但是也会导致访问到不可用的服务。使用时需要根据实际访问量和容错能力确定DNS缓存方案。\r\n\r\nConsul Template\r\n\r\nConsul Template是Consul官方提供的一个工具，严格的来说不是标准的服务发现方式。这个工具会通过Consul监听数据变化然后替换模板中使用的标签，并发布替换后的文件到指定的目录。在nginx等web服务器做反向代理和负载均衡时特别有用。\r\n\r\nConsul的docker镜像中没有集成这个工具，需要自己安装，比较简单：\r\n\r\ncurl -L https://releases.hashicorp.com/consul-template/0.19.5/consul-template_0.19.5_linux_amd64.tgz\\|tar -xzv -C /usr/local/bin\r\n\r\n然后创建一个文件：in.tpl，内容为：\r\n\r\n{{ range service \"hello\" }}\r\nserver {{ .Name }}{{ .Address }}:{{ .Port }}{{ end }}\r\n\r\n这个标签会遍历hello服务的所有部署，并按照指定的格式输出。在此文件目录下执行：\r\n\r\nnohup consul-template -template \"in.tpl:out.txt\" &\r\n\r\n现在你可以cat out.txt查看根据模板生产的内容，新增或者关闭服务，文件内容会自动更新。\r\n\r\n此工具我没有用在生产环境，详细使用请访问：https://github.com/hashicorp/consul-template\r\n节点和服务注销\r\n\r\n节点和服务的注销可以使用HTTP API:\r\n\r\n    注销任意节点和服务：/catalog/deregister\r\n    注销当前节点的服务：/agent/service/deregister/:service_id\r\n\r\n注意：\r\n\r\n如果注销的服务还在运行，则会再次同步到catalog中，因此应该只在agent不可用时才使用catalog的注销API。\r\n\r\n节点在宕机时状态会变为failed，默认情况下72小时后会被从集群移除。\r\n\r\n如果某个节点不继续使用了，也可以在本机使用consul leave命令，或者在其它节点使用consul force-leave 节点Id，则节点上的服务和健康检查全部注销。\r\nConsul的健康检查\r\n\r\nConsul做服务发现是专业的，健康检查是其中一项必不可少的功能，其提供Script/TCP/HTTP+Interval，以及TTL等多种方式。服务的健康检查由服务注册到的Agent来处理，这个Agent既可以是Client也可以是Server。\r\n\r\n很多同学都使用ZooKeeper或者etcd做服务发现，使用Consul时发现节点挂掉后服务的状态变为不可用了，所以有同学问服务为什么不在各个节点之间同步？这个根本原因是服务发现的实现原理不同。\r\n\r\nConsul与ZooKeeper、etcd的区别\r\n\r\n后边这两个工具是通过键值存储来实现服务的注册与发现。\r\n\r\n    ZooKeeper利用临时节点的机制，业务服务启动时创建临时节点，节点在服务就在，节点不存在服务就不存在。\r\n    etcd利用TTL机制，业务服务启动时创建键值对，定时更新ttl，ttl过期则服务不可用。\r\n\r\nZooKeeper和etcd的键值存储都是强一致性的，也就是说键值对会自动同步到多个节点，只要在某个节点上存在就可以认为对应的业务服务是可用的。\r\n\r\nConsul的数据同步也是强一致性的，服务的注册信息会在Server节点之间同步，相比ZK、etcd，服务的信息还是持久化保存的，即使服务部署不可用了，仍旧可以查询到这个服务部署。但是业务服务的可用状态是由注册到的Agent来维护的，Agent如果不能正常工作了，则无法确定服务的真实状态，并且Consul是相当稳定了，Agent挂掉的情况下大概率服务器的状态也可能是不好的，此时屏蔽掉此节点上的服务是合理的。Consul也确实是这样设计的，DNS接口会自动屏蔽挂掉节点上的服务，HTTP API也认为挂掉节点上的服务不是passing的。\r\n\r\n鉴于Consul健康检查的这种机制，同时避免单点故障，所有的业务服务应该部署多份，并注册到不同的Consul节点。部署多份可能会给你的设计带来一些挑战，因为调用方同时访问多个服务实例可能会由于会话不共享导致状态不一致，这个有许多成熟的解决方案，可以去查询，这里不做说明。\r\n\r\n健康检查能不能支持故障转移？\r\n\r\n上边提到健康检查是由服务注册到的Agent来处理的，那么如果这个Agent挂掉了，会不会有别的Agent来接管健康检查呢？答案是否定的。\r\n\r\n从问题产生的原因来看，在应用于生产环境之前，肯定需要对各种场景进行测试，没有问题才会上线，所以显而易见的问题可以屏蔽掉；如果是新版本Consul的BUG导致的，此时需要降级；如果这个BUG是偶发的，那么只需要将Consul重新拉起来就可以了，这样比较简单；如果是硬件、网络或者操作系统故障，那么节点上服务的可用性也很难保障，不需要别的Agent接管健康检查。\r\n\r\n从实现上看，选择哪个节点是个问题，这需要实时或准实时同步各个节点的负载状态，而且由于业务服务运行状态多变，即使当时选择出了负载比较轻松的节点，无法保证某个时段任务又变得繁重，可能造成新的更大范围的崩溃。如果原来的节点还要启动起来，那么接管的健康检查是否还要撤销，如果要，需要记录服务们最初注册的节点，然后有一个监听机制来触发，如果不要，通过服务发现就会获取到很多冗余的信息，并且随着时间推移，这种数据会越来越多，系统变的无序。\r\n\r\n从实际应用看，节点上的服务可能既要被发现，又要发现别的服务，如果节点挂掉了，仅提供被发现的功能实际上服务还是不可用的。当然发现别的服务也可以不使用本机节点，可以通过访问一个Nginx实现的若干Consul节点的负载均衡来实现，这无疑又引入了新的技术栈。\r\n\r\n如果不是上边提到的问题，或者你可以通过一些方式解决这些问题，健康检查接管的实现也必然是比较复杂的，因为分布式系统的状态同步是比较复杂的。同时不要忘了服务部署了多份，挂掉一个不应该影响系统的快速恢复，所以没必要去做这个接管。\r\nConsul的其它部署架构\r\n\r\n如果你实在不想在每个主机部署Consul Client，还有一个多路注册的方案可供选择，这是交流群中获得的思路。\r\n\r\n如图所示，在专门的服务器上部署Consul Client，然后每个服务都注册到多个Client，这里为了避免服务单点问题还是每个服务部署多份，需要服务发现时，程序向一个提供负载均衡的程序发起请求，该程序将请求转发到某个Consul Client。这种方案需要注意将Consul的8500端口绑定到私网IP上，默认只有127.0.0.1。\r\n\r\n这个架构的优势：\r\n\r\n    Consul节点服务器与应用服务器隔离，互相干扰少；\r\n    不用每台主机都部署Consul，方便Consul的集中管理；\r\n    某个Consul Client挂掉的情况下，注册到其上的服务仍有机会被访问到；\r\n\r\n但也需要注意其缺点：\r\n\r\n    引入更多技术栈：负载均衡的实现，不仅要考虑Consul Client的负载均衡，还要考虑负载均衡本身的单点问题。\r\n    Client的节点数量：单个Client如果注册的服务太多，负载较重，需要有个算法（比如hash一致）合理分配每个Client上的服务数量，以及确定Client的总体数量。\r\n    服务发现要过滤掉重复的注册，因为注册到了多个节点会认为是多个部署（DNS接口不会有这个问题）。\r\n\r\n这个方案其实还可以优化，服务发现使用的负载均衡可以直接代理Server节点，因为相关请求还是会转发到Server节点，不如直接就发到Server。\r\n\r\n是否可以只有Server？\r\n\r\n这个问题的答案还是有关服务数量的问题，首先Server的节点数量不是越多越好，3个或者5个是推荐的数量，数量越多数据同步的处理越慢（强一致性）；然后每个节点可以注册的服务数量是有上限的，这个受限于软硬件的处理能力。所以如果你的服务只有10个左右，只有Server问题是不大的，但是这时候有没有必要使用Consul呢？因此正常使用Consul的时候还是要有Client才好，这也符合Consul的反熵设计。\r\n\r\n大家可以将这个部署架构与前文提到的普适架构对比下，看看哪个更适合自己，或者你有更好的方案欢迎分享出来。','',2,NULL,3,'yc','2019-03-09',NULL,NULL,'从2016年起就开始接触Consul，使用的主要目的就是做服务发现，后来逐步应用于生产环境，并总结了少许使用经验。最开始使用Consul的人不多，为了方便交流创建了一个QQ群（群号在最后），这两年微服务越来越火，使用Consul的人也越来越多，目前群里已有400多人，经常有人问一些问题，比如：\r\n\r\n    服务注册到节点后，其他节点为什么没有同步？\r\n    Client是干什么的？（Client有什么作用？）\r\n    能不能直接注册到Server？（是否只有Server节点就够了？）\r\n    服务信息是保存在哪里的？\r\n    如果节点挂了健康检查能不能转移到别的节点？\r\n',NULL,NULL,NULL,NULL,NULL),(26,'老干部',' 翟永超','http://blog.didispace.com/spring-cloud-alibaba-version/','Spring Cloud Alibaba与Spring Boot、Spring Cloud之间不得不说的版本关系 ','images/7.jpg','这篇博文是临时增加出来的内容，主要是由于最近连载《Spring Cloud Alibaba基础教程》系列的时候，碰到读者咨询的大量问题中存在一个比较普遍的问题：版本的选择。其实这类问题，在之前写Spring Cloud基础教程的时候，就已经发过一篇《聊聊Spring Cloud版本的那些事儿》，来说明Spring Boot和Spring Cloud版本之间的关系。\r\nSpring Cloud Alibaba现阶段版本的特殊性\r\n\r\n现在的Spring Cloud Alibaba由于没有纳入到Spring Cloud的主版本管理中，所以我们需要自己去引入其版本信息，比如之前教程中的例子：\r\n\r\n<dependencyManagement>\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.cloud</groupId>\r\n            <artifactId>spring-cloud-dependencies</artifactId>\r\n            <version>Finchley.SR1</version>\r\n            <type>pom</type>\r\n            <scope>import</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.cloud</groupId>\r\n            <artifactId>spring-cloud-alibaba-dependencies</artifactId>\r\n            <version>0.2.1.RELEASE</version>\r\n            <type>pom</type>\r\n            <scope>import</scope>\r\n        </dependency>\r\n    </dependencies>\r\n</dependencyManagement>\r\n\r\n而不是像以往使用Spring Cloud的时候，直接引入Spring Cloud的主版本（Dalston、Edgware、Finchley、Greenwich这些）就可以的。我们需要像上面的例子那样，单独的引入spring-cloud-alibaba-dependencies来管理Spring Cloud Alibaba下的组件版本。\r\n\r\n由于Spring Cloud基于Spring Boot构建，而Spring Cloud Alibaba又基于Spring Cloud Common的规范实现，所以当我们使用Spring Cloud Alibaba来构建微服务应用的时候，需要知道这三者之间的版本关系。\r\n\r\n下表整理了目前Spring Cloud Alibaba的版本与Spring Boot、Spring Cloud版本的兼容关系：\r\nSpring Boot 	Spring Cloud 	Spring Cloud Alibaba\r\n2.1.x 	Greenwich 	0.2.2（还未RELEASE）\r\n2.0.x 	Finchley 	0.2.1\r\n1.5.x 	Edgware 	0.1.1\r\n1.5.x 	Dalston 	0.1.1\r\n\r\n所以，不论您是在读我的《Spring Boot基础教程》、《Spring Cloud基础教程》还是正在连载的《Spring Cloud Alibaba系列教程》。当您照着博子的顺序，一步步做下来，但是没有调试成功的时候，强烈建议检查一下，您使用的版本是否符合上表的关系。\r\n推荐：Spring Cloud Alibaba基础教程\r\n\r\n    《Spring Cloud Alibaba基础教程：使用Nacos实现服务注册与发现》\r\n    《Spring Cloud Alibaba基础教程：支持的几种服务消费方式》\r\n    《Spring Cloud Alibaba基础教程：使用Nacos作为配置中心》\r\n    《Spring Cloud Alibaba基础教程：Nacos配置的加载规则详解》\r\n    《Spring Cloud Alibaba基础教程：Nacos配置的多环境管理》\r\n    《Spring Cloud Alibaba基础教程：Nacos配置的多文件加载与共享配置》\r\n    《Spring Cloud Alibaba基础教程：Nacos的数据持久化》\r\n    《Spring Cloud Alibaba基础教程：Nacos的集群部署》\r\n\r\n该系列教程的代码示例：\r\n\r\n    Github：https://github.com/dyc87112/SpringCloud-Learning/\r\n    Gitee：https://gitee.com/didispace/SpringCloud-Learning/\r\n','',4,NULL,2,'zz','2019-03-09',NULL,NULL,'这篇博文是临时增加出来的内容，主要是由于最近连载《Spring Cloud Alibaba基础教程》系列的时候，碰到读者咨询的大量问题中存在一个比较普遍的问题：版本的选择。其实这类问题，在之前写Spring Cloud基础教程的时候，就已经发过一篇《聊聊Spring Cloud版本的那些事儿》，来说明Spring Boot和Spring Cloud版本之间的关系。\r\nSpring Cloud Alibaba现阶段版本的特殊性\r\n\r\n',NULL,NULL,NULL,NULL,NULL),(27,'老干部','','',' 网易首页 > 网易科技 > 互联网 > 正文 特斯拉是要闹哪样？将冻结此前的关店和裁员计划 ','images/2.jpg','**从上周开始，特斯拉大幅削减了零售员工的薪酬，并开始关闭第一批门店。知情人士透露，特斯拉目前已经关闭了美国和加拿大首批29家门店。据估计，数百名员工已被解雇，并获得了遣散费。**\r\n\r\n特斯拉销售管理部门今天早些时候与地区管理部门举行了电话会议，他们告诉零售员工，特斯拉将冻结此前的关店和裁员计划，直到本月底再行通知。\r\n\r\n有些没有关闭的门店上周被告知，将停止预订试驾。但它们今天被告知，一切业务恢复正常，但零售员工没有佣金和奖金，这导致他们只能获得更低的薪酬。\r\n\r\n据消息人士称，许多零售经理将这种冻结转型描述为“证明自己的机会”。尽管如此，由于大幅减薪，许多员工正在离职。有些员工表示，他们怀疑特斯拉正在延长过渡期，并削减他们的工资，以便把他们赶出去，这样他们就不用支付遣散费。\r\n\r\n当被问及这一情况时，特斯拉拒绝置评，并重提了此前发布的、关于转向在线销售的博文。马斯克在博文中写道，特斯拉将需要“几个月”的时间才能将大部分销售活动转移到网上。','#科技#',4,NULL,4,'yc','2019-03-09',NULL,NULL,'原标题：Tesla temporarily freezes store closures and layoffs in chaotic sales strategy change）网易科技讯3月9日消息，据Electrek报道，电动汽车制造商特斯拉正在进行一场混乱的销售战略转型。现在员工们被告知，该公司将冻结目前的门店关闭和裁员计划，至少要到本月底才会采取新的行动。',NULL,NULL,NULL,NULL,NULL),(41,'老干部','心柔','http://www.duwenzhang.com/wenzhang/renshengzheli/ganwu/20181019/395166.html','余生，请善待自己的父母','images/8.jpg','> 生命来来往往，来日并不方长。时光如水流逝，岁月无声催老。每一天，都过得忙忙碌碌，每一天，都有不同的精彩。春花秋月，夏雨冬雪，走过了一程又一程，蓦然回首，便已是上有老下有小的年纪。\r\n\r\n###### 曾经年少，不解父母辛劳，一路成长，一路依靠。所谓养儿方知父母恩，为人父母之后，自己如何操劳，如何不易，唯有经历过后，才知其中艰辛。这世上，从来就没有什么感同身受，唯有亲身经历，才能深解其味。\r\n\r\n###### 　　人生，就是一场轮回，年轻的时候，谁不为子女奔波劳累，待到子女羽翼已丰，不再需要护佑之时，自己已是夕阳暮景。而那些曾经的子女，也会成为新的父母，一如自己的父母那般，勤勤恳恳，为自己的子女操劳负累，待到子女再次长成，自己便也老去。\r\n\r\n###### 　　谁都有年迈之时。幼时，父母耐心教导，周全照料，待到父母暮年，我们是否也能如同曾经他们对待我们那般，不嫌不怪，周全仔细，用心侍奉。\r\n**人生，总是吃过生活的苦，才知道幸福有多甜蜜；走过太多弯路，才明白自己要怎么活。衡量幸福的标准，不是你得到了多少，而是要看你当下拥有多少，并且，要懂得珍视。**\r\n\r\n　　在这个世界上，父母，是唯一尽心付出却不求回报的人，也是最不愿意给我们添麻烦的人。都说，做父母是有有效期的，其实，做儿女又何尝不是？子欲养而亲尚待，绝对是上天给予的最大恩赐。趁父母还年轻，趁父母还健在，多陪陪他们吧。不要整天只知道在朋友圈说什么父母在，人生尚有来处，父母去，人生只剩归途。多拿出些实际行动，去做，去实现。\r\n\r\n　　不要总说自己没时间，真正没时间的不是我们，而是那一天比一天更加老去的父母。他们内心的孤独，对子女的渴盼，以及在那岁月深处，面对迟暮的恐慌，才是最需要我们抓紧时间去慰藉的。\r\n\r\n　　老人的那一代，远不及我们现在条件好，但不论怎样，他们依旧护我们健康茁壮的成长。而今，他们逐渐年纪大了，不要觉得反正也老了，凡事就给他们凑合。正因为老了，来日并不方长了，所以才更应该尽自己所能，给他们创造一些好的生活质量。\r\n\r\n　　少一些玩手机的时间，多给父母买一件像样的衣服；少一次聚会的时间，多陪父母说说话。他们想要吃什么，就给他们买点什么，不要舍不得，不要怕花钱，只要老人健康，不生病，光他们那点吃喝穿戴，又能花得了多少钱。有空的时候，也给父母安排一次说走就走的旅行，去他们想去的地方，看他们想看的风景，完成他们未完成的心愿，满足他们一直想要的渴求。\r\n\r\n　　不要觉得父母还有健康的体魄，闲暇的时间，就觉得他们还应该为我们做些什么。带孩子，收拾家，麻烦这些事情我们自己来做，老人已经辛劳了大半辈子了，熬盼了多久，才能熬到如今子女已长成，工作也已功成身退的光景。他们也需要一点时间为自己而活，他们也需要好好的享受一下自己生命的光彩，不论成与败，他们将我们抚育成人，就是最大的成就。\r\n\r\n　　很多事情，都是拥有的时候，不疼不痒毫不在意，失去了以后才知道珍惜，追悔莫及。当白发换走青丝，当皱纹刻于脸颊，才突然惊觉，原来父母，已然老去。幸好，已经发现，一切还算来得及。\r\n\r\n　　不要计较父母曾经偏爱了谁，做错了什么，付出了多少。尽孝这件事，不需要任何条件和理由，只管做自己就好。善待老人，就是善待明天的自己。多少年以后你就会发现，善待老人，不光是一种报恩，更是对自己内心的成全。\r\n\r\n　　完美人生，不是要得到别人的喝彩，而是要活出自己的精彩。不是要成就多少，而是要不留遗憾。余生，请活好自己，更请善待老人，你便此生无憾。\r\n\r\n\r\n','#人生感悟#',1,NULL,6,'zz','2019-03-09',NULL,NULL,'生命来来往往，来日并不方长。时光如水流逝，岁月无声催老。每一天，都过得忙忙碌碌，每一天，都有不同的精彩。春花秋月，夏雨冬雪，走过了一程又一程，蓦然回首，便已是上有老下有小的年纪。',NULL,NULL,NULL,NULL,NULL),(42,'老干部','心若雨汐 ','http://www.duwenzhang.com/wenzhang/aiqingwenzhang/ganwu/20180918/394279.html','不想结婚的姑娘 最后大多嫁给了爱情','images/5.jpg','# 一、我应该嫁给爱情么？还是嫁给现实\r\n曾有个密友问我，她说：“亲爱的，女生到底是应该嫁给爱情，还是嫁给现实呢？嫁给现实，无非就是自己少奋斗几年。而后用10数年的时间去后悔。不过这么说也算牵强，身边不乏些嫁给现实的朋友，在柴米油盐的生活中不仅慢慢习惯上了对方的存在，那种习惯略带些依赖的味道，并在长此以往的依赖中得了一种病，药石无医-懒癌晚期。”\r\n\r\n　　她说自己最近认识了一个男生，对方有车有房有存款，只是自己对他不曾看对眼。\r\n\r\n　　我说；“既然你不喜欢他，那为何要纠结呢。你有没有想过另一半是陪伴你走完一生的人。不喜欢不如直接回绝了人家，两不耽误，各自再找。而你又有赚钱的能力，嘴上总是挂着靠人不如靠己的字眼，既然不靠对方经济补给，那结果自然明了。后来我听说，她之所以苦恼，全因母亲的一席话。\r\n\r\n　　“什么都比不上有个属于自己的家不是么？感情都是可以慢慢培养的。在我们那个年代基本上都是亲朋好友给介绍，见见面走个过场便走在一起水到渠成。哪有那么多矫情，见怪不怪的。甚至我的上一辈还是受父母之命呢，爱情有用么，穷苦夫妻百事哀。就算你们之间的爱情浓烈到坚贞不渝也终会为现实所败，巧妇难为无米之炊。你看你你表姐跟着另一半满世界的旅行，你不眼气么？”为人父母，大都喜欢这样教育子女。父母不是你感情经历的亲身体验者，因此他们有时候抛出的观点，直观理性但又武断片面。“不听老人言，吃亏在眼前。“然而，对于爱情我从来都是借鉴些我认为对的地方，并不会全盘吸纳。\r\n\r\n　　有房又如何？房子没法给我这种人安全感。现实世界中我很理性，我清楚自己要的什么。然而当我遇上喜欢的人，我是很感性的。没有爱作为精神纽带的婚姻我觉得索然无味。人活一世不过3万多天，人生苦短，不容后悔。\r\n\r\n　　如果你是个“圣斗士”或许你的家人即便知道你心不属他，可仍旧会强撮合，只因这个对象他们看着还不错，又怕你错失了他“你找不着怎么办”。但我想劝叔叔阿姨一句：“古话说的好，强扭的瓜不甜。”我想对那些如闺蜜般夹杂其中，不停苦恼的女孩说一声：“你有追求幸福的权力，选择权只在你自己手里，别人的话只能是参考，如果你并不认为那是对的，让他如云烟般路过就好。别人不是你，不会有你的感同身受。当事人以外的人的话语多少带有些片面的意味。”\r\n\r\n　　说到这，我同那位朋友的观点默契的达成一致，好的感情，你是我的，我是你的。而我们又都是属于自己的。感情在于沟通，沟通的首要前提便是有话聊，你们可以有不同的爱好，但尊重、接受便好。你们之间的交流是否可以由浅入深，是否带有营养。并在某种程度上达成统一，这才是关键。三观不同的人同处同一屋檐，你们对周遭审度不同，再好的感情基础也是白费。更何况你们也不具有共同的感情经历。好的感情是彼此间的信任、是我们之间有同进步共患难的决心，而不是空有一个能够躲雨的巢穴，心与心之间毫无交流。即使你终究败给现实，想象一下当你每天对着一个无话聊的人，那种尴尬叫做无奈。\r\n\r\n　　有温度的才叫家，没温度的叫住所。说的难听些，你走后就连这个住所中的一砖一瓦都带不走，还跟我谈什么曾经拥有。\r\n\r\n　　你是嫁给爱情，还是嫁给临时住所呢？对相爱的人来说婚姻是神圣的殿堂，而不爱的，那叫坟墓。\r\n\r\n\r\n# 二、我爱你，更爱与你在一起时我的样子\r\n我曾在网上看到这样一个案例， 通读过后，我为男女主人公间的爱深深折服。这是一对恋人，他们结婚的时候没有车、房，吝啬的就连仪式、亲朋间的祝福都没有。然而女孩并没有后悔，她说：“年轻的时候反而不懂爱情，只是想简单找个对自己好的人。他对我好，所以我嫁了。\r\n\r\n　　“刚刚恋爱的那段时间，他们住在廉价的出租房，挤狭小的卫生间，拿着微薄的工资，过着青黄不接的日子。她说：”最难熬的日子，我们都一起度过了。“结婚十年，她事业稳定，她老公的事业也蒸蒸日上。两个人不光在市区买了房子，男人得到了女人家里的认可。其实幸福从来都来得好不容易，两个人在一起十多年，早就把两个人的生活过成了一个人。\r\n\r\n　　女人说：“自己动手，丰衣足食。”男人却说：“为了心爱的人再苦再累都无所谓，每天拖着疲惫的身子看着她系着围裙站在厨房面带微笑的做着晚餐，那一刻我觉得自己是世界上最幸福的人。“男人时常觉着自己欠妻子一个仪式，于是偷偷的在十周年那天精心布置了一场迟来的求婚仪式。\r\n\r\n　　她未曾想这场惊喜这么突然，虽然这一天在她意料之中，结果还是被感动得一塌糊涂。然好事刚过。坏事便接踵而来，婚后不久她经历了一场严重车祸，这次车祸给她造成了片段式的失忆是永久性的。包括她的父母，朋友，这些张熟悉的面孔一一从她的世界彻底删除。那些天只要她清醒过来，便不断向身边人求助，“我要找我老公”本能的情感依赖，其实就是一种深爱。\r\n\r\n　　这份深爱是我忘却了世界，唯独忘不了你。你看我即使忘记了我们的一二事，我还是绝对信任你啊。他说：“只要她能醒过来，忘记就忘记吧，不管她变成什么样子，我依然爱她。大不了，我们重新开始，从我叫什么开始。\r\n\r\n　　只要她还活着，我们还有大把的时间足够我们再好好爱一回。“那之后，他日夜守在医院里陪伴她，这期间他的朋友不是没出过劝他再找的主意，他狠狠的说：”再说这样的话，绝交。世上好女孩万万千，我爱的只有这一人。“\r\n\r\n　　好的爱情大抵就是这个样子，不论你变成什么样子，我都欣然接受，依然爱你。夫妻本是同林鸟，大难临头各自飞。在好的爱情面前这条定理并不受用。\r\n\r\n\r\n# 三、阿娇结婚：谢谢你出现，我还以为遇不到你了\r\n好的爱情会迟到，但它从不曾缺席。在不爱你的人面前我懂得了生活艰辛、学会了迎着风雨奔跑。在爱你的人面前，你明白了爱的真谛。可能爱情就是，有人曾深深地伤害过你还一笑而过。于是，你失望了，你觉得好像整个世家都抛弃了你，你觉得自己存在的本身就是天大的笑话。然而直到另一个人的出现，他用自己的行动告诉你他爱你，他不在意你有怎样的过去，就算你很糟糕，他爱的恰好就是此刻站在眼前那个最糟糕的女孩。你不用很好，我爱你便好。\r\n\r\n　　如果说生活曾带给你各种各样的亏欠，那么请相信总有一个人会弥补生活带给你的全部亏欠。\r\n\r\n　　即使世界荒芜了，也要相信总有一个人会是你的信徒。不论你是好是坏，也不管你是谁，你都是我的信仰。\r\n\r\n　　阿娇结婚了，穿着抹胸婚纱的她，光彩照人，那一天她是这个世上最美的女人。她也终于验证了自己歌里的那句话：最后变天后，变新娘，都是理想。\r\n\r\n　　想起阿娇曾经唱过的那首《下一站天后》，里面有一句话跟她的爱情观很契合：“其实心里最大的理想，跟他归家为他唱。“\r\n\r\n　　阿娇曾说，她要找一个很帅的男人结婚，艳照门事件后，她开始忽略颜值。阿娇曾失声痛哭的说，再没有人会娶我。在那段时间里，仍旧有人喜欢她、慢慢爱上她。只是，从未有人想过给那个看似坚强而内心深处总是敏感而受伤的女孩一个未来。\r\n\r\n　　对于一个相信爱的女孩来说：我可以接受你的不完美，我可以接受把我仅有的面包分一半给你。但我最怕的是无论我付出多少，怎样付出。都打动不了你。你描绘的那个未来很美，只是多余一个我。\r\n\r\n　　时间兜兜转转，27到37，一个女人最好的黄金年龄已然过去，如果换作意志不坚定的女孩或许早就不等了，可这个人偏偏是阿娇，我曾看过一期阿娇的专访，30多岁的她谈及那场遭人唾弃的爱恋，她的眼圈还是会泛红。泪水的含义或许更多的还是放不下吧。\r\n\r\n　　我给了你一颗心，一颗纯粹赤诚的爱你的心，后来你走了，我发现我的心空荡荡的。好像少了点什么。\r\n\r\n　　今年五月，阿娇结婚的消息一度上了热搜。阿娇找到了一个很帅的男人，没有复杂的情史，也不会计较她的过去。只是单纯的想和她走完一生。他给了她一场浪漫的婚礼，让她如愿做上最美的新娘。婚礼上，致词讲到：“走到今天好不容易…”时，阿娇哭得很厉害，然最先流泪的不是阿娇，而是那个很爱她的男人。\r\n\r\n　　他笑着告诉她，娶到你真好。终于等到你，还好我没有放弃。\r\n\r\n　　爱是什么，爱就是在对的时间遇到对的人，而错误的时间里，你付出爱的那个人终究是浮云自眼前一过。幸好，你即使遍体鳞伤也也依然愿意相信爱。\r\n# 四、好的爱情，是你可以做自己，简单而美好\r\n我觉得一段感情好不好，在女孩子身上就能体现的出来。一个女孩子自信幽默，举止落落大方，那她的身后肯定有一个愿意宠她、疼她的人。这个人用自己的行动去保护她本脆弱的自尊心。所以她说话做事的时候才不会畏手畏脚，踌躇不前，更不会为了一件事像一个神经病一样患得患失。\r\n\r\n　　其实世界上好的爱情就是这样的，对错不重要，只要有爱，就会有偏袒去宠着。爱给你一个支点，让你宽容温和的去面对这个并不完美的世界。\r\n\r\n　　就如张小娴说的那样：你要等对的人的时候，自己可能也不知道怎样才是对的人，只有当那个人出现，你才会知道，他应该就是那个对的人，他在你生命中出现，也是为了满足你，也让你去完善自己。\r\n\r\n　　嫁给爱情的女孩大多在接受爱的同时，学会了奉献爱，她们懂得付出和包容，并设身处地的为另一半未雨绸缪。她们往往戒掉了本身自带的小脾气，变得温和从容、平易近人。如果你发现一个女人如泼妇般骂街，哪怕一件微不足道的小事都要斤斤计较，锱铢必较。我想或许是她过得不够好吧。\r\n\r\n　　也许会晚点遇见你，无论你是二十岁还是三十岁，但我仍坚信，那个爱我、懂我、惜我的人会穿越人海，只为给我一个爱的港湾。在这之前，你要做的就是善待自己，让自己试着独立、拥有一个不依赖旁人的独立人格，答应我，好吗？\r\n\r\n　　心若雨汐：你还相信爱吗？不过，我是一如既往的相信着，等待着。\r\n','#爱情故事#',1,NULL,6,'zz','2019-03-09',NULL,NULL,'曾有个密友问我，她说：“亲爱的，女生到底是应该嫁给爱情，还是嫁给现实呢？嫁给现实，无非就是自己少奋斗几年。而后用10数年的时间去后悔。不过这么说也算牵强，身边不乏些嫁给现实的朋友，在柴米油盐的生活中不仅慢慢习惯上了对方的存在，那种习惯略带些依赖的味道，并在长此以往的依赖中得了一种病，药石无医-懒癌晚期。”',NULL,NULL,NULL,NULL,NULL),(43,'老干部','笔砚先生  ','http://www.duwenzhang.com/wenzhang/youqingwenzhang/20180213/385395.html','如果我死了·若是有来生','images/3.jpg','> 很久都不曾写过文章了，上一篇文章还是四个月之前的。以此去命题，并非有什么轻生的念头，只是有感而发，勿念。其实我很想做个自私的人，因为这会让你吃尽苦头又吃足了甜头。而你却依然活的天真活的开心——序。\r\n\r\n如果我死了\r\n\r\n　　如果我死了，那些愧对我的人会很开心：终于不用还钱了，哎呀，不然真不知道怎么办那，不敢见他，吓得我朋友圈都不敢发了！不对，我这样的人怕他干嘛？反正也不能把我怎么样。我每天活的多潇洒，灯红酒绿左拥右抱的。怕他干嘛，我是没错的，我怎么能委屈自己那？我要活的开心就不能在乎那么多，人这一辈子就是有舍有得，凭自己本事借的钱为什么要还？——不用还。\r\n\r\n　　如果我死了，那些我曾追求的人会很开心：每天烦我，我怎么知道喜不喜欢他？可能喜欢吧，可能不喜欢？无所谓了反正他都死了。哎呀，他一死去，就没人对我嘘寒问暖请我吃饭了，没人每天担心我了！算了，毕竟我这么漂亮，比不上明星也有自己的亮点，还会有下一个傻子不顾一切追求我的。可下一个人什么时候出现那？这么想来我还是亏本的啊，我怎么能做亏本的买卖——不能！他要是不死去多好，还能多一个追求者！我不喜欢他，我只是喜欢他追我无条件对我好，我这么做是有道理的，哪个人是不渴望被人爱的孩子那？我还是个孩子啊，我渴望人爱我追求我不图回报的对我好，我接受他的好有错吗？我是没错的？——恩。\r\n\r\n　　如果我死了，那些高谈阔论肆无忌惮吹牛逼的人会心头一震：他怎么死了？他不能死啊，他一死没人听我吹嘘了。我那些“丰功伟绩”辉煌历史，我那些绝地反击的故事跟谁炫耀啊？我曾经多么励志，我曾经多么孝顺，我曾经多么受人尊敬我曾经多么爱家人爱工作啊！他不能死，他死了谁听我吹嘘？不行，我还得再找个人！他死了，唉，他死了我英雄无用武之地，他死了我怎么展现给大家一个“君子好汉”的形象啊？不行，多亏他死了！他不死真求到我怎么办，那我是不是要兑现我说的力所能及尽力而为？我只是随口一说啊，虽然我这么完美，可他不该当真的啊——不该当真的。\r\n\r\n　　如果我死了，那些争夺我遗产的人会很兴奋：什么？他死了，他真的死了？他真的死了！哈哈！他死了！他真的死了！我想想，这样我就可以买个车，换个大点的房子，还能吃点不舍得吃的，去些平时消费不起的场所，早点死多好，何必等到现在那，人终有一死。不如成全我了，毕竟他这么无私，祝他上天堂哈哈！我谢谢他。不，我该恨他，怎么不早点死？愿他下地狱！我只是为了自己过得好一点，我每月赚几万块多吗？油价这么贵，海鲜这么贵，还得平时喝个酒旅个游，我还会有孩子，哪里不是开销的地方，我活的这么悲惨只是为了让自己过得好一点，我没有错，谁不想让自己过得好一点！他会尊重我的自私？——恩，他一定会的。\r\n\r\n　　如果我死了，那些垂涎于我爱人的会很激动：妈的，终于死了！这王八蛋！盼星星盼月亮终于死了。早点死啊，他那老婆可馋死我了，那身材，那大白腿，想想都过瘾！这下子我就不用害怕了，妈的，他活着我也不怕！这下子我就不用偷偷摸摸的了，妈的，他活着我也不怕！这下子我就不用跟他称兄道弟了，妈的，他活着我也不想跟他称兄道弟！占着茅坑不拉屎，凭什么那么漂亮的女人要跟他受罪？他那活的还算个人了？哪里比得上我，能让这女人吃香的喝辣的，马桶都是镀金边的！为什么不是金边的？金边的得多少钱，有那个钱找什么样的没有，我还用得上盼着他死？他这一死我也算做点好事，不然这么年轻守了寡还得改嫁，万一改嫁的是奔着她那张脸那个身材的人那。我这算是做点好事，给自己积德了，他应该谢谢我的！为什么我这么无私奉献那——妈的，老子一直就这么无私啊！\r\n\r\n　　如果我死了，那些我能帮助的人会很伤心：他怎么能死那？他怎么能死那！他死了谁帮我工作，他死了谁帮我做那些别人不愿做的事？他不能死他不能死！算了，死了就死了，我抓紧找下一个人吧。唉！他死了谁体现我的社会价值啊，他死了我怎么奔赴我的需求我的追求！他这就死了，我很伤心。曾经有那么个人可以帮我买东西的时候省钱，可以帮我去打架，可以难过的时候陪我喝酒，开导我听我倾诉，他怎么可以死！我恨他，我是不是该恨他？没错，我应该恨他，不说一声就死了。我恨他——这么不负责的人我恨他！\r\n\r\n　　如果我死了，那些朋友圈的高大上会埋怨我：他死了？那谁给我评论，谁给我点赞！我那些修过的照片，丰盛又廉价的美食小视频，盗的风景艺术图片谁给我评论，谁来展现我的品位我的生活。他怎么可以死，那谁来当我的仰慕者，谁来做围观群众，谁来发出一声哇塞！死了！算了，死了就死了吧。别问为什么——我这么高大上的人在乎个市井小民干嘛。\r\n\r\n　　 若是有来生\r\n\r\n　　若是有来生，我要做一个聋子。\r\n\r\n　　做一个聋子。我不想听那些废话，不想听失恋后的抱怨：我分手了，好难受，她那么漂亮，我想睡她！她那么善解人意，我想跟她过一辈子，可我没钱！努力，算了，太累了。\r\n\r\n　　做一个聋子。我不想听那些废话，不想听贫穷时的恳求：你帮帮我，我真的可怜，我真的走投无路！你不能不帮我，我们是朋友，我是什么样的人你知道的！还钱？算了，我缺钱你是朋友怎么能逼我！你知道我是什么样的人，有钱会不还你？——抱歉，我真的不知道你是什么样的人！\r\n\r\n　　做一个聋子。我不想听那些废话，不想听冠冕堂皇的仁义：你对我不仁我不能对你不义，虽然你对我不仁，但你是我朋友你是我亲戚你是追我的人，你那么那么孝顺那么那么善良那么那么义气那么那么钟情！尽管你对我这般如此，如此这般。但我还是念你的好！所以我不能借你钱看你堕落，不能帮助你看你不自己努力，不能接受你看你开心，因为我怕你得意忘形啊！\r\n\r\n　　因为我是个聋子，所以别对我说废话。\r\n\r\n　　若是有来生，我要做一个哑巴。\r\n\r\n　　做一个哑巴。我不想说那些违心话，不想说：因为我们是兄弟，好吧！\r\n\r\n　　做一个哑巴。我不想说那些违心话，不想说：因为我爱你，好吧！\r\n\r\n　　做一个哑巴。我不想说那些违心话，不想说：因为你是领导，好吧！\r\n\r\n　　因为我是个哑巴，所以我说不出逆来顺受，但我懂得己所不欲，勿施于人。\r\n\r\n　　若是有来生，我要做一个瞎子。\r\n\r\n　　做一个瞎子。我不想看那些悲哀，不想看公交上：你就给老人让个座怎么了，年轻立壮凭什么不让座，你还是人吗，爹妈怎么教的！\r\n\r\n　　做一个瞎子。我不想看那些悲哀，不想看大街上：我和他只是朋友，我们什么都没有，你别多想我还是爱你的。我不爱钱我爱你！……？。\r\n\r\n　　做一个瞎子。我不想看那些悲哀，不想看工作上：张三你说，这地球是方的还是圆的？张三顶着黑眼圈穿着没洗的衬衫吃着剩饭来到单位奉上笑脸说“方的方的，嘿嘿肯定是方的”！\r\n\r\n　　做一个瞎子。我不想看那些悲哀，不想看马路上：行行好吧，给点钱，好人一生平安，差五元车费回家。唉，这现在傻子少了，五块钱都舍不得我这豪车怎么加油！\r\n\r\n　　做一个瞎子。我不想看那些悲哀，不想看马路上：行行好吧大哥：我孩子真的好几天没吃饭了，求求你了求求你了！滚！孩子睡吧，睡着了就不饿了。\r\n\r\n　　若是有来生，莫要虚度光阴。\r\n\r\n　　如果我死了，愿以警醒世人。\r\n\r\n　　昏黄的路灯洒落一片片昏黄，如果一个人自愿高楼坠下，算自杀吗？算吧。——自杀究竟是一个人杀了自己，还是所有人杀了他一个人而已？\r\n','#友情#',1,NULL,6,'zz','2019-03-09',NULL,NULL,'很久都不曾写过文章了，上一篇文章还是四个月之前的。以此去命题，并非有什么轻生的念头，只是有感而发，勿念。其实我很想做个自私的人，因为这会让你吃尽苦头又吃足了甜头。而你却依然活的天真活的开心——序。',NULL,NULL,NULL,NULL,NULL),(44,'老干部','孟婷1234','http://www.duwenzhang.com/wenzhang/lizhiwenzhang/20180518/388882.html','三十多岁，如何打理尴尬年龄里的凌乱人生','images/6.jpg','> 三十岁是一个分水岭，一边是骄阳似火、山花烂漫的绚丽青春，一边是蝇营狗苟、满地鸡毛的凌乱人生，曾经的热血青年已经成为端着保温杯泡着枸杞的中年大叔。\r\n\r\n　　*三十岁是一扇门，门里面是此时的平淡安逸，门外面是未知的挑战与激情。看到众多招聘广告的年龄要求——三十五周岁以下，有一种莫名的恐慌，然后暗自庆幸自己还有一份工作。*\r\n\r\n　　三十岁是一道鸿沟，90后、00后的小孩们兴致勃勃地聊着跑男的情景恰似当年的我们对《流星花园》的执迷狂热，我们所说的责任、信念、三观等在他们看来不可思议。父辈们劝我们平安是福、知足常乐，而内心深处却住着一个倔强不屈、勇于挑战的自己。\r\n  三十岁是个岔路口，一边是安逸舒适的人生之路，就像温水中的青蛙，沉浸在一成不变、波澜不惊的生活中不能自拔，最终失了跳出去的斗志和勇气；另一边道路泥泞、弯曲、充满坎坷、前途未卜，机遇与挑战激励着我们不断成长进步，一路上感受着探索未知世界的乐趣。\r\n\r\n　　三十岁是人生中的一个转折，棱角分明、意气用事、口无遮拦、锋芒毕露被圆融世故、深思熟虑、谨言慎行、韬光养晦所代替；曾经追求生活品质热衷于名牌的我们觉得购买打折、促销商品有失风度，现在竟为秒杀到一件根本用不上的物品而欣喜不已；为维护自己的权益与商家据理力争，有时候也和买菜的小贩们调侃几句，发发牢骚，这就是所谓的中年油腻人生吗？ \r\n\r\n　　三十多岁，如何打理尴尬年龄里的凌乱人生？\r\n\r\n　　开始反思以前的生活，在反思中成长。\r\n\r\n　　三十多岁在工作、结婚、生子之后人生的雏形基本形成，当享受着日复一日的安逸闲适，突然发现年少时的学霸们已经在一个在众人不可企及的高度上继续攀爬，我开始怀疑人生了，比我们更优秀的人如此拼命，我们有什么理由故步自封、混沌度日呢？\r\n\r\n　　想起曾经年少无知虚度的光阴，想起在人生紧要关头错过的机遇，悲从中来。\r\n\r\n　　生活已经够安逸了，为什么还要在安逸中不思进取呢？在还可以努力的年龄里尽力拼一把，不要给人生留下遗憾。\r\n\r\n　　反思让我们清醒自己的现状，也让我看清以后要走的路，人格在反思中得以重构，思维在反思中明晰，个体在反思中脱胎换骨。\r\n\r\n　　《我的前半生》中为爱牺牲甘愿做家庭主妇的罗子君在遭遇婚变后，在痛定思痛的反思之后开启了崭新的人生。\r\n\r\n　　做人生的减法，根据自己的特长，选择那个最靠谱的目标。\r\n\r\n　　追求完美的我也曾给自己定了很多目标，总是在坚持了一段时间以后就放弃了，家里的跑步机成为晾衣服的最佳工具，买的书籍早已积上了厚厚的尘土……生命就一次次陷入这样的恶性循环：\r\n\r\n　　确立目标——斗志满满满 ——缺乏自制力、外在诱惑而放弃——痛下决心——再次确立目标\r\n\r\n　　树立太多的目标、兼顾太多反而会顾此失彼，三十多岁开始做人生的减法，在每个阶段确立一两项可行的、可发挥自己所长的目标然后坚持下来\r\n\r\n　　董明珠在35岁以后专注空调销售业务，以自己的死缠烂打和执着坚韧谱写了销售界的神话。\r\n\r\n　　持之以恒将一件事情做到极致的人是人生的赢家。\r\n\r\n　　那么确立目标之后怎样有效地坚持下来呢？半途而废源于缺乏强大的动力支持，朋友说她才开始跑步的那几天，每天跑完五公里后肌肉酸痛、身心疲惫，是什么让她支撑下来的呢？每次快要放弃的时候，像勾践卧薪尝胆，她默默地问自己：“你忘了曾经被当众嘲笑肥胖的耻辱吗？”，“一雪前耻”是她坚持的动力，多少次在别人的酣梦中她离开温暖的被窝，两年多的坚持带给她意想不到的人生收获。\r\n\r\n　　坚持总会伴随着突然的改变带来的阵痛与不适，这是正常现象，给自己找一个坚持下去的动力，回忆自己曾经因为坚持获得成功或者因为半途而废而错失良机的经历，或者给自己树立一个积极向上的榜样。就像母亲痛苦的分娩换来的是新生命的诞生，挺过生命状态改变之初这段最难熬的日子，坚持就成为了一种习惯，当习惯成为生活的常态，我们将会收获不一样的人生。\r\n\r\n　　缓解压力，学习一些缓解不良情绪的方法。\r\n\r\n　　我们努力在资历深厚的前辈和势头正猛的90后之间争得一席之地，孩子的教育、父母日渐衰老的身体需要我们承担起应有的责任来，看到别人家的孩子在周末努力学习着各种本领，感受着逢年过节相聚时充斥着的攀比、炫耀，品尝着生活的酸甜苦辣，我们眉头紧锁、焦虑不安，这些无形的压力正在考验着我们敏感脆弱的内心，不由地感慨：人到中年百事哀。\r\n\r\n　　三十多岁，要学会正确宣泄自己的不良情绪，在运动、音乐、冥想中让自己紧绷的神经得以放松，身心做一番休憩之后再继续上路。\r\n\r\n　　抛掉不切实际的幻想，为可以触摸到的现实而努力。\r\n\r\n　　我们喂马、劈柴，为粮食、蔬菜担心，用心经营着工作、生活，但不会冲动之下为诗和远方远走他乡，我们深知自己肩负的各种责任，而这些责任让我们的人生变得深刻。\r\n\r\n　　把工作当成提升历练自己的平台，30岁以后，要开始积累经验、能力、知识、人脉之类的东西，远离七嘴八舌、说长道短，在单位里每个员工身上都有值得学习的闪光点，做到博采众长不断完善自己，为实实在在可触摸到的东西努力才是值得的。\r\n\r\n　　珍惜和家人在一起的时光，放下手机，带老人孩子出去散心，哪怕是不咸不淡的聊天，不要用口头的承诺代替实际的陪伴，因为岁月匆匆，经不起太多的等待。\r\n\r\n　　利用好自己的业余时间，抛掉无用的社交。\r\n\r\n　　在这个世界上，无论你多么优秀，总有人喜欢你，也有人不喜欢你，所以不必讨好每一个人。三十岁之前为了保持合群的状态，我们总是削尖脑袋钻进那一堆聊天、嗑瓜子的人群之中，现在我们即使游离在众人之外却并不感到落寞。\r\n\r\n　　与其让生命的能量在虚情假意地应付无关痛痒的社交中慢慢流失，不如去拿起专业书籍提升自己的业务能力，或者是在知识的海洋汲取人生的精华，感悟生命的真谛。\r\n\r\n　　业余时间可以造就一个人，也可以毁掉一个人。\r\n\r\n　　工作之余把别人用来刷屏、谈论八卦的时间用于学习会收到意想不到的效果：手机里存上一本书籍，在等待孩子上兴趣班的时间可以看一看；如果时间允许可以步行上下班，锻炼身体的同时顺便对当天的生活做一番规划或者总结；抽空查看一下最近的消费明细，做到心中有数，减掉不必要的支出，学习一些实用的理财技巧让财富增值，利用好碎片化的时间人生会有意想不到的收获。\r\n\r\n　　三十多岁，把握机会、用心经营、努力付出的你会收获不一样的精彩人生。\r\n\r\n','#励志#',1,NULL,6,'zz','2019-03-09',NULL,NULL,'三十岁是一个分水岭，一边是骄阳似火、山花烂漫的绚丽青春，一边是蝇营狗苟、满地鸡毛的凌乱人生，曾经的热血青年已经成为端着保温杯泡着枸杞的中年大叔。三十岁是一扇门，门里面是此时的平淡安逸，门外面是未知的挑战与激情。看到众多招聘广告的年龄要求——三十五周岁以下，有一种莫名的恐慌，然后暗自庆幸自己还有一份工作。\r\n',NULL,NULL,NULL,NULL,NULL),(45,'老干部','yyyy0101','http://www.duwenzhang.com/wenzhang/yuanchuang/20190224/399816.html','野心勃勃而又不去行动的人才会有更多的担心','images/9.jpg','> 杞人忧天的故事很多人都知道，说的是古时杞国有一个人会有各种各样的担心，比如担心会自己生病，担心自己会穷困，有一天甚至担心天会塌下来。别人都笑话他，说他的担忧是多余的，整天哪有果多的担心，人岂不是很悲催痛苦，后来有一成语来形容他，就是杞人忧天。\r\n\r\n在现实生活中，我发现有更多的人做着杞人忧天的提心。比方说，有人担心自己孩子输在起跑线上，就拼命给孩子报各种补习班，后来又担心孩子考不上好的大学，成年后，又担心没房没车没找不到好人家的姑娘，再后来结婚了，又担心孙子是不是健康，做着各种各样的检查……\r\n\r\n　　我们发现有一些人一生当中始终处于担忧里，这是很痛苦的，他们从来没有享受过生活，一生在担忧里小心谨慎的生活着，生活的美好他们体会不到，他们就高速运转的机器，哪来的闲功夫见看花开花落，松涛阵阵。\r\n\r\n　　那么，问题来了，这是怎么样形成的性格，有必于搞的这样紧张吗？一生这样无趣，还不如四五岁的孩童，天真烂漫无忧无虑的生活着。\r\n\r\n　　我们发现这些人都是不甘示弱的人，都是天生有着优越感的人，自认为自己就应该比别人过得好，他们也的确是生活的强者，但是却并非都是智者，不懂得享受生活。\r\n\r\n　　他们内心会有各种各样的欲望攀比，永无止境的奋斗目标，为此，这些想法让他们寝食难安，他们每天都会难受，因为内心的奋斗目标在召唤，他们对现实的生存环境是不满意的，甚至是反感的，于是痛苦产生了。接下来，就会有两种情况产生。\r\n\r\n　　一种是没有觉知，不知道自己痛苦的根源，过着得过且过的生活，因为他们生活并没有触及内心的根源，或者说没有产生直接的行动，他们会越来越担忧，严重了就会胡思乱想，就像那个杞国人一样担心天会塌下来。\r\n\r\n　　另一种是觉知，知道自己内心痛苦的根源，并积极朝着内心的目标奋进，做一个知行合一的人，这种人往往是野心勃勃的，并有积极的行动，因此，他们并不会胡思乱想，也不会害怕恐惧，这样的人如果持之以恒的专攻某一领域，往往能取得成功。\r\n\r\n　　所以第一种人应该向第二种人学习，如果认为自己非等闲之辈，就应该积极的行动，而不会各种担忧和恐惧，因为行动是战胜魔鬼最有效的武器，当你认为自己对前面临的是一座山时，走一步是一步，终究有一天会走完，当你认为面前拦路虎是一个魔鬼时，那么就亮出宝剑，勇敢战斗，那么你才有赢得胜利的机会，如果不去亮剑，不去行动，就永远没有成功的机会。\r\n\r\n　　当然了，生活也并非完全那么急促湍急，它也有柳暗花明花红叶绿云淡风轻的时刻，当你在为着自己理想和目标奋斗时，也要抽出一点时间来享受美好的生活，不要无趣的只知道奋斗。\r\n\r\n　　如果认为自己天生并非俗辈，那么就做个勇敢的人。欲望越大，烦恼越多，这是成正比的，所以担忧恐惧也会少不了的，如果想跨越这个坎，那么就再加上勇敢积极的行动吧，他们战胜一切负面情绪最有效的法定。\r\n','#故事#',1,NULL,6,'zz','2019-03-09',NULL,NULL,'杞人忧天的故事很多人都知道，说的是古时杞国有一个人会有各种各样的担心，比如担心会自己生病，担心自己会穷困，有一天甚至担心天会塌下来。别人都笑话他，说他的担忧是多余的，整天哪有果多的担心，人岂不是很悲催痛苦，后来有一成语来形容他，就是杞人忧天。',NULL,NULL,NULL,NULL,NULL),(47,'老干部','心若雨汐','http://www.duwenzhang.com/wenzhang/renshengzheli/ganwu/20181002/394682.html','有一种心态叫放下，有一种境界叫舍得','images/2.jpg','> 心像是个口袋，什么都不装的叫心灵，装一点的叫心眼，装多了的的叫心计，装更多的叫心机，装得太多了最后那些负累就只能被当作心事了。人活在世往往过于在意近在咫尺的功名利禄，我们的生活是否如与朋友说起时一般绚烂夺目，现实生活中亦有很多人深陷进没有结果的爱情里，明知是错的，还要迂回前进。那些口口声声说着为了生活的衣食无忧、为了孩子不得不继续维持的婚姻。很多人拿不起又放不下，任由空白的生活在自己的眼中周而复始、慢慢的这种负累侵蚀的我们身心不堪重负。试着放下吧，放下你的疲惫、放下那些没有结果的执念、清醒时看到的你和他的未来若是并不理想，不如劝自己趁早放下，长痛不如短痛。再试着看开些，有钱就会拥有快乐么？就像你耗尽心力换得了工作场上的升职机会，而就在你即将上任时被查出了重症，钱能换回健康么？再多的钱能换回你的生命，换回勃勃生机的青春么？钱固然重要，可是与生命、与亲情、爱情比起来，钱真的没有那么重要。有形的财富无法与无价的情感、生命相提并论，何来取舍一说呢。\r\n\r\n#### 人一定要想清三个问题，第一你有什么，第二你要什么，第三你能放弃什么。对于多数人而言：有什么，我们往往很轻易的就评价出自己的现状；那要什么，大多数人内心也有明确的想法；那么问题来了，现在你告诉我你能放弃什么，几乎没有人可以做到不放弃就轻易获得了全部你想要的东西。人生不会每一件事都会让自己称心如意，常言道：人为财死，鸟为食亡。但有多少人为了事业有成，最后倒在了工作岗位上，那些口耳相传的过劳案例并非偶然意外、就像疾病的发展也是有一个循序渐进的过程。外在的过劳加上心里的过度忧思，外因内因从不分离。那些远赴千里外的地方工作的子女，其家中病重老母为不让远方的儿过于掂念，不忍心在孩子耳边传递生病讯息，弥留之际也未能见上最后一面。我并不赞成那些抛家舍业的一颗心思完全放在工作上的做法，工作一时的，即便离开这，你仍有再次获得的机会。而家庭、健康却要陪伴你很久，且一旦失去就是永远。或许你是为财而死，但是不值得。\r\n\r\n#### 　　生活中很多人喜欢就一件事左右摇摆，举棋不定。轻易落子怕输了，一子不落怕错过。于是他们一直纠结于细微得不值得一提的小事，让自己始终活在紧张的泥潭不能自拔。在自己短暂的一生中，谨小慎微，防微杜渐，也许别人的一句话，一个眼神，一个表情，都会不断揣摩，别人随口一说的话却始终放在心里耿耿于怀，凡事有一点端倪便以偏概全，杞人忧天。所以这些人总是活得很累，舒心二字与他们完全绝缘。其实人生有一种心态叫放下，。不必凡事都争个明白，我们生活的这个社会本就很复杂，然而很多人把这个本来就复杂的社会弄得更加复杂，复杂的无章可循。贪婪的人容易受到打击。欲望越少，生活越幸福。','#哲理#',1,NULL,6,'zz','2019-03-09',NULL,NULL,'心像是个口袋，什么都不装的叫心灵，装一点的叫心眼，装多了的的叫心计，装更多的叫心机，装得太多了最后那些负累就只能被当作心事了。人活在世往往过于在意近在咫尺的功名利禄，我们的生活是否如与朋友说起时一般绚烂夺目，现实生活中亦有很多人深陷进没有结果的爱情里，明知是错的，还要迂回前进。那些口口声声说着为了生活的衣食无忧、为了孩子不得不继续维持的婚姻。很多人拿不起又放不下，任由空白的生活在自己的眼中周而复始、慢慢的这种负累侵蚀的我们身心不堪重负。试着放下吧，放下你的疲惫、放下那些没有结果的执念、清醒时看到的你和他的未来若是并不理想，不如劝自己趁早放下，长痛不如短痛。再试着看开些，有钱就会拥有快乐么？就像你耗尽心力换得了工作场上的升职机会，而就在你即将上任时被查出了重症，钱能换回健康么？再多的钱能换回你的生命，换回勃勃生机的青春么？钱固然重要，可是与生命、与亲情、爱情比起来，钱真的没有那么重要。有形的财富无法与无价的情感、生命相提并论，何来取舍一说呢。',NULL,NULL,NULL,NULL,NULL),(48,'老干部','','','美国载人版“龙”飞船完成首次试飞返回地球','images/1.jpg','> 新华社洛杉矶3月8日电（记者 谭晶晶）在国际空间站停留5天后，美国太空探索技术公司的首艘载人版“龙”飞船8日凌晨脱离空间站，并于6个多小时后顺利溅落在预定的大西洋海域，完成首次试飞任务。\r\n\r\n美国航天局的直播画面显示，“龙”飞船于美国东部时间8日2时32分（北京时间8日15时32分）离开国际空间站。在近地轨道飞行5个多小时后，“龙”飞船点燃推进器开始回归。随后，飞船的4个降落伞展开，以减缓飞船下降速度。\r\n美国东部时间8时45分（北京时间21时45分），“龙”飞船落入佛罗里达海岸附近的大西洋海域。太空探索技术公司的回收船负责打捞飞船，并将其运回陆地。\r\n\r\n美国航天局局长布里登斯廷当天表示，在顺利完成国际空间站任务后，载人版“龙”飞船成功落入大西洋，成为人类太空飞行新时代的又一里程碑，距离“龙”飞船从美国本土将美国宇航员送入太空的目标更近了一步。\r\n\r\n据美国航天局介绍，“龙”飞船此次向国际空间站送去约200千克物资和设备，并将约150千克科学工具、空间站设备等带回地球。\r\n\r\n此次载人版“龙”飞船进行不载人试飞，飞船上载有一个身穿白色宇航服、名为“里普利”的假人模型。其头部、颈部和脊柱等装有多个传感器，用于收集飞船飞行过程中的相关数据。飞船回收后，科研人员将分析所有相关数据，为将来的载人飞行做准备。\r\n\r\n按照设计，载人版“龙”飞船可在空间站停留210天，但这次执行任务的“龙”飞船只在空间站停留5天。\r\n\r\n这次试飞旨在验证载人版“龙”飞船安全运送宇航员往返国际空间站的能力，是美国在航天飞机退役近8年后迈出的恢复载人发射能力的关键一步。按照美国航天局的计划，本次试飞成功后，载人版“龙”飞船将于今年7月进行首次载人飞行，将两名美国宇航员送往国际空间站。','',4,NULL,3,'yc','2019-03-09',NULL,NULL,'新华社洛杉矶3月8日电（记者 谭晶晶）在国际空间站停留5天后，美国太空探索技术公司的首艘载人版“龙”飞船8日凌晨脱离空间站，并于6个多小时后顺利溅落在预定的大西洋海域，完成首次试飞任务。\r\n美国航天局的直播画面显示，“龙”飞船于美国东部时间8日2时32分（北京时间8日15时32分）离开国际空间站。在近地轨道飞行5个多小时后，“龙”飞船点燃推进器开始回归。随后，飞船的4个降落伞展开，以减缓飞船下降速度。',NULL,NULL,NULL,NULL,NULL),(49,'老干部','','',' 网易首页 > 网易科技 > 互联网 > 正文 特斯拉是要闹哪样？将冻结此前的关店和裁员计划 ','images/2.jpg','**从上周开始，特斯拉大幅削减了零售员工的薪酬，并开始关闭第一批门店。知情人士透露，特斯拉目前已经关闭了美国和加拿大首批29家门店。据估计，数百名员工已被解雇，并获得了遣散费。**\r\n\r\n特斯拉销售管理部门今天早些时候与地区管理部门举行了电话会议，他们告诉零售员工，特斯拉将冻结此前的关店和裁员计划，直到本月底再行通知。\r\n\r\n有些没有关闭的门店上周被告知，将停止预订试驾。但它们今天被告知，一切业务恢复正常，但零售员工没有佣金和奖金，这导致他们只能获得更低的薪酬。\r\n\r\n据消息人士称，许多零售经理将这种冻结转型描述为“证明自己的机会”。尽管如此，由于大幅减薪，许多员工正在离职。有些员工表示，他们怀疑特斯拉正在延长过渡期，并削减他们的工资，以便把他们赶出去，这样他们就不用支付遣散费。\r\n\r\n当被问及这一情况时，特斯拉拒绝置评，并重提了此前发布的、关于转向在线销售的博文。马斯克在博文中写道，特斯拉将需要“几个月”的时间才能将大部分销售活动转移到网上。','#科技#',4,NULL,4,'yc','2019-03-09',NULL,NULL,'原标题：Tesla temporarily freezes store closures and layoffs in chaotic sales strategy change）网易科技讯3月9日消息，据Electrek报道，电动汽车制造商特斯拉正在进行一场混乱的销售战略转型。现在员工们被告知，该公司将冻结目前的门店关闭和裁员计划，至少要到本月底才会采取新的行动。',NULL,NULL,NULL,NULL,NULL),(50,'老干部','','','web项目常见错误汇总','images/7.jpg','java.lang.IllegalStateException: Web app root system property already set to different value: \'webapp.root\' = [....\\tmp1\\wtpwebapps\\workreport\\] instead of [.....\\wtpwebapps\\ApprovalFront\\] \r\n- Choose unique values for the \'webAppRootKey\' context-param in your web.xml files!\r\n \r\n错误原因：Tomcat发布多个项目时抛的webAppRootKey错误,  原因是部署在同一容器中的Web项目，定义了相同的webAppRootKey或者都没有定义\r\n解决办法：需要为每个web都定义一个webAppRootKey\r\n<!--app1中的web.xml-->\r\n<context-param>\r\n    <param-name>webAppRootKey</param-name>\r\n    <param-value>app1name</param-value>\r\n</context-param>\r\n \r\n<!--app2中的web.xml-->\r\n<context-param>\r\n    <param-name>webAppRootKey</param-name>\r\n    <param-value>app2name</param-value>\r\n</context-param>','',2,NULL,1,'yc','2019-03-09',NULL,NULL,'Tomcat发布多个项目时抛的webAppRootKey错原因是部署在同一容器中的Web项目，定义了相同的webAppRootKey或者都没有定义\r\n解决办法：需要为每个web都定义一个webAppRootKey',NULL,NULL,NULL,NULL,NULL),(51,'老干部','','','如何在Maven下搭建SSM框架','images/6.jpg','如何在Maven下搭建SSM框架\r\n1.Eclipse配置\r\n \r\n这里提供两种开发工具\r\nSSM框架项目可以使用Eclipse进行开发为了能简化开发流程，首先需要在Eclipse中安装SpringIDE插件，详细安装步骤请参考：\r\nhttps://blog.csdn.net/zhen_6137/article/details/79383941\r\n或者使用Spring官方提供的STS工具进行开发，下载地址：\r\nhttps://spring.io/tools/sts/legacy\r\n2.构建Maven环境\r\nMaven下载配置\r\nMaven下载地址：http://maven.apache.org/download.cgi\r\n\r\n下载完成后解压到：D:\\Program Files\\apache-maven-3.5.3下\r\n\r\n在环境变量中，新增\r\n系统变量名：MAVEN_HOME\r\n变量值：D:\\Program Files\\apache-maven-3.5.3\r\n在Path中追加：%MAVEN_HOME%\\bin;\r\n在命令行窗口中输入：mvn –v 显示如下信息，这说明Maven安装成功；\r\n\r\nMaven仓库设置\r\n由于Maven提供的公共仓库的访问速度十分缓慢，所以这里修改使用阿里的Maven仓库镜像，编辑conf/setting.xml文件，在mirrors节点下，新增如下内容，这样从仓库中下载jar包速度上会快很多。\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n<mirror>\r\n<id>nexus-aliyun</id>\r\n<mirrorOf>*</mirrorOf>\r\n<name>Nexusaliyun</name>\r\n<url>http://maven.aliyun.com/nexus/content/groups/public</url>\r\n</mirror>\r\n同时需要将maven下载的jar包存放路径进行设置，编辑conf/setting.xml文件，配置本地仓库路径：\r\n\r\n\r\n1\r\n<localRepository>D:/ProgramFiles/apache-maven-3.5.3/repo</localRepository>\r\n3.Eclipse（STS）与Maven整合\r\n设置自带maven整合工具，在Preferences中找到Maven节点，将User Settings项的设置配置为自己maven所在路径然后更新设置（Update Settings Reindex）\r\n\r\n点击Installations节点，添加maven runtime，具体如图所示：\r\n\r\n4.创建maven项目时设置JDK\r\n问题描述：eclipse创建maven项目时，显示的JDK默认版本为1.5，实际使用的JDK为1.8，如何修改？\r\n解决方案：编辑conf/settings.xml文件，在profiles节点下配置\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n<id>jdk-1.8</id>\r\n<activation>\r\n<activeByDefault>true</activeByDefault>\r\n<jdk>1.8</jdk>\r\n</activation>\r\n<properties>\r\n<maven.compiler.source>1.8</maven.compiler.source>\r\n<maven.compiler.target>1.8</maven.compiler.target>\r\n<maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>\r\n</properties>\r\n5.使用maven创建项目\r\n新建项目，类型选择：Maven Project，点击Next\r\n\r\n选择默认工作空间，点击Next\r\n\r\n选择maven-archetype-webapp，点击Next\r\n\r\nGroup Id：com.ssm 表示应用的包名称\r\nArtifact Id：demossm 表示工程名称\r\n\r\n6.新建的项目问题处理\r\n创建完成后会出现如图所示报错：\r\n\r\n报错原因：\r\n\r\n解决办法：添加Tomcat Server 并选择JRE为本地安装的JDK的jre\r\n\r\n选择项目，右键编辑Build Path -> Configure Build Path\r\n\r\n将JRE System修改为自己本地安装的JDK下的jre，并添加Tomcat到编译环境中：\r\n\r\n此时项目已经不再报错\r\n\r\n创建后的工程需要完善目录信息，一般创建后需要存在4个目录（src/main/java  src/main/resources  src/test/java  src/test/resources）需要根据实际补充缺少的包；\r\n \r\n\r\n默认的Dynamic Web Module为2.3，使用Tomcat 8.0，需要修改为3.0\r\n这里如果直接修改是会报错并无法修改的，如下图所示：\r\n \r\n修改方法：\r\n \r\n① 编辑工程所在目录下.settrings文件夹中的org.eclipse.wst.common.project.facet.core.xml文件\r\n将\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<faceted-project>\r\n<fixedfacet=\"wst.jsdt.web\"/>\r\n<installedfacet=\"java\"version=\"1.5\"/>\r\n<installedfacet=\"jst.web\"version=\"2.3\"/>\r\n<installedfacet=\"wst.jsdt.web\"version=\"1.0\"/>\r\n</faceted-project>\r\n修改为：\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<faceted-project>\r\n<fixedfacet=\"wst.jsdt.web\"/>\r\n<installedfacet=\"java\"version=\"1.8\"/>\r\n<installedfacet=\"jst.web\"version=\"3.0\"/>\r\n<installedfacet=\"wst.jsdt.web\"version=\"1.0\"/>\r\n</faceted-project>\r\n \r\n修改项目web.xml文件为：\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<web-appxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\nxmlns=\"http://java.sun.com/xml/ns/javaee\"\r\nxsi:schemaLocation=\"http://java.sun.com/xml/ns/javaeehttp://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\r\nversion=\"3.0\">\r\n<display-name>ArchetypeCreatedWebApplication</display-name>\r\n</web-app>\r\n在pom.xml文件build节点中添加如下信息：\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n<plugins>\r\n<plugin>\r\n<groupId>org.apache.maven.plugins</groupId>\r\n<artifactId>maven-compiler-plugin</artifactId>\r\n<configuration>\r\n<source>1.8</source>\r\n<target>1.8</target>\r\n</configuration>\r\n</plugin>\r\n</plugins>\r\n \r\n修改后，在项目上右键，找到Maven属性下点击Update Project\r\n\r\n\r\n此时项目已经修改为Dynamic Web Module为3.0\r\n \r\n创建示例S_USER表：\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\nCREATETABLE\r\nS_USER\r\n(\r\nIDINT(4)NOTNULL,\r\nNAMEVARCHAR(80),\r\nACCOUNTVARCHAR(30),\r\nPASSWORDVARCHAR(128),\r\nPRIMARYKEY(ID)\r\n);\r\n7.添加基本配置文件\r\n添加以下配置文件\r\n\r\n \r\nPom.xml配置如下：\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n50\r\n51\r\n52\r\n53\r\n54\r\n55\r\n56\r\n57\r\n58\r\n59\r\n60\r\n61\r\n62\r\n63\r\n64\r\n65\r\n66\r\n67\r\n68\r\n69\r\n70\r\n71\r\n72\r\n73\r\n74\r\n75\r\n76\r\n77\r\n78\r\n79\r\n80\r\n81\r\n82\r\n83\r\n84\r\n85\r\n86\r\n87\r\n88\r\n89\r\n90\r\n91\r\n92\r\n93\r\n94\r\n95\r\n96\r\n97\r\n98\r\n99\r\n100\r\n101\r\n102\r\n103\r\n104\r\n105\r\n106\r\n107\r\n108\r\n109\r\n110\r\n111\r\n112\r\n113\r\n114\r\n115\r\n116\r\n117\r\n118\r\n119\r\n120\r\n121\r\n122\r\n123\r\n124\r\n125\r\n126\r\n127\r\n128\r\n129\r\n130\r\n131\r\n132\r\n133\r\n134\r\n135\r\n136\r\n137\r\n138\r\n139\r\n140\r\n141\r\n142\r\n143\r\n144\r\n145\r\n146\r\n147\r\n148\r\n149\r\n150\r\n151\r\n152\r\n153\r\n154\r\n155\r\n156\r\n157\r\n158\r\n159\r\n160\r\n161\r\n162\r\n163\r\n164\r\n165\r\n166\r\n167\r\n168\r\n169\r\n170\r\n171\r\n172\r\n173\r\n174\r\n175\r\n176\r\n177\r\n178\r\n179\r\n180\r\n181\r\n182\r\n183\r\n184\r\n185\r\n186\r\n187\r\n188\r\n189\r\n190\r\n191\r\n192\r\n193\r\n194\r\n195\r\n196\r\n197\r\n198\r\n199\r\n200\r\n201\r\n202\r\n203\r\n204\r\n205\r\n206\r\n207\r\n208\r\n209\r\n210\r\n211\r\n212\r\n213\r\n214\r\n215\r\n216\r\n217\r\n218\r\n219\r\n220\r\n221\r\n222\r\n223\r\n224\r\n225\r\n<projectxmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0http://maven.apache.org/maven-v4_0_0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <groupId>com.ssm</groupId>\r\n    <artifactId>demossm</artifactId>\r\n    <packaging>war</packaging>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <name>demossmMavenWebapp</name>\r\n    <url>http://maven.apache.org</url>\r\n    <properties>\r\n        <!--Spring版本号-->\r\n        <spring.version>4.3.8.RELEASE</spring.version>\r\n        <mybatis.version>3.3.0</mybatis.version>\r\n        <aspect.version>1.8.0</aspect.version>\r\n        <mysql.version>5.1.35</mysql.version>\r\n        <slf4j.version>1.7.12</slf4j.version>\r\n        <log4j.version>1.2.17</log4j.version>\r\n        <jackson.version>2.5.4</jackson.version>\r\n    </properties>\r\n    <dependencies>\r\n        <!--Spring相关包start-->\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-core</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-aop</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-web</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-webmvc</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-jdbc</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-tx</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <!--以下包看情况需要-->\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-test</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-oxm</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-context</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-context-support</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-expression</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-orm</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-webmvc</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <!--spring框架包end-->\r\n        <!--AOP相关包SpringAOP会使用到以下两个包-->\r\n        <dependency>\r\n            <groupId>org.aspectj</groupId>\r\n            <artifactId>aspectjrt</artifactId>\r\n            <version>${aspect.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.aspectj</groupId>\r\n            <artifactId>aspectjweaver</artifactId>\r\n            <version>${aspect.version}</version>\r\n        </dependency>\r\n        <!--MyBatis相关包-->\r\n        <dependency>\r\n            <groupId>org.mybatis</groupId>\r\n            <artifactId>mybatis</artifactId>\r\n            <version>${mybatis.version}</version>\r\n        </dependency>\r\n        <!--Spring集成MyBatis-->\r\n        <dependency>\r\n            <groupId>org.mybatis</groupId>\r\n            <artifactId>mybatis-spring</artifactId>\r\n            <version>1.2.3</version>\r\n        </dependency>\r\n        <!--MySQL相关包-->\r\n        <dependency>\r\n            <groupId>mysql</groupId>\r\n            <artifactId>mysql-connector-java</artifactId>\r\n            <version>${mysql.version}</version>\r\n        </dependency>\r\n        <!--数据库连接池-->\r\n        <dependency>\r\n            <groupId>com.alibaba</groupId>\r\n            <artifactId>druid</artifactId>\r\n            <version>1.0.20</version>\r\n        </dependency>\r\n        <!--json数据格式支持-->\r\n        <dependency>\r\n            <groupId>net.sf.json-lib</groupId>\r\n            <artifactId>json-lib</artifactId>\r\n            <version>2.4</version>\r\n            <classifier>jdk15</classifier>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>com.fasterxml.jackson.core</groupId>\r\n            <artifactId>jackson-core</artifactId>\r\n            <version>${jackson.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>com.fasterxml.jackson.core</groupId>\r\n            <artifactId>jackson-databind</artifactId>\r\n            <version>${jackson.version}</version>\r\n        </dependency>\r\n        <!--jstl标签类-->\r\n        <dependency>\r\n            <groupId>jstl</groupId>\r\n            <artifactId>jstl</artifactId>\r\n            <version>1.2</version>\r\n        </dependency>\r\n        <!--Servlet-->\r\n        <dependency>\r\n            <groupId>javax.servlet</groupId>\r\n            <artifactId>servlet-api</artifactId>\r\n            <version>2.5</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>javax.servlet.jsp</groupId>\r\n            <artifactId>jsp-api</artifactId>\r\n            <version>2.1</version>\r\n        </dependency>\r\n        <!--上传组件包start-->\r\n        <dependency>\r\n            <groupId>commons-fileupload</groupId>\r\n            <artifactId>commons-fileupload</artifactId>\r\n            <version>1.3.1</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>commons-io</groupId>\r\n            <artifactId>commons-io</artifactId>\r\n            <version>2.4</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>commons-codec</groupId>\r\n            <artifactId>commons-codec</artifactId>\r\n            <version>1.10</version>\r\n        </dependency>\r\n        <!--上传组件包end-->\r\n        <!--logstart-->\r\n        <dependency>\r\n            <groupId>log4j</groupId>\r\n            <artifactId>log4j</artifactId>\r\n            <version>${log4j.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.slf4j</groupId>\r\n            <artifactId>slf4j-api</artifactId>\r\n            <version>${slf4j.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.slf4j</groupId>\r\n            <artifactId>slf4j-log4j12</artifactId>\r\n            <version>${slf4j.version}</version>\r\n        </dependency>\r\n        <!--logEND-->\r\n        <!--Junit单元测试-->\r\n        <dependency>\r\n            <groupId>junit</groupId>\r\n            <artifactId>junit</artifactId>\r\n            <version>3.8.1</version>\r\n            <scope>test</scope>\r\n        </dependency>\r\n    </dependencies>\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.apache.maven.plugins</groupId>\r\n                <artifactId>maven-compiler-plugin</artifactId>\r\n                <configuration>\r\n                    <source>1.8</source>\r\n                    <target>1.8</target>\r\n                </configuration>\r\n            </plugin>\r\n        </plugins>\r\n        <finalName>demossm</finalName>\r\n    </build>\r\n</project>\r\n \r\njdbc.properties\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\ndriverClassName=com.mysql.jdbc.Driver\r\nurl=jdbc:mysql://localhost:3306/cpanydb\r\nusername=cpany\r\npassword=cpany\r\n#定义初始连接数\r\ninitialSize=1\r\n#定义最大连接数\r\nmaxActive=20\r\n#定义最大空闲\r\nmaxIdle=20\r\n#定义最小空闲\r\nminIdle=1\r\n#定义最长等待时间\r\nmaxWait=60000\r\n log4j.properties\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n#定义LOG输出级别\r\nlog4j.rootLogger=DEBUG,Console\r\n#定义日志输出目的地为控制台\r\nlog4j.appender.Console=org.apache.log4j.ConsoleAppender\r\nlog4j.appender.Console.Target=System.out\r\nlog4j.appender.Console.layout=org.apache.log4j.PatternLayout\r\nlog4j.appender.Console.layout.ConversionPattern=%d[%t]%-5p[%c]-%m%n\r\n#文件大小到达指定尺寸的时候产生一个新的文件\r\nlog4j.appender.File=org.apache.log4j.RollingFileAppender\r\n#指定输出目录\r\nlog4j.appender.File.File=C:/logs/demossm.log\r\n#定义文件最大大小\r\nlog4j.appender.File.MaxFileSize=10MB\r\n#输出所以日志，如果换成DEBUG表示输出DEBUG以上级别日志\r\nlog4j.appender.File.Threshold=ALL\r\nlog4j.appender.File.layout=org.apache.log4j.PatternLayout\r\nlog4j.appender.File.layout.ConversionPattern=[%p][%d{yyyy-MM-ddHH\\:mm\\:ss}][%c]%m%n\r\nlog4j.logger.java.sql.ResultSet=INFO\r\nlog4j.logger.org.apache=INFO\r\nlog4j.logger.java.sql.Connection=DEBUG\r\nlog4j.logger.java.sql.Statement=DEBUG\r\nlog4j.logger.java.sql.PreparedStatement=DEBUG\r\n mybatis-config.xml\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<!DOCTYPEconfiguration\r\nPUBLIC\"-//mybatis.org//DTDConfig3.0//EN\"\r\n\"http://mybatis.org/dtd/mybatis-3-config.dtd\">\r\n<configuration>\r\n<!--设置别名-->\r\n<typeAliases>\r\n<packagename=\"com.ssm.domain\"/>\r\n</typeAliases>\r\n</configuration>\r\nspring-mvc.xml\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<beansxmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xmlns:context=\"http://www.springframework.org/schema/context\"\r\n    xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\r\n    xsi:schemaLocation=\"\r\nhttp://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsd\r\nhttp://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context.xsd\r\nhttp://www.springframework.org/schema/mvchttp://www.springframework.org/schema/mvc/spring-mvc.xsd\">\r\n    <!--启动自动扫描-->\r\n    <context:component-scanbase-package=\"com.ssm.*\"/>\r\n    <!--注册MVC注解驱动-->\r\n    <mvc:annotation-driven>\r\n        <!--避免IE执行AJAX时,返回JSON出现下载文件-->\r\n        <mvc:message-converters>\r\n            <bean\r\n                class=\"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter\">\r\n                <propertyname=\"supportedMediaTypes\">\r\n                    <list>\r\n                        <value>text/html;charset=UTF-8</value>\r\n                        <value>text/json;charset=UTF-8</value>\r\n                        <value>application/json;charset=UTF-8</value>\r\n                    </list>\r\n                </property>\r\n            </bean>\r\n        </mvc:message-converters>\r\n    </mvc:annotation-driven>\r\n    <!--静态资源可访问的设置方式-->\r\n    <mvc:default-servlet-handler/>\r\n    <!--配置视图解析器，可以显式设置，也可以不设置，不设置会依据SpringMVC的默认设置-->\r\n    <beanid=\"viewResolver\"\r\n        class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\r\n        <propertyname=\"prefix\"value=\"/WEB-INF/views/\"/>\r\n        <propertyname=\"suffix\"value=\".jsp\"/>\r\n    </bean>\r\n</beans>\r\nspring-mybatis.xml\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<beansxmlns=\"http://www.springframework.org/schema/beans\"\r\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\nxsi:schemaLocation=\"\r\nhttp://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n<beanid=\"propertyConfigurer\"\r\nclass=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\r\n<propertyname=\"location\"value=\"classpath:jdbc.properties\"/>\r\n</bean>\r\n<!--定义数据源Bean-->\r\n<!--Druid-->\r\n<beanid=\"dataSource\"\r\nclass=\"com.alibaba.druid.pool.DruidDataSource\">\r\n<propertyname=\"driverClassName\"value=\"${driverClassName}\"/>\r\n<propertyname=\"url\"value=\"${url}\"/>\r\n<propertyname=\"username\"value=\"${username}\"/>\r\n<propertyname=\"password\"value=\"${password}\"/>\r\n<!--配置初始化大小、最小、最大连接数-->\r\n<propertyname=\"initialSize\"value=\"${initialSize}\"/>\r\n<propertyname=\"minIdle\"value=\"${minIdle}\"/>\r\n<propertyname=\"maxIdle\"value=\"${maxIdle}\"/>\r\n<propertyname=\"maxActive\"value=\"${maxActive}\"/>\r\n<!--配置获取连接等待超时的时间-->\r\n<propertyname=\"maxWait\"value=\"${maxWait}\"/>\r\n</bean>\r\n<!--注册SqlSessionFactoryBean-->\r\n<beanid=\"sqlSessionFactory\"\r\nclass=\"org.mybatis.spring.SqlSessionFactoryBean\">\r\n<propertyname=\"dataSource\"ref=\"dataSource\"/>\r\n<!--自动扫描mappers.xml文件-->\r\n<propertyname=\"mapperLocations\"\r\nvalue=\"classpath:mappers/*.xml\"/>\r\n<propertyname=\"configLocation\"\r\nvalue=\"classpath:mybatis-config.xml\"></property>\r\n</bean>\r\n<!--DAO接口所在包名，Spring会自动查找其下的类-->\r\n<beanclass=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\r\n<propertyname=\"basePackage\"value=\"com.ssm.dao\"/>\r\n<propertyname=\"sqlSessionFactoryBeanName\"\r\nvalue=\"sqlSessionFactory\"/>\r\n</bean>\r\n</beans>\r\nspring-tx.xml\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<beansxmlns=\"http://www.springframework.org/schema/beans\"\r\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\nxmlns:context=\"http://www.springframework.org/schema/context\"\r\nxmlns:aop=\"http://www.springframework.org/schema/aop\"\r\nxmlns:tx=\"http://www.springframework.org/schema/tx\"\r\nxsi:schemaLocation=\"\r\nhttp://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsd\r\nhttp://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context.xsd\r\nhttp://www.springframework.org/schema/aophttp://www.springframework.org/schema/aop/spring-aop.xsd\r\nhttp://www.springframework.org/schema/txhttp://www.springframework.org/schema/tx/spring-tx.xsd\">\r\n<!--开启AOP注解扫描-->\r\n<aop:aspectj-autoproxyproxy-target-class=\"true\"/>\r\n<!--事务管理器，依赖于数据源-->\r\n<beanid=\"txManager\"class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n<propertyname=\"dataSource\"ref=\"dataSource\"/>\r\n</bean>\r\n<!--编写通知：对事务进行增强（通知），需要编写对切入点和具体执行事务细节-->\r\n<tx:adviceid=\"txAdvice\"transaction-manager=\"txManager\">\r\n<tx:attributes>\r\n<!--\r\n为切入点方法添加事务详情\r\nname：方法名，*表示任意方法名称\r\npropagation：设置传播行为\r\nisolation：设置隔离级别\r\nread-only：是否只读\r\n-->\r\n<tx:methodname=\"add*\"propagation=\"REQUIRED\"isolation=\"DEFAULT\"read-only=\"false\"rollback-for=\"Exception\"/>\r\n<tx:methodname=\"delete*\"propagation=\"REQUIRED\"isolation=\"DEFAULT\"read-only=\"false\"rollback-for=\"Exception\"/>\r\n<tx:methodname=\"update*\"propagation=\"REQUIRED\"isolation=\"DEFAULT\"read-only=\"false\"rollback-for=\"Exception\"/>\r\n</tx:attributes>\r\n</tx:advice>\r\n<!--设置AOP，让Spring自动对目标生成代理，需要使用AspectJ表达式-->\r\n<aop:configproxy-target-class=\"true\">\r\n<!--切面：整合切入点和通知-->\r\n<aop:advisoradvice-ref=\"txAdvice\"pointcut=\"within(com.ssm.controller.*)\"/>\r\n</aop:config>\r\n</beans>\r\n8.配置web.xml文件\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n50\r\n51\r\n52\r\n53\r\n54\r\n55\r\n56\r\n57\r\n58\r\n59\r\n60\r\n61\r\n62\r\n63\r\n64\r\n65\r\n66\r\n67\r\n68\r\n69\r\n70\r\n71\r\n72\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<-appxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xmlns=\"http://java.sun.com/xml/ns/javaee\"\r\n    xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaeehttp://java.sun.com/xml/ns/javaee/-app_3_0.xsd\"\r\n    version=\"3.0\">\r\n    <display-name>ArchetypeCreatedApplication</display-name>\r\n    <welcome-file-list>\r\n        <welcome-file>/index.jsp</welcome-file>\r\n    </welcome-file-list>\r\n    <!--加载springbean-->\r\n    <context-param>\r\n        <param-name>contextConfigLocation</param-name>\r\n        <param-value>classpath:applicationContext.xml</param-value>\r\n    </context-param>\r\n    <listener>\r\n        <listener-class>org.springframework..context.ContextLoaderListener</listener-class>\r\n    </listener>\r\n    <!--编码过滤器-->\r\n    <filter>\r\n        <filter-name>encodingFilter</filter-name>\r\n        <filter-class>org.springframework..filter.CharacterEncodingFilter</filter-class>\r\n        <init-param>\r\n            <param-name>encoding</param-name>\r\n            <param-value>UTF-8</param-value>\r\n        </init-param>\r\n    </filter>\r\n    <filter-mapping>\r\n        <filter-name>encodingFilter</filter-name>\r\n        <url-pattern>/*</url-pattern>\r\n    </filter-mapping>\r\n    <!--日志记录-->\r\n    <context-param>\r\n        <!--日志配置文件路径-->\r\n        <param-name>log4jConfigLocation</param-name>\r\n        <param-value>classpath:log4j.properties</param-value>\r\n    </context-param>\r\n    <context-param>\r\n        <!--日志页面的刷新间隔-->\r\n        <param-name>log4jRefreshInterval</param-name>\r\n        <param-value>6000</param-value>\r\n    </context-param>\r\n    <listener>\r\n        <listener-class>org.springframework..util.Log4jConfigListener</listener-class>\r\n    </listener>\r\n    <!--SpringMVCservlet-->\r\n    <servlet>\r\n        <servlet-name>SpringMVC</servlet-name>\r\n        <servlet-class>org.springframework..servlet.DispatcherServlet</servlet-class>\r\n        <init-param>\r\n            <param-name>contextConfigLocation</param-name>\r\n            <param-value>classpath:spring-mvc.xml</param-value>\r\n        </init-param>\r\n        <load-on-startup>1</load-on-startup>\r\n    </servlet>\r\n    <servlet-mapping>\r\n        <servlet-name>SpringMVC</servlet-name>\r\n        <url-pattern>/</url-pattern>\r\n    </servlet-mapping>\r\n    \r\n<servlet-mapping>\r\n<servlet-name>default</servlet-name>\r\n<url-pattern>*.js</url-pattern>\r\n</servlet-mapping>\r\n<servlet-mapping>\r\n<servlet-name>default</servlet-name>\r\n<url-pattern>*.css</url-pattern>\r\n</servlet-mapping>\r\n</-app>\r\n9.添加相关处理类\r\n在src/main/java下分别添加我们的dao包，domain包，service包，还有controller包。包里面添加相应的类，效果图如下：\r\n\r\n \r\nSUser.java\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\npackagecom.ssm.domain;\r\npublicclassSUser{\r\n//成员变量\r\nprivateIntegerid;\r\nprivateStringname;\r\nprivateStringaccount;\r\nprivateStringpassword;\r\n//构造函数\r\npublicSUser(){\r\nsuper();\r\n}\r\npublicSUser(Integerid,Stringname,Stringaccount,Stringpassword){\r\nsuper();\r\nthis.id=id;\r\nthis.name=name;\r\nthis.account=account;\r\nthis.password=password;\r\n}\r\n//成员方法\r\npublicIntegergetId(){\r\nreturnid;\r\n}\r\npublicvoidsetId(Integerid){\r\nthis.id=id;\r\n}\r\npublicStringgetName(){\r\nreturnname;\r\n}\r\npublicvoidsetName(Stringname){\r\nthis.name=name;\r\n}\r\npublicStringgetPassword(){\r\nreturnpassword;\r\n}\r\npublicvoidsetPassword(Stringpassword){\r\nthis.password=password;\r\n}\r\npublicStringgetAccount(){\r\nreturnaccount;\r\n}\r\npublicvoidsetAccount(Stringaccount){\r\nthis.account=account;\r\n}\r\n}\r\nSUserController.java\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n50\r\n51\r\n52\r\n53\r\n54\r\n55\r\n56\r\n57\r\n58\r\n59\r\n60\r\n61\r\n62\r\n63\r\n64\r\n65\r\n66\r\n67\r\n68\r\n69\r\n70\r\n71\r\n72\r\n73\r\n74\r\n75\r\n76\r\n77\r\n78\r\n79\r\n80\r\n81\r\n82\r\n83\r\n84\r\n85\r\n86\r\n87\r\n88\r\n89\r\n90\r\n91\r\n92\r\n93\r\n94\r\n95\r\n96\r\n97\r\n98\r\n99\r\n100\r\n101\r\n102\r\n103\r\n104\r\n105\r\n106\r\n107\r\n108\r\n109\r\n110\r\n111\r\n112\r\n113\r\n114\r\n115\r\n116\r\n117\r\n118\r\n119\r\n120\r\n121\r\n122\r\n123\r\n124\r\n125\r\n126\r\n127\r\n128\r\n129\r\n130\r\n131\r\n132\r\n133\r\n134\r\n135\r\n136\r\n137\r\n138\r\n139\r\n140\r\n141\r\n142\r\n143\r\n144\r\n145\r\n146\r\n147\r\n148\r\n149\r\n150\r\n151\r\n152\r\n153\r\n154\r\n155\r\n156\r\n157\r\n158\r\n159\r\n160\r\n161\r\n162\r\n163\r\n164\r\n165\r\n166\r\n167\r\npackagecom.ssm.controller;\r\nimportjava.util.List;\r\nimportjavax.annotation.Resource;\r\nimportjavax.servlet.http.HttpServletRequest;\r\nimportorg.springframework.stereotype.Controller;\r\nimportorg.springframework.ui.Model;\r\nimportorg.springframework.web.bind.annotation.RequestMapping;\r\nimportorg.springframework.web.bind.annotation.ResponseBody;\r\nimportcom.ssm.domain.SUser;\r\nimportcom.ssm.service.SUserService;\r\nimportnet.sf.json.JSONObject;\r\n@Controller\r\n@RequestMapping(\"/suser\")\r\npublicclassSUserController{\r\n    @Resource\r\n    privateSUserServicesUserService;\r\n    /**\r\n    *列表数据\r\n    *\r\n    *@parammodel\r\n    *@return\r\n    */\r\n    @ResponseBody\r\n    @RequestMapping(\"/listSUserData\")\r\n    publicList<SUser>listSUserData(Modelmodel){\r\n        List<SUser>sUserList=sUserService.listSUserData();\r\n        returnsUserList;\r\n    }\r\n    /**\r\n    *新增数据\r\n    *\r\n    *@paramrequest\r\n    *@paramsUser\r\n    *@return\r\n    */\r\n    @RequestMapping(\"/addSUserData\")\r\n    @ResponseBody\r\n    publicJSONObjectaddSUserData(HttpServletRequestrequest,SUsersUser){\r\n        JSONObjectjsonObject=newJSONObject();\r\n        try{\r\n            sUserService.addSUserData(sUser);\r\n            jsonObject.put(\"flag\",\"success\");\r\n            jsonObject.put(\"msg\",\"成功\");\r\n        }catch(Exceptione){\r\n            jsonObject.put(\"flag\",\"failed\");\r\n            jsonObject.put(\"msg\",\"失败\");\r\n        }\r\n        returnjsonObject;\r\n    }\r\n    /**\r\n    *修改数据\r\n    *\r\n    *@paramrequest\r\n    *@paramsUser\r\n    *@return\r\n    */\r\n    @RequestMapping(\"/modifySUserData\")\r\n    @ResponseBody\r\n    publicJSONObjectmodifySUserData(HttpServletRequestrequest,SUsersUser){\r\n        JSONObjectjsonObject=newJSONObject();\r\n        try{\r\n            sUserService.modifySUserData(sUser);\r\n            jsonObject.put(\"flag\",\"success\");\r\n            jsonObject.put(\"msg\",\"成功\");\r\n        }catch(Exceptione){\r\n            jsonObject.put(\"flag\",\"failed\");\r\n            jsonObject.put(\"msg\",\"失败\");\r\n        }\r\n        returnjsonObject;\r\n    }\r\n    /**\r\n    *获取数据\r\n    *\r\n    *@paramrequest\r\n    *@parammodel\r\n    *@return\r\n    */\r\n    @ResponseBody\r\n    @RequestMapping(\"/getSUserData\")\r\n    publicSUsergetSUserData(HttpServletRequestrequest,Modelmodel){\r\n        SUsersUser=null;\r\n        Stringparam=request.getParameter(\"id\");\r\n        sUser=sUserService.getSUserData(param);\r\n        returnsUser;\r\n    }\r\n    /**\r\n    *删除数据\r\n    *\r\n    *@paramrequest\r\n    *@paramsUser\r\n    *@return\r\n    */\r\n    @RequestMapping(\"/deleteSUserData\")\r\n    @ResponseBody\r\n    publicJSONObjectdeleteSUserData(HttpServletRequestrequest,SUsersUser){\r\n        JSONObjectjsonObject=newJSONObject();\r\n        try{\r\n            sUserService.deleteSUserData(sUser);\r\n            jsonObject.put(\"flag\",\"success\");\r\n            jsonObject.put(\"msg\",\"成功\");\r\n        }catch(Exceptione){\r\n            jsonObject.put(\"flag\",\"failed\");\r\n            jsonObject.put(\"msg\",\"失败\");\r\n        }\r\n        returnjsonObject;\r\n    }\r\n    /**\r\n    *列表页面\r\n    *\r\n    *@return\r\n    */\r\n    @RequestMapping(\"/getSUserListPage\")\r\n    publicStringgetSUserListPage(){\r\n        return\"suser/listSUser\";\r\n    }\r\n    /**\r\n    *新增页面\r\n    *\r\n    *@return\r\n    */\r\n    @RequestMapping(\"/getSUserAddPage\")\r\n    publicStringgetSUserAddPage(){\r\n        return\"suser/addSUser\";\r\n    }\r\n    /**\r\n    *修改页面\r\n    *\r\n    *@paramrequest\r\n    *@parammodel\r\n    *@return\r\n    */\r\n    @RequestMapping(\"/getSUserModifyPage\")\r\n    publicStringgetSUserModifyPage(HttpServletRequestrequest,Modelmodel){\r\n        Stringparam=request.getParameter(\"id\");\r\n        model.addAttribute(\"param\",param);\r\n        return\"suser/modifySUser\";\r\n    }\r\n    /**\r\n    *查看页面\r\n    *\r\n    *@paramrequest\r\n    *@parammodel\r\n    *@return\r\n    */\r\n    @RequestMapping(\"/getSUserDetailPage\")\r\n    publicStringgetSUserDetailPage(HttpServletRequestrequest,Modelmodel){\r\n        Stringparam=request.getParameter(\"id\");\r\n        model.addAttribute(\"param\",param);\r\n        return\"suser/detailSUser\";\r\n    }\r\n}\r\nSUserService.java\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\npackagecom.ssm.service;\r\nimportjava.util.List;\r\nimportcom.ssm.domain.SUser;\r\npublicinterfaceSUserService{\r\n    publicvoidaddSUserData(SUsersUser);\r\n    publicvoidmodifySUserData(SUsersUser);\r\n    publicvoiddeleteSUserData(SUsersUser);\r\n    publicSUsergetSUserData(Stringid);\r\n    publicList<SUser>listSUserData();\r\n}\r\nSUserServiceImpl.java\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\npackagecom.ssm.service.impl;\r\nimportjava.util.List;\r\nimportjavax.annotation.Resource;\r\nimportorg.springframework.stereotype.Service;\r\nimportcom.ssm.dao.SUserDao;\r\nimportcom.ssm.domain.SUser;\r\nimportcom.ssm.service.SUserService;\r\n@Service(\"sUserService\")\r\npublicclassSUserServiceImplimplementsSUserService{\r\n    @Resource\r\n    privateSUserDaosUserDao;\r\n    @Override\r\n    publicvoidaddSUserData(SUsersUser){\r\n        sUserDao.addSUser(sUser);\r\n    }\r\n    @Override\r\n    publicvoidmodifySUserData(SUsersUser){\r\n        sUserDao.modifySUser(sUser);\r\n    }\r\n    @Override\r\n    publicSUsergetSUserData(Stringid){\r\n        returnsUserDao.detailSUser(id);\r\n    }\r\n    @Override\r\n    publicvoiddeleteSUserData(SUsersUser){\r\n        sUserDao.deleteSUser(sUser);\r\n    }\r\n    @Override\r\n    publicList<SUser>listSUserData(){\r\n        returnsUserDao.listSUser();\r\n    }\r\n}\r\nSUserDao.java\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\npackagecom.ssm.dao;\r\nimportjava.util.List;\r\nimportcom.ssm.domain.SUser;\r\npublicinterfaceSUserDao{\r\n    publicvoidaddSUser(SUsersUser);\r\n    publicvoidmodifySUser(SUsersUser);\r\n    publicvoiddeleteSUser(SUsersUser);\r\n    publicSUserdetailSUser(Stringid);\r\n    publicList<SUser>listSUser();\r\n}\r\n \r\n在resources下添加映射文件\r\n \r\n\r\nSUserMapper.xml\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n50\r\n51\r\n52\r\n53\r\n54\r\n55\r\n56\r\n57\r\n58\r\n59\r\n60\r\n61\r\n62\r\n63\r\n64\r\n65\r\n66\r\n67\r\n68\r\n69\r\n70\r\n71\r\n72\r\n73\r\n74\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<!DOCTYPEmapperPUBLIC\"-//mybatis.org//DTDMapper3.0//EN\"\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\r\n<mappernamespace=\"com.ssm.dao.SUserDao\">\r\n    <resultMapid=\"BaseResultMap\"type=\"com.ssm.domain.SUser\">\r\n        <resultcolumn=\"id\"property=\"id\"jdbcType=\"INTEGER\"/>\r\n        <resultcolumn=\"name\"property=\"name\"jdbcType=\"VARCHAR\"/>\r\n        <resultcolumn=\"account\"property=\"account\"jdbcType=\"VARCHAR\"/>\r\n        <resultcolumn=\"password\"property=\"password\"\r\n            jdbcType=\"VARCHAR\"/>\r\n    </resultMap>\r\n    <sqlid=\"Base_Column_List\">\r\n        id,name,account,password\r\n    </sql>\r\n    <!--查询所有用户-->\r\n    <selectid=\"listSUser\"resultMap=\"BaseResultMap\">\r\n        select\r\n        <includerefid=\"Base_Column_List\"/>\r\n        froms_user\r\n    </select>\r\n    <selectid=\"detailSUser\"resultMap=\"BaseResultMap\">\r\n        select\r\n        <includerefid=\"Base_Column_List\"/>\r\n        froms_userwhereid=#{id}\r\n    </select>\r\n    <updateid=\"modifySUser\">\r\n        updates_userset\r\n        name=#{name},\r\n        account=#{account},\r\n        password=#{password}\r\n        where\r\n        id=#{id,jdbcType=INTEGER}\r\n    </update>\r\n    <deleteid=\"deleteSUser\">\r\n        deletefroms_userwhereid=#{id,jdbcType=INTEGER}\r\n    </delete>\r\n    <!--插入-->\r\n    <insertid=\"addSUser\">\r\n        insertintos_user\r\n        <trimprefix=\"(\"suffix=\")\"suffixOverrides=\",\">\r\n            <iftest=\"id!=null\">\r\n                id,\r\n            </if>\r\n            <iftest=\"name!=null\">\r\n                name,\r\n            </if>\r\n            <iftest=\"account!=null\">\r\n                account,\r\n            </if>\r\n            <iftest=\"password!=null\">\r\n                password,\r\n            </if>\r\n        </trim>\r\n        <trimprefix=\"values(\"suffix=\")\"suffixOverrides=\",\">\r\n            <iftest=\"id!=null\">\r\n                #{id,jdbcType=INTEGER},\r\n            </if>\r\n            <iftest=\"name!=null\">\r\n                #{name,jdbcType=VARCHAR},\r\n            </if>\r\n            <iftest=\"account!=null\">\r\n                #{account,jdbcType=VARCHAR},\r\n            </if>\r\n            <iftest=\"password!=null\">\r\n                #{password,jdbcType=VARCHAR},\r\n            </if>\r\n        </trim>\r\n    </insert>\r\n</mapper>\r\n10.添加相关前台页面\r\nwebapp目录下添加如下信息：\r\n\r\naddSUser.jsp\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n50\r\n51\r\n52\r\n53\r\n54\r\n55\r\n56\r\n57\r\n58\r\n59\r\n60\r\n61\r\n62\r\n63\r\n<%@pagelanguage=\"java\"contentType=\"text/html;charset=UTF-8\"\r\n    pageEncoding=\"UTF-8\"%>\r\n<!DOCTYPEhtmlPUBLIC\"-//W3C//DTDHTML4.01Transitional//EN\"\"http://www.w3.org/TR/html4/loose.dtd\">\r\n<html>\r\n<head>\r\n<metahttp-equiv=\"Content-Type\"content=\"text/html;charset=UTF-8\">\r\n<title>新增页面</title>\r\n<jsp:includepage=\"/includeUI.jsp\"></jsp:include>\r\n</head>\r\n<body>\r\n    <divclass=\"easyui-panel\"title=\"新增\"style=\"width:300px;\">\r\n        <formid=\"ff\"method=\"post\">\r\n            <tablecellpadding=\"5\">\r\n                <tr>\r\n                    <td>id</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"id\"name=\"id\"data-options=\"required:true\"></input></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>name</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"name\"name=\"name\"></input></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>account</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"account\"name=\"account\"></input></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>password</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"password\"name=\"password\"></input></td>\r\n                </tr>\r\n            </table>\r\n            <divalign=\"center\">\r\n                <aclass=\"easyui-linkbutton\"data-options=\"iconCls:\'icon-ok\'\"onclick=\"submit()\">确定</a>\r\n                <aclass=\"easyui-linkbutton\"data-options=\"iconCls:\'icon-cancel\'\"onclick=\"reset()\">重置</a>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</body>\r\n<scripttype=\"text/javascript\">\r\nfunctionsubmit(){\r\n    $(\'#ff\').form(\'submit\',{\r\n        url:\'addSUserData\',\r\n        dataType:\'json\',\r\n        onSubmit:function(){\r\n            //dosomecheck\r\n            //returnfalsetopreventsubmit;\r\n        },\r\n        success:function(data){\r\n            responseText=JSON.parse(data);\r\n            if(responseText.flag==\'success\'){\r\n                $.messager.alert(\'提示\',responseText.msg,\'info\');\r\n                window.opener.location.href=window.opener.location.href;\r\n                window.close();\r\n            }else{\r\n                $.messager.alert(\'错误\',responseText.msg,\'error\');\r\n            }\r\n        }\r\n    });\r\n}\r\nfunctionreset(){\r\n    $(\'#ff\').form(\'clear\');\r\n}\r\n</script>\r\n</html>\r\ndetailSUser.jsp\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n<%@pagelanguage=\"java\"contentType=\"text/html;charset=UTF-8\"\r\npageEncoding=\"UTF-8\"%>\r\n<!DOCTYPEhtmlPUBLIC\"-//W3C//DTDHTML4.01Transitional//EN\"\"http://www.w3.org/TR/html4/loose.dtd\">\r\n<html>\r\n<head>\r\n<metahttp-equiv=\"Content-Type\"content=\"text/html;charset=UTF-8\">\r\n<title>查看页面</title>\r\n<jsp:includepage=\"/includeUI.jsp\"></jsp:include>\r\n</head>\r\n<body>\r\n    <divclass=\"easyui-panel\"title=\"查看\"style=\"width:300px;\">\r\n        <formid=\"ff\"method=\"post\">\r\n            <tablecellpadding=\"5\">\r\n                <tr>\r\n                    <td>id</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"id\"name=\"id\"disabled=\"disabled\"data-options=\"required:true\"></input></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>name</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"name\"name=\"name\"disabled=\"disabled\"></input></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>account</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"account\"name=\"account\"disabled=\"disabled\"></input></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>password</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"password\"name=\"password\"disabled=\"disabled\"></input></td>\r\n                </tr>\r\n            </table>\r\n            <divalign=\"center\">\r\n                <aclass=\"easyui-linkbutton\"data-options=\"iconCls:\'icon-cancel\'\"onclick=\"close()\">关闭</a>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</body>\r\n<scripttype=\"text/javascript\">\r\n$(function(){\r\n    varparam=\'${param.id}\';\r\n    varurl=\'getSUserData?id=\'+param;\r\n    $(\'#ff\').form(\'load\',url);\r\n});\r\nfunctionclose(){\r\n    window.close();\r\n}\r\n</script>\r\n</html>\r\nmodifySUser.jsp\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n50\r\n51\r\n52\r\n53\r\n54\r\n55\r\n56\r\n57\r\n58\r\n59\r\n60\r\n61\r\n62\r\n63\r\n64\r\n65\r\n66\r\n67\r\n68\r\n69\r\n<%@pagelanguage=\"java\"contentType=\"text/html;charset=UTF-8\"\r\npageEncoding=\"UTF-8\"%>\r\n<!DOCTYPEhtmlPUBLIC\"-//W3C//DTDHTML4.01Transitional//EN\"\"http://www.w3.org/TR/html4/loose.dtd\">\r\n<html>\r\n<head>\r\n<metahttp-equiv=\"Content-Type\"content=\"text/html;charset=UTF-8\">\r\n<title>修改页面</title>\r\n<jsp:includepage=\"/includeUI.jsp\"></jsp:include>\r\n</head>\r\n<body>\r\n    <divclass=\"easyui-panel\"title=\"修改\"style=\"width:300px;\">\r\n        <formid=\"ff\"method=\"post\">\r\n            <tablecellpadding=\"5\">\r\n                <tr>\r\n                    <td>id</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"id\"name=\"id\"readonly=\"readonly\"data-options=\"required:true\"></input></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>name</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"name\"name=\"name\"></input></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>account</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"account\"name=\"account\"></input></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>password</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"password\"name=\"password\"></input></td>\r\n                </tr>\r\n            </table>\r\n            <divalign=\"center\">\r\n                <aclass=\"easyui-linkbutton\"data-options=\"iconCls:\'icon-ok\'\"onclick=\"submit()\">确定</a>\r\n                <aclass=\"easyui-linkbutton\"data-options=\"iconCls:\'icon-cancel\'\"onclick=\"cancel()\">取消</a>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</body>\r\n<scripttype=\"text/javascript\">\r\n$(function(){\r\n    varparam=\'${param.id}\';\r\n    varurl=\'getSUserData?id=\'+param;\r\n    $(\'#ff\').form(\'load\',url);\r\n});\r\nfunctionsubmit(){\r\n    $(\'#ff\').form(\'submit\',{\r\n        url:\'modifySUserData\',\r\n        dataType:\'json\',\r\n        onSubmit:function(){\r\n            //dosomecheck\r\n            //returnfalsetopreventsubmit;\r\n        },\r\n        success:function(data){\r\n            responseText=JSON.parse(data);\r\n            if(responseText.flag==\'success\'){\r\n                $.messager.alert(\'提示\',responseText.msg,\'info\');\r\n                window.opener.location.href=window.opener.location.href;\r\n                window.close();\r\n            }else{\r\n                $.messager.alert(\'错误\',responseText.msg,\'error\');\r\n            }\r\n        }\r\n    });\r\n}\r\nfunctioncancel(){\r\n    window.close();\r\n}\r\n</script>\r\n</html>\r\nlistSUser.jsp\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n50\r\n51\r\n52\r\n53\r\n54\r\n55\r\n56\r\n57\r\n58\r\n59\r\n60\r\n61\r\n62\r\n63\r\n64\r\n65\r\n66\r\n67\r\n68\r\n69\r\n70\r\n71\r\n72\r\n73\r\n74\r\n75\r\n76\r\n77\r\n78\r\n79\r\n80\r\n81\r\n82\r\n83\r\n84\r\n85\r\n86\r\n87\r\n88\r\n89\r\n90\r\n91\r\n92\r\n93\r\n94\r\n95\r\n96\r\n97\r\n98\r\n99\r\n<%@pagelanguage=\"java\"contentType=\"text/html;charset=UTF-8\"\r\n    pageEncoding=\"UTF-8\"%>\r\n<!DOCTYPEhtmlPUBLIC\"-//W3C//DTDHTML4.01Transitional//EN\"\"http://www.w3.org/TR/html4/loose.dtd\">\r\n<html>\r\n<head>\r\n<metahttp-equiv=\"Content-Type\"content=\"text/html;charset=UTF-8\">\r\n<title>列表页面</title>\r\n<jsp:includepage=\"/includeUI.jsp\"></jsp:include>\r\n</head>\r\n<body>\r\n    <tableid=dgclass=\"easyui-datagrid\"title=\"列表页面\"style=\"width:500px\"\r\n        data-options=\"rownumbers:true,\r\n                    singleSelect:true,\r\n                    method:\'post\',\r\n                    loadMsg:\'数据加载中，请稍等...\',\r\n                    toolbar:toolbar,\r\n                    pagination:true,\r\n                    pageSize:10\">\r\n        <thead>\r\n            <tr>\r\n                <thdata-options=\"field:\'id\',width:100\">ID</th>\r\n                <thdata-options=\"field:\'name\',width:100\">Name</th>\r\n                <thdata-options=\"field:\'account\',width:100,align:\'left\'\">Account</th>\r\n                <thdata-options=\"field:\'password\',width:100,align:\'right\'\">Password</th>\r\n            </tr>\r\n        </thead>\r\n    </table>\r\n</body>\r\n<scripttype=\"text/javascript\">\r\n$(function(){\r\n    //指定url\r\n    $(\'#dg\').datagrid({\r\nurl:\'listSUserData\',\r\n});\r\n//刷新表格\r\n$(\"#dg\").datagrid(\"reload\");\r\n});\r\nvartoolbar=[{\r\n    text:\'新增\',\r\n    iconCls:\'icon-add\',\r\n    handler:function(){\r\n        varurl=\"getSUserAddPage\";\r\n        window.open(url,\"newWindow\");\r\n    }\r\n},{\r\n    text:\'修改\',\r\n    iconCls:\'icon-edit\',\r\n    handler:function(){\r\n        vardata=$(\"#dg\").datagrid(\"getSelected\");\r\n        if(data!=null){\r\n            varurl=\"getSUserModifyPage?id=\"+data.id;\r\n            window.open(url,\"newWindow\");\r\n        }else{\r\n            $.messager.alert(\'提示\',\'请选择一条记录！\',\'info\');\r\n        }\r\n    }\r\n},{\r\n    text:\'删除\',\r\n    iconCls:\'icon-remove\',\r\n    handler:function(){\r\n        vardata=$(\"#dg\").datagrid(\"getSelected\");\r\n        if(data!=null){\r\n            $.messager.confirm(\'提示\',\'确定要删除吗？\',function(r){\r\n                if(r){\r\n                    $.ajax({\r\n                                            type:\"POST\",\r\n                                            url:\"deleteSUserData\",\r\n                                            data:\"id=\"+data.id,\r\n                                            dataType:\"json\",\r\n                                            success:function(data){\r\n                                                    if(data.flag==\"success\"){\r\n                                                        $.messager.alert(\'提示\',data.msg,\'info\');\r\n                                                        $(\"#dg\").datagrid(\'reload\');\r\n                                        }else{\r\n                                            $.messager.alert(\'错误\',data.msg,\'error\');\r\n                                        }\r\n                                            }\r\n                                    });\r\n                }\r\n            });\r\n        }else{\r\n            $.messager.alert(\'提示\',\'请选择一条记录！\',\'info\');\r\n        }\r\n    }\r\n},{\r\n    text:\'查看\',\r\n    iconCls:\'icon-search\',\r\n    handler:function(){\r\n        vardata=$(\"#dg\").datagrid(\"getSelected\");\r\n        if(data!=null){\r\n            varurl=\"getSUserDetailPage?id=\"+data.id;\r\n            window.open(url,\"newWindow\");\r\n        }else{\r\n            $.messager.alert(\'提示\',\'请选择一条记录！\',\'info\');\r\n        }\r\n    }\r\n}];\r\n</script>\r\n</html>\r\n includeUI.jsp为引入easyui样式公共文件\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n<%@pagelanguage=\"java\"contentType=\"text/html;charset=UTF-8\"\r\npageEncoding=\"UTF-8\"%>\r\n<%@tagliburi=\"http://java.sun.com/jsp/jstl/core\"prefix=\"c\"%>\r\n<!DOCTYPEhtmlPUBLIC\"-//W3C//DTDHTML4.01Transitional//EN\"\"http://www.w3.org/TR/html4/loose.dtd\">\r\n<html>\r\n    <head>\r\n        <metahttp-equiv=\"Content-Type\"content=\"text/html;charset=UTF-8\">\r\n        <title>js/css</title>\r\n        <!--以下内容引入为默认easyui样式-->\r\n        <linkrel=\"stylesheet\"type=\"text/css\"href=\"<%=request.getContextPath()%>/jquery-easyui/themes/default/easyui.css\">\r\n        <linkrel=\"stylesheet\"type=\"text/css\"href=\"<%=request.getContextPath()%>/jquery-easyui/themes/icon.css\">\r\n        <scripttype=\"text/JavaScript\"src=\"<%=request.getContextPath()%>/jquery-easyui/jquery.min.js\"></script>\r\n        <scripttype=\"text/javascript\"src=\"<%=request.getContextPath()%>/jquery-easyui/jquery.easyui.min.js\"></script>\r\n        <scripttype=\"text/javascript\"src=\"<%=request.getContextPath()%>/jquery-easyui/locale/easyui-lang-zh_CN.js\"></script>\r\n    </head>\r\n    <body>\r\n    </body>\r\n</html>\r\n11.展示效果\r\n至此，简单的ssm框架整合已经完成，同时添加了基本的操作功能；\r\n列表页面\r\n\r\n新增页面\r\n\r\n修改页面\r\n\r\n查看页面\r\n\r\n删除操作\r\n','#JAVA#/#maven#',5,NULL,1,'yc','2019-03-09',NULL,NULL,'提供两种开发工具\r\nSSM框架项目可以使用Eclipse进行开发为了能简化开发流程，首先需要在Eclipse中安装SpringIDE插件，详细安装步骤请参考：\r\nhttps://blog.csdn.net/zhen_6137/article/details/79383941\r\n或者使用Spring官方提供的STS工具进行开发，下载地址：\r\nhttps://spring.io/tools/sts/legacy',NULL,NULL,NULL,NULL,NULL),(52,'老干部','','','Linux下的定时任务crontab的配置','images/7.jpg','> crontab是linux中的一种定时调度配置管理，我们可以使用crontab来按照自己的需求配置相应的定时任务\r\n\r\n1.查看linux下是否已经安装了crontab以及相关服务\r\n    rpm -qa|grep vixie-cron\r\n    rpm -qa|grep crontabs\r\n其中vixie-cron软件包是cron的主程序。\r\ncrontabs软件包是用来安装、卸装、或列举用来驱动 cron 守护进程的表格的程序。\r\n \r\n如果系统中没有安装这两个软件包，则需要手动安装，执行如下命令：\r\n    yum -y install vixie-cron\r\n    yum -y install crontabs\r\n \r\n2.确认crontab服务是否已经启动\r\n    cron服务对应的后台进程名称为cornd，所以我们需要查看crond进程的状态。\r\n \r\n    查看crontd进程运行状态：service crond status 或者 systemctl status crond.service\r\n    启动crontab服务：service crond start 或者 systemctl start crond.service\r\n    停止crontab服务：service crond stop 或者 systemctl stop crond.service\r\n    重启crontab服务：service crond restart 或者 systemctl restart crond.service\r\n    重新载入crontab配置：service crond reload 或者 systemctl reload crond.service \r\n    （备注：在CentOS 7 以后的版本中建议使用systemctl命令来监控和调用服务）\r\n \r\n3.配置定时任务\r\n    cron有两个配置文件，一个是一个全局配置文件（/etc/crontab），是针对系统任务的；\r\n一组是crontab命令生成的配置文件（/var/spool/cron下的文件），是针对某个用户的.定时任务配置到任意一个中都可以。\r\n \r\n在/etc/crontab中添加定时任务\r\n \r\n普通用户配置定时任务：','',5,NULL,3,'yc','2019-03-09',NULL,NULL,'crontab是linux中的一种定时调度配置管理，我们可以使用crontab来按照自己的需求配置相应的定时任务',NULL,NULL,NULL,NULL,NULL),(53,'老干部','','','VNC CentOS Linux下VNC Server远程桌面配置详解','images/6.jpg','# VNC概述\r\n  VNC (Virtual Network Console)是虚拟网络控制台的缩写。VNC 是一款优秀的远程控制工具软件，由著名的 AT&T 的欧洲研究实验室开发的。VNC 是在基于 UNIX 和 Linux操作系统的免费的开源软件，远程控制能力强大，高效实用，其性能可以和 Windows 或 MAC中的任何远程控制软件媲美。在 Linux 中，VNC 包括以下四个命令：vncserver，vncviewer，vncpasswd，和 vncconnect。大多数情况下只需要其中的两个命令：vncserver 和 vncviewer。目前，原来的AT&T版本已经不再使用，因为更多有重大改善的分支版本已经出现， 像是RealVNC， VNC tight 和UltraVNC。 Real VNC 是当前最活跃和强大的主流应用。\r\n RealVNC官方网址  :  http://www.realvnc.com/\r\n Tight VNC官方网址:  http://www.tightvnc.com/\r\n UltraVNC官方网址 ： http://www.uvnc.com/\r\n#  VNC原理\r\nVNC系统由客户端，服务端和一个协议组成。VNC的服务端目的是分享其所运行机器的屏幕， 服务端被动的允许客户端控制它。 VNC客户端（或Viewer） 观察控制服务端，与服务端交互。 VNC 协议 Protocol (RFB)是一个简单的协议，传送服务端的原始图像到客户端（一个X,Y 位置上的正方形的点阵数据）， 客户端传送事件消息到服务端。\r\n服务器发送小方块的帧缓存给客户端，在最简单的情况，VNC协议使用大量的带宽，因此各种各样的方法被发明出来减少通讯的开支，举例来说，有各种各样的编码方法来决定最有效率的方法来传送这些点阵方块）\r\n协议允许客户端和服务端去协议哪种编码会被使用，最简单的编码，被大多数客户端和服务端所支持的是， 从左到右的像素扫描数据的原始编码， 当原始的满屏被发送后，只发送变化的方块区域。这种编码在幁间只有小部分屏幕变化的情况下工作的非常好（像是鼠标键在桌面移动的情况，或在光标处敲击文字），不过如果大量的像素同时变化带宽将会增加的非常高，像是拖动一个窗口或观看全屏录像。\r\nVNC默认使用TCP端口5900至5906，而JAVA的VNC客户端使用5800至5806。一个服务端可以在5500口用“监听模式”连接一个客户端，使用监听模式的一个好处是服务端不需要设置防火墙。\r\nUNIX上的VNC称为xvnc，同时扮演两种角色，对X窗口系统的应用程序来说它是X server，对于VNC客户端来说它是VNC服务器程序。\r\n# VNC安装配置\r\n安装相应桌面环境与vnc服务端和客户端：\r\n# yum groupinstall \"GNOME Desktop Environment\"（CentOS 5.x安装GNOME桌面环境）\r\n# yum groupinstall \"X Window System\" \"Desktop\"（CentOS 6.x安装GNOME桌面环境）\r\n# yum groupinstall Xfce（CentOS安装Xfce桌面环境，可选）\r\n# yum install vnc-server vnc* （CentOS 5.x里）\r\n# yum install tigervnc-server tigervnc （CentOS 6.x里）\r\n说明：Xfce与KDE，Gnome都是图形桌面环境，其特点是占用资源更小资源占用情况大致为：Gnome>KDE>Xfce。具体情况与版本有关。一般版本越新，资源占用越大。\r\n1.确认VNC是否安装\r\n默认情况下，CentOS Linux安装程序会将VNC服务安装在系统上。\r\n确认是否已经安装VNC服务及查看安装的VNC版本\r\n[root@ localhost ~]# rpm -q vnc-server\r\nvnc-server-4.1.2-9.el5\r\n[root@ localhost ~]#\r\n若系统没有安装,可以到操作系统安装盘的Server目录下找到VNC服务的RPM安装包vnc-server-4.1.2-9.el5.x86_64.rpm，安装命令如下\r\nrpm -ivh /mnt/Server/vnc-server-4.1.2-9.el5.x86_64.rpm\r\n也可以连网直接用yum源安装。\r\n2.启动VNC服务\r\n使用vncserver命令启动VNC服务，命令格式为“vncserver :桌面号”，其中“桌面号”用“数字”的方式表示，每个用户连接需要占用1个桌面\r\n启动编号为1的桌面示例如下\r\n=======================================================================\r\n[root@ localhost ~]# vncserver :1\r\nYou will require a password to access your desktops.\r\nPassword:                                            #要求输入密码\r\nVerify:                                                #验证刚才输入的密码\r\nxauth:  creating new authority file /root/.Xauthority\r\nNew \'testdb:1 (root)\' desktop is testdb:1\r\nCreating default startup script. /root/.vnc/xstartup\r\nStarting applications specified in /root/.vnc/xstartup\r\nLog file is /root/.vnc/testdb:1.log\r\n=======================================================================\r\n命令执行的过程中，是在root用户提示符下执行同时也是第一次执行，会在此用户的主目录（/root/）下生成.vnc子目录和相应的配置文件，同时需要输入密码(vncviewer端用此用户访问的密码)，这个密码被加密保存在此用户主目录下的.vnc子目录（/root/.vnc/passwd）中；同时在用户主目录下的.vnc子目录中为用户自动建立xstartup配置文件（/root/.vnc/xstartup），在每次启动VND服务时，都会读取该文件中的配置信息。上面的是添加root用户通过VNC访问权限，如果想添加其他用户访问权限，需要在相应的用户命令提示符下进行上面的操作（如test用户也需要执行[test@ localhost ~]$ vncserver :1   在相应的主目录下生成对应的.vnc子目录）。对不同用户的访问密码更改也需要在相应的命令提示符下操作。\r\n在/root/.vnc/目录下还有一个“root:1.pid”文件，这个文件记录着启动VNC后对应后天操作系统的进程号，用于停止VNC服务时准确定位进程号.\r\n3.VNC服务使用的端口号与桌面号的关系\r\nVNC服务使用的端口号与桌面号相关，VNC使用TCP端口从5900开始，对应关系如下\r\n桌面号为“1”  ---- 端口号为5901\r\n桌面号为“2”  ---- 端口号为5902\r\n桌面号为“3”  ---- 端口号为5903\r\n……\r\n基于Java的VNC客户程序Web服务TCP端口从5800开始，也是与桌面号相关，对应关系如下\r\n桌面号为“1”  ---- 端口号为5801\r\n桌面号为“2”  ---- 端口号为5802\r\n桌面号为“3”  ---- 端口号为5803\r\n……\r\n基于上面的介绍，如果Linux开启了防火墙功能，就需要手工开启相应的端口，以开启桌面号为“1”相应的端口为例，命令如下\r\n=========================================================================\r\n[root@ localhost ~]# iptables -I INPUT -p tcp --dport 5901 -j ACCEPT\r\n[root@ localhost ~]# iptables -I INPUT -p tcp --dport 5801 -j ACCEPT\r\n==========================================================================\r\n4.测试VNC服务\r\n第一种方法是使用VNC Viewer软件登陆测试，操作流程如下\r\n启动VNC Viewer软件 --> Server输入“192.168.1.100:1” --> 点击“OK” --> Password输入登陆密码 --> 点击“OK”登陆到X-Window图形桌面环境 --> 测试成功\r\n第二种方法是使用Web浏览器（如Firefox,IE,Safari）登陆测试，操作流程如下\r\n地址栏输入192.168.1.100:1:5801/ --> 出现VNC viewer for Java（此工具是使用Java编写的VNC客户端程序）界面，同时跳出VNC viewer对话框，在Server处输入“144.194.192.183:1”点击“OK” --> Password输入登陆密码 --> 点击“OK”登陆到X-Window图形桌面环境 --> 测试成功\r\n（注：VNC viewer for Java需要JRE支持，如果页面无法显示，表示没有安装JRE，可以到http://java.sun.com/javase/downloads/index_jdk5.jsp这里下载最新的JRE进行安装）\r\n5.配置VNC图形桌面环境为KDE或GNOME桌面环境\r\n如果您是按照我的上面方法进行的配置的，登陆到桌面后效果是非常简单的，只有一个Shell可供使用，这是为什么呢？怎么才能看到可爱并且美丽的KDE或GNOME桌面环境呢？回答如下\r\n之所以那么的难看，是因为VNC服务默认使用的是twm图形桌面环境的，可以在VNC的配置文件xstartup中对其进行修改(需要登录的每个用户主目录下的.vnc/xstartup文件都要修改)，先看一下这个配置文件。\r\n==========================================================================\r\n[root@ localhost ~]# vi /root/.vnc/xstartup\r\n#!/bin/sh\r\n# Uncomment the following two lines for normal desktop:\r\n# unset SESSION_MANAGER\r\n# exec /etc/X11/xinit/xinitrc\r\n[ -x /etc/vnc/xstartup ] && exec /etc/vnc/xstartup\r\n[ -r $HOME/.Xresources ] && xrdb $HOME/.Xresources\r\nxsetroot -solid grey\r\nvncconfig -iconic &\r\nxterm -geometry 80x24+10+10 -ls -title \"$VNCDESKTOP Desktop\" &\r\ntwm &\r\n==========================================================================\r\n取消这个xstartup文件中下面两行的注释，就是删除行前面的“#”的符号。\r\n# unset SESSION_MANAGER\r\n# exec /etc/X11/xinit/xinitrc\r\n这个xstartup文件的最后一行twm& 前面加“#” 注释”， 在新建一行添加gnome-session &  ，重新启动vncserver服务后就可以登陆到GNOME桌面环境。\r\n这个xstartup文件的最后一行twm& 前面加“#” 注释”， 在新建一行添加startkde &  ，重新启动vncserver服务后就可以登陆到KDE桌面环境 。                             \r\n重新启动vncserver服务的方法：\r\n==========================================================================[[root@ localhost ~]# vncserver -kill :1\r\n[root@ localhost ~]# vncserver :1\r\n==========================================================================\r\n6.配置多个桌面\r\n可以使用如下的方法启动多个桌面的VNC\r\nvncserver :1\r\nvncserver :2\r\nvncserver :3\r\n……\r\n但是这种手工启动的方法在服务器重新启动之后将失效，因此，下面介绍如何让系统自动管理多个桌面的VNC，方法是将需要自动管理的信息添加到/etc/sysconfig/vncservers配置文件中，先以桌面1为root用户、桌面2为test用户为例进行配置如下：\r\n格式为：VNCSERVERS=\"桌面号:使用的用户名  桌面号:使用的用户名\"   \r\n修改/etc/sysconfig/vncservers文件，未经修改的vncservers文件如下所示：\r\n===========================================================\r\n[root@localhost ~]# more /etc/sysconfig/vncservers\r\n# The VNCSERVERS variable is a list of display:user pairs.\r\n#\r\n# Uncomment the lines below to start a VNC server on display :2\r\n# as my \'myusername\' (adjust this to your own).  You will also\r\n# need to set a VNC password; run \'man vncpasswd\' to see how\r\n# to do that. \r\n#\r\n# DO NOT RUN THIS SERVICE if your local area network is\r\n# untrusted!  For a secure way of using VNC, see\r\n# <URL:http://www.uk.research.att.com/archive/vnc/sshvnc.html>.\r\n# Use \"-nolisten tcp\" to prevent X connections to your VNC server via TCP.\r\n# Use \"-nohttpd\" to prevent web-based VNC clients connecting.\r\n# Use \"-localhost\" to prevent remote VNC clients connecting except when\r\n# doing so through a secure tunnel.  See the \"-via\" option in the\r\n# `man vncviewer\' manual page.\r\n# VNCSERVERS=\"2:myusername\"\r\n# VNCSERVERARGS[2]=\"-geometry 800x600 -nolisten tcp -nohttpd -localhost\"\r\n===========================================================\r\n \r\n将最后两行配置信息取消注释。\r\nVNCSERVERS=\"2:myusername\"\r\n上面这行添加两个用户，可以添加多个用户中间用空格隔开，如下：\r\nVNCSERVERS=\"1：root  2：test\"\r\n VNCSERVERARGS[2]=\"-geometry 800x600 -nolisten tcp -nohttpd -localhost\"\r\n上面这行是每个用户的配置参数，用户和用户参数要一一对应，修个成如下参数：\r\nVNCSERVERARGS[1]=\"-geometry 1024x768 \"\r\nVNCSERVERARGS[2]=\"-geometry 1024x768 \"\r\n关于参数配置说明：\r\n1）、VNCSERVERS 是用来设定可以使用VNC的服务器账号，可以设定多个，这里的“用户名”是指linux系统用户的名称（root用户和普通用户），例如上面root、test，但是中间要用空格隔开。使用VNCVIEWER登录时，192.168.1.100:1表示是以root账号登录，以此类推。\r\n2）、注意前面的数字“1”或是“2”为桌面号，每个用户可以有多个桌面号，但是每个桌面号只能属于一个用户，当你要从其它电脑用VNC访问服务器时，就需要用IP:1这种方法，而不能直接用IP。如假定你的VNC服务器IP是192.168.1.100，那想进入VNC服务器，并以test用户登录时，需要在vncviewer里输入IP的地方输入：192.168.1.100:2 （2对应的就是test用户）,如果是root,那就是192.168.1.100:1 （1对应的就是root用户）；\r\n3）、下面两行[1][2]最好与上面那个相对应，后面的800X600可以换成你电脑支持的分辨率。注意中间的”x”不是“*”，而是小写字母”x”。\r\n4）：-geometry 表示远程桌面分辨率，默认为800x600，根据vncviewer所在电脑的分辨率设置。\r\n5）：-nohttpd  表示不监听HTTP端口（58xx），这个在参数里面去掉不加影响效果。\r\n6）：-nolisten tcp 表示不监听TCP端口（60xx），这个在参数里去掉不加影响效果。\r\n7）：-localhost 只运行从本机访问，这个在参数里去掉不加，加了远程登录不了。\r\n8）：AlwaysShared 默认只允许一个VNCVIEWER连接，此参数表示同一个显示端口允许多用户同时登录.\r\n9）：-depth  表示色深，参数有8,16,24,32. 可以不加。\r\n7）: SecurityTypes None 登录不需要密码认证VncAuth默认值,要密码认证。\r\n7.修改VNC访问的密码\r\n使用命令vncpasswd对不同用户的VNC的密码进行修改，一定要注意，如果配置了不同用户的VNC需要分别到各自用户中进行修改，例如在我的这个实验中，root用户和test用户需要分别修改，修改过程如下：\r\n==========================================================================\r\n[root@ localhost ~]# vncpasswd\r\nPassword:                                                       #输入密码\r\nVerify:                                                           #确认密码\r\n[root@ localhost ~]#\r\n8.启动和停止VNC服务\r\n1）启动VNC服务命令\r\n[root@ localhost ~]# service vncserver start\r\n2）停止VNC服务命令\r\n[root@ localhost ~]# service vncserver stop\r\n3）重新启动VNC服务命令\r\n[root@ localhost ~]# service vncserver restart\r\n\r\n9设置VNC服务随系统启动自动加载\r\n第一种方法：使用“ntsysv”命令启动图形化服务配置程序，在vncserver服务前加上星号，点击确定，配置完成。\r\n第二种方法：使用“chkconfig”在命令行模式下进行操作，命令使用如下（预知chkconfig详细使用方法请自助式man一下）\r\n[root@testdb ~]# chkconfig vncserver on\r\n[root@testdb ~]# chkconfig --list vncserver\r\nvncserver       0:off   1:off   2:on    3:on    4:on    5:on    6:off\r\n10、可能遇到的问题:\r\n1）、黑屏\r\n在Linux里安装配置完VNC服务端，发现多用户登陆会出现黑屏的情况，具体的现象为：\r\n客户端可以通过IP与会话号登陆进入系统，但登陆进去是漆黑一片，除了一个叉形的鼠标以外，伸手不见五指。\r\n原因：用户的VNC的启动文件权限未设置正确。\r\n解决方法：将黑屏用户的xstartup（一般为：/用户目录/.vnc/xstartup）文件的属性修改为755（rwxr-xr-x）。\r\n完后杀掉所有已经启动的VNC客户端：\r\nvncserver -kill :1\r\nvncserver -kill :2 （注意：-kill与:1或:2中间有一空格）\r\n最后重启vncserver服务即可！ # service vncserver restart\r\n注意：vncserver只能由启动它的用户来关闭，即时是root也不能关闭其它用户开启的vncserver，\r\n除非用kill命令暴力杀死进程。\r\n2）、Windown下如何登陆VNC Server\r\na从浏览器登录（浏览器需要安装JAVA支持库，作为java applet来实现，才能登录控制VNC服务器，可以yum install java*安装）\r\n直接从浏览器中输入如下地址：\r\nhttp://xxx.xxx.xxx.xxx:5801\r\nb从VNC客户端登录\r\n在windows上安装vnc客户端，然后输入xxx.xxx.xxx.xxx:x，连接登录。\r\n备注：\r\n输入的格式为IP:桌面号，桌面号要看你自己的配置而定。如192.168.80.128:1\r\n登陆提示connection refused(10061)，则是因为linux防火墙的问题，请检查防火墙设置。\r\n后面的尾缀”:x”也是不能少的，要不然老提示failed to connect : connection refused (10061)\r\n11.小结\r\n  VNC的详细配置方法到此已经写完，都是在网上搜索的加自己的实践。VNC对于远程调用图形化界面来说非常的轻巧和便捷！','',1,NULL,2,'yc','2019-03-09',NULL,NULL,'VNC (Virtual Network Console)是虚拟网络控制台的缩写。VNC 是一款优秀的远程控制工具软件，由著名的 AT&T 的欧洲研究实验室开发的。VNC 是在基于 UNIX 和 Linux操作系统的免费的开源软件，远程控制能力强大，高效实用，其性能可以和 Windows 或 MAC中的任何远程控制软件媲美。在 Linux 中，VNC 包括以下四个命令：vncserver，vncviewer，vncpasswd，和 vncconnect。大多数情况下只需要其中的两个命令：vncserver 和 vncviewer。目前，原来的AT&T版本已经不再使用，因为更多有重大改善的分支版本已经出现， 像是RealVNC， VNC tight 和UltraVNC。 Real VNC 是当前最活跃和强大的主流应用。\r\n RealVNC官方网址  :  http://www.realvnc.com/\r\n Tight VNC官方网址:  http://www.tightvnc.com/\r\n UltraVNC官方网址 ： http://www.uvnc.com/',NULL,NULL,NULL,NULL,NULL),(54,'老干部','','','Linux基础命令','images/1.jpg','Part1:\r\n系统命令存放:/bin或/sbin\r\n#start x 调回xwindows\r\n/etc/inittab\r\n启动级别解释:0-6\r\n0:关机\r\n1:单用户\r\n2:无网络无图形 \r\n3:有网络无图形\r\n4:预留\r\n5:有网络有图形\r\n6:重启\r\n-----------------------------------------------------------\r\nshell:命令解释器，用户通过shell和操作系统的内核之间进行交互,linux命令又分为\r\n内部，与外部俩部分，例如：qq软件不属于linux原有命令。\r\n-----------------------------------------------------------\r\nPart2:\r\n基础捷键：\r\n1.tab ：补齐\r\n2.反斜杠 \\ 强制换行 \r\n3.ctrl+u 清空至行首 \r\n4.ctrl+k 清空至行尾 \r\n5.ctrl+l 清屏 \r\n6.ctrl+c 取消本次命令编辑终断\r\n扩展：windows帮助执行：cmd输入 dir /? \r\n----------------------------------------------------\r\nPart3:基础命令\r\n一.目录操作命令\r\n1.pwd:打印显示当前路径\r\n2.cd:切换工作目录\r\n\r\n#cd ~ 表示返回主目录\r\n绝对路径与相对路径:\r\n绝对路径：直观从根开始执行 ：#cd /root/Desktop\r\n相对路径：从当下开始执行 #cd . 或 cd .. 当前目录 ，上级目录 的切换\r\n--------------------------------------------------------------------\r\n3.ls:显示目录内容\r\n\r\n-a 显示所有子目录和文件信息包括隐藏文件\r\n-l 以长格式显示 \r\n-R 递归显示内容\r\n-i 查看文件的节点数\r\n-d 显示目录本身属性（只显示目录不关心内容）\r\n--color 以颜色区别不同类型文件 \r\n例如：ls -l /usr表示以长格式显示/usr下的文件信息\r\n4.mkdir:创建目录\r\n#mkdir -p /haha/xixi/qq 递归一次创建多个目录\r\n5.du:统计目录及文件空间占用情况\r\n-a 默认-a \r\n-s 只统计每个参数占用空间大小\r\n-h 以更为易懂的字节单位(K,M 等)\r\n二.文件操作命令\r\n6.touch:创建空文件 \r\ntouch test.txt表示在当前目录下创建test.txt \r\ntouch /usr/test.txt表示在usr目录下创建test.txt\r\n7.cp:复制 格式:#cp 源 目标 \r\n例：cp /usr/test.txt /usr/test2.txt /home表示将usr下面的test.txt和test2.txt拷贝到home目录下\r\n例：cp -R /usr /home 其中R表示复制目录 表示就爱了个usr目录拷贝到home下\r\n-R 递归复制整个目录树\r\n-p 保持原文件属性不变（时间，作者...）\r\n-f 强制覆盖目标同名文件或目录\r\n-i 需要覆盖文件或目录时进行提醒\r\n---------------------------------------\r\n8.rm -rf:强制删除不提示 \r\nrm file1 删除file1 \r\nrm -r dir1 删除目录dir1（一般使用rm -rf dir1 强制删除所有文件，避免询问是否删除）\r\n9.mv:移除 \"在同目录下修改文件名\"\r\n例：mv test.txt test2.txt表示将test.txt改名为test2.txt\r\n例：mv test.txt /home表示将test.txt剪切到/home下 \r\n10.which:查找系统命令位置\r\n11.find:查找文件或目录 格式#find / -name qq\r\n-name:按文件名称查找\r\n-size:按文件大小查找\r\n-user:按文件属主查找\r\n-type:按文件类型查找\r\n12.ln -s :软链接 格式：#ln -s /etc/passwd /home\r\n-----------------------------------------------------\r\n三.文件内容操作命令\r\n13.cat 显示文件全部内容\r\n14.more 逐屏显示文件内容\r\n15.less 与more命令相同 格式：#cat /etc/passwd |more或less\r\n16.head -数字 查看显示默认前10行 格式：#head /etc/passwd\r\n17.tail -数字 查看显示默认后10行 格式：#tail /etc/passwd \r\ntail -F 监控 执行不退出多用于监视日志\r\n18.wc:统计文件中单词数量 格式：#wc -l /etc/passd\r\n-l:统计行数\r\n-w:统计单词个数\r\n-c:统计字节数 \r\n----------------------\r\n19.grep:过滤 格式：#grep ^root /etc/passwd \r\n-i：查找忽略大小写\r\n-v：反向过滤\r\n^:表示以。。。开头\r\n$:表示以。。。结尾\r\n20.tar:归档及压缩命令 \r\n-c:创建.tar格式的包文件\r\n-x:解开.tar格式的包文件\r\n-v:输出详细信息\r\n-f:表示使用归档文件 \r\n-p:打包时保留原始文件及目录权限 \r\n-t:列表查看包内的文件\r\n-C：指定解压路径\r\n格式：#tar -cvf passwd.tar passwd 创\r\n#tar -xvf passwd.tar -C /home 解\r\n调用： -z :gzip \r\n-j :bzip2\r\n格式:#tar -czvf passwd.tar.gz \r\n#tar -cjvf passwd.tar.bz2 创\r\n#tar -xzvf passwd.tar.gz -C /home \r\n#tar -xjvf passwd.tar.bz2 -C /home 解\r\n ','#Linux#',5,NULL,5,'yc','2019-03-09',NULL,NULL,'系统命令存放:/bin或/sbin\r\n#start x 调回xwindows\r\n/etc/inittab\r\n启动级别解释:0-6\r\n0:关机\r\n1:单用户\r\n2:无网络无图形 \r\n3:有网络无图形\r\n4:预留\r\n5:有网络有图形\r\n6:重启',NULL,NULL,NULL,NULL,NULL),(55,'老干部','','','Spring基础知识学习总结','images/1.jpg','Spring是什么？\r\nSpring是一个开源框架\r\nSpring为简化企开发而生，使用spring可以简化javabean的实现和管理\r\nSpring是一个IOC控制反转/DI依赖注入和AOP容器框架\r\n \r\n-轻量级：非侵入性\r\n-依赖注入IOC DI\r\n-面向切面编程 AOP\r\n-容器：spring是一个容器，它包含并管理整个应用对象的生命周期\r\n-一站式框架(可以整合其他框架)：在IOC和AOP的基础上可以去整合一些优秀的第三方框架（spring自身也提供了展现层SpringMVC和持久层SpringJDBC）\r\n \r\nIOC和DI\r\nIOC（Inversion Of　Control）：其思想是反转资源获取的方向。传统的资源查找方式要求组件向容器发起请求获取资源。作为响应，容器适时的返回资源。而应用了IOC之后，容器主动的将资源推送给它所管理的组件，组件所要做的仅仅是选择一种合适的方式来接受资源，也被称为查找的被动形式。\r\nDI（Dependency Injection）：IOC的另一种表达方式，即组件以一些预定好的方式（例如setter方法）接受来自容器注入的资源。\r\n \r\nIOC前生\r\n--分离接口与实现（自己实现）\r\n--工厂设计模式（工厂中获取）\r\n--采用控制反转\r\n \r\n \r\n \r\nIOC&DI概述：\r\n配置bean\r\n配置形式：基于XML文件的方式；基于注解的方式\r\nBean的配置方式：通过全类名（反射）、通过工厂方法（静态工厂方法&实例工厂方法）、\r\nIOC容器BeanFactory & ApplicaitonContext概述\r\n依赖注入的方式：属性注入；构造器注入\r\n注入属性细节\r\n自动转配\r\nBean之间的关系：继承；依赖\r\nBean的作用域：singleton单例；prototype；WEB 环境作用域\r\n使用外部属性文件\r\nspEL表达式\r\nIOC容器中Bean的生命周期\r\nSpring4新特性：泛型依赖注入\r\n \r\n在Spring的IOC容器里配置Bean\r\n在XML文件中通过bean节点来配置bean\r\n<!--通过全类名来配置bean    -->\r\n<bean id=\"user\" class=\"cn.demo.spring.User\">\r\n    <constructor-arg name=\"name\" value=\"Spring\"></constructor-arg>\r\n</bean>\r\nid:bean的名称\r\n在ioc容器中必须是唯一的\r\n容id没有指定，spring自动将权限限定性类型作为bean的名字\r\nId可以指定多个名字，名字之间可以用逗号、分号、或者空格分隔\r\nSpring容器\r\n在Spring IOC容器读取bean配置创建bean实例之前，必须对它进行实例化，只有在容器实例化之后，才能从IOC容器里获取bean实例并使用。\r\nSpring提供了两种类型的IOC容器实现：\r\nBeanFactory：IOC容器的基本实现\r\nApplicationContext提供了更多的高级特性，是BeanFactory的子接口\r\nBeanFactory是Spring的基础设施，面向Spring本身；\r\nApplicationContext面向使用Spring框架的开发者，几乎所有的应用场合都直接使用ApplicationContext而非底层的BeanFactory\r\n无论何种方式配置文件是相同的\r\nApplicationContext\r\nApplicationContext的主要是实现类：\r\nClassPathXmlApplicationContext：从类路径加载配置文件\r\nFileSystemXmlApplicationContext：从文件系统中加载配置文件\r\nConfigurableApplictionContext扩展于ApplicationContext，新增两个主要方法：refresh()和close()，让ApplicationContext具有驱动刷新和关闭上下文的能力；\r\nApplicationContext在初始化上下文时就实例化所有的单例Bean。\r\nWebApplictionContext是专门为web应用而准备的，它允许从相当于web根目录的路径中完成初始化工作。\r\n \r\n依赖注入的方式\r\n属性注入\r\n构造器注入\r\n工厂方法注入（很少用，不推荐）\r\n属性注入\r\n通过setter方法注入bean的属性或依赖的对象\r\n属性注入使用<property>元素，使用name属性指定bean的属性名称，value属性或<value>子节点指定属性值\r\n属性注入是实际应用中最常用的注入方式\r\n构造方法注入\r\n通过构造方法注入bean的属性或依赖的对象，它保证了bean实例在实例化之后就能使用。\r\n构造器注入在<constructor-arg>元素里声明，它没有name属性。\r\n \r\n字面值\r\n字面值：可以用字符串表示的值，可以通过<value>元素标签或value属性进行注入。\r\n基本数据类型及其封装类、String等类型都可以采用字面值注入的方式。\r\n若字面值中包含特殊字符，可以使用<![CDATA[]]>把字面值包裹起来。\r\n \r\n \r\n引用其他bean\r\n组成引用程序的bean经常需要相互协作以完成应用程序的功能，要使bean能够相互访问，就必须在bean文职文件中指定对bean的引用。\r\n在bean的配置文件中可以通过<ref>元素或ref属性问bean的属性或构造器参数指定对bena的引用。\r\n也可以在属性或者构造器里包含bean的声明，这样的bean称为内部bean。\r\n \r\n内部bean\r\n当bean实例仅仅给一个特定的属性使用时，可以将其声明为内部bean，内部bean声明直接包含在<property>或<constructor-arg>元素里，不需要设置任何id或name属性。\r\n内部bean不能使用在其他地方。\r\n \r\n注入参数详解：null值和级联属性\r\n可以使用专用的<null/>元素标签为bean的字符串或其他对象类型的属性注入null值。\r\n和Struts、hibernate等框架一样，spring支持级联属性的配置。\r\n集合属性\r\n在Spring中可以通过一组内置的xml标签，例如<list> <set> <map> <array>等来配置集合属性。\r\n配置java.util.list类型的属性需要指定<list>标签，在标签里包含一些元素，这些标签可以通过<value>指向简单的常量值，也可以通过<ref>指向对其他bean的引用，通过<bean>指定内置bean的定义，通过<null/>指定空元素，甚至可以内嵌其他集合。\r\n数组的定义可以使用<array>，也可以和list一样使用<list>\r\n配置java.util.Set需要使用<set>标签，定义元素的方法与List一样\r\nJava.util.Map通过<map>标签定义，<map>标签可以使用多个<entry>作为子标签，每个条目包含一个键和一个值。\r\n必须在<key>标签里定义键\r\n因为键和值的类型没有限制，所以可以自由地位他们指定<value> <ref> <bean>或<null/>元素。\r\n可以将Map的键和值最为<entry>的属性定义，简单常量使用key和value来定义；bean引用通过key-ref和val-ref属性定义。\r\n使用<props>定义java.util.Properties，该标签使用多个<prop>座位子标签，每个子标签必须定义key属性。\r\n \r\n使用P命名空间\r\n为了简化XML文件的配置，越来越多的XML文件采用属性而非子元素配置信息\r\nSpring从2.5版本开始引入了一个新的p命名空间，可以通过<bean>元素属性的方式配置bean的属性。\r\n使用p命名空间后，基于XML的配置方式将进一步简化。\r\n \r\nXML配置里的bean自动装配\r\nSpring IOC容器可以自动装配bean，需要做的仅仅是在<bean>的autowire属性里指定自动装配的模式：byName byType\r\nbyType（根据类型自动装配）：若IOC容器中有多个与目标bean类型一致的bean，则在这种抢矿下，spring将无法判断bean哪个bean最适合该属性，所以不能执行自动装配。\r\nbyName（根据名称自动装配）：必须将目标bean的名称和属性设置的完全相同。\r\nConstructor（通过构造器自动装配）：当bean中存在多个构造器时，此种自动装配方式将会很复杂，不推荐使用。\r\n \r\nXML配置里的bean自动装配缺点\r\n在bean配置文件里设置autowire属性进行自动装配将会装配bean的所有属性，然而，如果希望装配个别属性时，autowire属性就不够灵活了。\r\nAutowire属性要么根据类型自动装配，要么根据名称自动装配，不能两者兼容。\r\n一般情况下，在实际项目中很少使用自动装配的功能，因为和自动装配功能所带来的好处相比起来，明确清晰的配置文档更有说服力一些。\r\n \r\n \r\n基于注解的方式配置bean\r\n组件扫面（component scanning）：Spring能够从classpath下自动扫描，侦测和实例化具有特定注解的组件。\r\n特定组件包括：\r\n         -@Component：基于注解，标识了一个受Spring管理的组件\r\n         -@Respository：标识持久层组件\r\n         -@Service：标识服务层（业务层）组件\r\n         -@Controller：标识表现层组件\r\n         对于扫描到的组件，Spring有默认的命名策略：使用非限定类名，第一个字母小写，也可以在注解中通过value书信值标识组件的名称。\r\n \r\n当在组件类上使用了特定的注解之后，还需要在Spring的配置文件中声明<context：component-scan>\r\n         -base-package属性指定一个需要扫描的基类包，Spring容器将会扫描这个基类包及其子包中的所有类。\r\n-但需要扫描多个包时，可以使用逗号分隔。\r\n-如果仅希望扫描特定的类而非基包下的所有类，可以使用resource-pattern属性过滤特定的类，示例：\r\n        <context:component-scan base-package=\"cn.demo.bean.annotation\" resource-pattern=\"service/*.*\"/>\r\n-<context:include-filter>子节点表示要包含的目标类\r\n-<context:exclude-filter>子节点表示要排除在外的目标类\r\n-<context:component-scan>下可以拥有若干个<context:include-filter>和<context:exclude-filter>子节点\r\n \r\n使用@Autowired自动装配bean\r\n@AutoWired注解自动装配具有兼容类型的单个bean属性\r\n         -构造器，普通字段（即使是非public），一切具有参数的方法都可以应用@Autowired注解。\r\n         -默认情况下，所有使用@Autowired注解的属性都需要被设置，当Spring找不到匹配的bean装配属性时，会抛出异常，若某一个属性允许不被设置，可以设置@Autowired注解的required属性为false；\r\n         -默认情况下，单IOC容器中存在多个类型兼容的bean时，通过类型的自动装配将无法工作，此时可以在@Quailfier已制定注入bean的名称。\r\n         -@Autowired注解也可以应用在数组类型的属性上，此时Spring将会吧所有匹配的bean进行自动装配。\r\n         -@Autowired注解可以应用在集合属性上，此时Spring读取该集合的类型信息，然后自动装配所有与之兼容的bean。\r\n         -@Autowired注解用在java.util.Map上时，若该Map的键值为String，那么Spring将自动装配与之Map值类型兼容的bean，此时bean的名称作为键。\r\n \r\nAOP简介\r\nAspectJ：Java社区你最完整最流行的AOP框架，在Spring2.0以上版本中，可以使用基于AspectJ注解或者基于XML配置的AOP\r\nAOP（Aspect-Object Programming，面向切面编程）：是一种新的方法论，是对传统的OOP（Object-Oriented Programming，面向对象编程）的补充。\r\nAOP的主要编程对象是切面（aspect），而切面模块化横切关注点。\r\n在应用AOP编程时，仍然需要定义公共功能，但可以明确的在定义这个功能在哪里，以什么方式应用，并且不必修改受影响的类，这样一来，横切关注点就被模块化到特殊的对象（切面）里。\r\nAOP的好处：\r\n每个事物逻辑位于一个位置，代码不分散，便于维护和升级\r\n业务模块更简洁，值包含核心业务代码\r\n用AspectJ注解声明切面\r\n要在Spring中声明AspectJ切面，只需要在IOC容器中将切声明为bean实例，当Spring IOC容器中初始化AspectJ切面之后，Spring IOC容器就会为哪些与AspectJ切面相匹配的bean创建代理。\r\n在AspectJ注解中，切面只有一个带有@AspectJ注解的Java类。\r\n通知是标注有某种注解的简单的java方法。\r\nAspectJ支持5种类型的通知注解：\r\n@Before：前置通知，在方法调用之前执行。\r\n@After：后置通知，在方法调用之后执行。\r\n@AfterRunning：返回通知，在方法返回结果之后调用\r\n@AfterThrowing：异常通知，在方法抛出异常之后执行\r\n@Around：环绕通知，围绕着方法执行\r\n \r\n利用方法签名编写AspectJ切入点表达式\r\n最典型的切入点表达式根据方法的签名来匹配各种方法：\r\n-execution * com.spring.demo.LoggingAspect.*(..):匹配LoggingAspect中声明的所有方法，第一个*代表任意修饰符以及任意返回值，第二个*表示任意方法，..匹配任意数量的参数。若目标类与接口与该切面在同一个保重，可以省略包名。\r\n-execution public * LoggingAspect.*(..):匹配LoggingAspect接口的所有公共方法\r\n-execution public int LoggingAspect*(..):匹配LoggingAspect接口中所有返回类型为int的方法\r\n-execution public int LoggingAspect.*(int ,..):匹配第一个参数为int类型的所有方法\r\n-execution public int LoggingAspect.*(int,double):匹配第一个参数类型为int，第二个为double的所有方法\r\n \r\n让通知访问当前连接点的细节\r\n可以在通知方法中声明一个类型为JoinPoint的参数，然后就能访问连接点的细节，例如方法名称和参数值等。\r\n@Before(\"execution(public int cn.demo.aop.impl.CalculatorImpl.*(int,int))\")\r\npublic void beforeMethod2(JoinPoint joinPoint){\r\n    String methodName = joinPoint.getSignature().getName();\r\n    List<Object> args = Arrays.asList(joinPoint.getArgs());\r\n    System.out.println(\"before method2 ......\");\r\n    System.out.println(\"the method \" + methodName + \" start with args \" + args);\r\n}\r\n \r\n基于XML的配置声明切面\r\n除了使用AspectJ注解方式声明切面以外，Spring也支持在Bean配置文件中声明切面的方式。这种声明通过aop schema中的特定元素标签来完成。\r\n正常情况下，基于注解的声明要优先于基于XML的声明，通过AspectJ注解，切面可以兼容AspectJ，而基于Xml的配置则是Spring专有的。由于AspectJ得到越来越多的AOP框架支持，所以注解风格编写的切面将会有更多的重用机会。\r\n以下为XML配置举例：\r\n\r\n\r\n\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<beansxmlns=\"http://www.springframework.org/schema/beans\"\r\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"xmlns:aop=\"http://www.springframework.org/schema/aop\"\r\nxsi:schemaLocation=\"http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/aophttp\r\n    ://www.springframework.org/schema/aop/spring-aop.xsd\">\r\n<!--配置bean-->\r\n<beanid=\"calculatorImpl\"class=\"cn.demo.aop.impl.xml.CalculatorImpl\"></bean>\r\n<!--配置切面bean-->\r\n<beanid=\"logginAspect\"class=\"cn.demo.aop.impl.xml.LogginAspect\"></bean>\r\n<beanid=\"validationAspect\"class=\"cn.demo.aop.impl.xml.ValidationAspect\"></bean>\r\n<!--配置AOP-->\r\n<aop:config>\r\n<!--配置切点表达式-->\r\n<aop:pointcutid=\"pointcut\"expression=\"execution(publicintcn.demo.aop.impl.xml.CalculatorImpl.*(int,int))\"></aop:pointcut>\r\n<!--配置切面及通知-->\r\n<!--1.配置验证通知-->\r\n<aop:aspectorder=\"1\"ref=\"validationAspect\">\r\n<aop:beforemethod=\"validateMethod\"pointcut-ref=\"pointcut\"></aop:before>\r\n</aop:aspect>\r\n<!--2.配置日志通知-->\r\n<aop:aspectorder=\"2\"ref=\"logginAspect\">\r\n<!--前置通知-->\r\n<aop:beforemethod=\"beforeMethod\"pointcut-ref=\"pointcut\"></aop:before>\r\n<!--后置通知-->\r\n<aop:aftermethod=\"afterMethod\"pointcut-ref=\"pointcut\"></aop:after>\r\n<!--返回通知-->\r\n<aop:after-returningmethod=\"AfterReturningMethod\"pointcut-ref=\"pointcut\"returning=\"result\"></aop:after-returning>\r\n<!--异常通知-->\r\n<aop:after-throwingmethod=\"afterThrowingMethod\"pointcut-ref=\"pointcut\"throwing=\"ex\"></aop:after-throwing>\r\n<!--环绕通知-->\r\n<aop:aroundmethod=\"aroundMethod\"pointcut-ref=\"pointcut\"></aop:around>\r\n</aop:aspect>\r\n</aop:config>\r\n</beans>\r\n \r\n ','',5,NULL,2,'yc','2019-03-09',NULL,NULL,'Spring是一个开源框架\r\nSpring为简化企开发而生，使用spring可以简化javabean的实现和管理\r\nSpring是一个IOC控制反转/DI依赖注入和AOP容器框架\r\n ',NULL,NULL,NULL,NULL,NULL),(56,'老干部','','','IDEA下创建基于Spring的Hello World','images/8.jpg','前言：使用eclipse的同学对eclipse中的工作空间（workspace）比较熟悉，但是在idea中没有workspace的概念，idea中首先需要创建project，此处的project相当于eclipse中的workspace，在project下可以创建Module，Module相当于eclipse中的project工程。理解了这个概念，请项下继续看！\r\n\r\n创建一个maven简单quickstart工程，以便于组织依赖包导入。\r\n右键project -> New ->Module -> Maven 勾选Create from archetype\r\n选择maven-atchetype-quickstart\r\n\r\n填写maven工程相关参数名称\r\n\r\n \r\n这里选择的是与maven相关的配置，maven必须提前已经安装配置完成并且整合到idea中，具体安装maven步骤请参考（Apache Maven 3.6.0安装配置）。\r\n添加spring需要的最小单元依赖jar包到pom.xml文件中，以下为最小依赖单元：\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\nspring-core\r\nspring-context\r\nspring-beans\r\ncommons-logging\r\n \r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n<dependency>\r\n<groupId>org.springframework</groupId>\r\n<artifactId>spring-core</artifactId>\r\n<version>4.3.17.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n<groupId>org.springframework</groupId>\r\n<artifactId>spring-context</artifactId>\r\n<version>4.3.17.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n<groupId>org.springframework</groupId>\r\n<artifactId>spring-beans</artifactId>\r\n<version>4.3.17.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n<groupId>commons-logging</groupId>\r\n<artifactId>commons-logging</artifactId>\r\n<version>1.2</version>\r\n</dependency>\r\n 创建文件夹目录：resource，并转换为资源文件夹根目录；\r\n\r\n\r\n创建User类\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\npackagecn.demo.spring;\r\npublicclassUser{\r\npublicStringgetName(){\r\nreturnname;\r\n}\r\npublicvoidsetName(Stringname){\r\nthis.name=name;\r\n}\r\nprivateStringname;\r\npublicUser(Stringname){\r\nthis.name=name;\r\n}\r\n@Override\r\npublicStringtoString(){\r\nreturn\"Hello\"+this.name;\r\n}\r\n}\r\n创建Spring配置文件spring.xml，内容如下：\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<beansxmlns=\"http://www.springframework.org/schema/beans\"\r\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\nxsi:schemaLocation=\"http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n<beanid=\"user\"class=\"cn.demo.spring.User\">\r\n<constructor-argname=\"name\"value=\"Spring\"/>\r\n</bean>\r\n</beans>\r\n创建测试类Main\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\npackagecn.demo.spring;\r\nimportorg.springframework.context.ApplicationContext;\r\nimportorg.springframework.context.support.ClassPathXmlApplicationContext;\r\npublicclassMain{\r\npublicstaticvoidmain(String[]args){\r\nApplicationContextctx=newClassPathXmlApplicationContext(\"spring.xml\");\r\nUseru=(User)ctx.getBean(\"user\");\r\nSystem.out.println(u);\r\n}\r\n}\r\n启动测试类，得到如下结果：\r\n\r\n工程结构如下：\r\n\r\n至此，基于Spring的Hello World已经创建完成。','',5,NULL,2,'yc','2019-03-09',NULL,NULL,'前言：使用eclipse的同学对eclipse中的工作空间（workspace）比较熟悉，但是在idea中没有workspace的概念，idea中首先需要创建project，此处的project相当于eclipse中的workspace，在project下可以创建Module，Module相当于eclipse中的project工程。理解了这个概念，请项下继续看！',NULL,NULL,NULL,NULL,NULL),(57,'老干部','','','常用数据库连接语句','images/3.jpg','MySQL:\r\nDriver:com.mysql.jdbc.Driver\r\nURL:jdbc:mysql://localhost:3306/db_name\r\nClass.forName(Driver);\r\nConnection con = DriverManager.getConnection(URL,Username,Password);\r\n \r\nMicrosoft SQL Server\r\nDriver:com.microsoft.jdbc.sqlserver.SQLServerDriver\r\nURL:jdbc:microsoft:sqlserver://localhost:1433;DatabaseName=db_name\r\n \r\n \r\nSysBase:\r\nDriver:com.sybase.jdbc.SybDriver\r\nURL:jdbc:Sysbase://localhost:5007/db_name\r\n \r\n \r\nOracle:\r\nDriver:oracle.jdbc.driver.OracleDriver\r\nURL:jdbc:oracle:thin@localhost:1521:orcl\r\n \r\nDB2:\r\nDriver:com.ibm.db2.jdbc.app.DB2.Driver  (这是连接具有DB2客户端的Provider)\r\nDriver:com.ibm.db2.jdbc.net.DB2.Driver  (这是连接不具有DB2客户端的Provider)\r\nURL:jdbc:db2://localhost:5000/db_name\r\n ','',5,NULL,5,'yc','2019-03-09',NULL,NULL,'MySQL:\r\nDriver:com.mysql.jdbc.Driver\r\nURL:jdbc:mysql://localhost:3306/db_name\r\nClass.forName(Driver);\r\nConnection con = DriverManager.getConnection(URL,Username,Password);\r\n',NULL,NULL,NULL,NULL,NULL),(58,'老干部','','','恢复回收站删除的文件','images/1.jpg','回收站删除了怎么恢复\r\n步骤/方法\r\n \r\n在cmd中运行“regedit”\r\n\r\n进入注册表，找到“HKEY_LOCAL_MACHINE”，请依据下图指示，点击红色框内，箭头所示的文件夹前的三角按钮\r\n\r\n在展开的文件夹中，找到“SOFTWARE”点击红色框内，箭头所示的文件夹前的三角按钮\r\n\r\n在展开的文件夹中，找到“Microsoft”点击红色框内，箭头所示的文件夹前的三角按钮\r\n\r\n展开的文件夹中，找到“Windows”点击红色框内，箭头所示的文件夹前的三角按钮\r\n\r\n在展开的文件夹中，找到“CurrentVersion”点击红色框内，箭头所示的文件夹前的三角按钮\r\n\r\n在展开的文件夹中，找到“Explorer”点击红色框内，箭头所示的文件夹前的三角按钮\r\n\r\n在展开的文件夹中，找到“DeskTop”点击红色框内，箭头所示的文件夹前的三角按钮\r\n点击红色框内的“NameSpace”文件夹，右边出现“默认”等\r\n\r\n在右边空白区域，点击右键，新建“项”\r\n\r\n点击新建项后，出现如下界面，将新出现的项的名字（红色框框内显示）重命名为“{645FFO40-5081-101B-9F08-00AA002F954E}”------------请注意，要把大括号也带入\r\n\r\n点击新建的项，右边会出现默认等显示，右键点击“默认”二字，点击修改，出现如下界面\r\n \r\n点击修改后，出现如下界面，请在数值名称一项中，将“{默认}”修改为“{回收站}”点击确定\r\n \r\n重新启动电脑即可！','#操作系统#',5,NULL,4,'zz','2019-03-09',NULL,NULL,'回收站删除了怎么恢复步骤/方法\r\n在cmd中运行“regedit”\r\n进入注册表，找到“HKEY_LOCAL_MACHINE”，请依据下图指示，点击红色框内，箭头所示的文件夹前的三角按钮',NULL,NULL,NULL,NULL,NULL),(59,'老干部','','','Windows7下配置java环境变量','images/1.jpg','windows下java环境变量配置方法\r\n\r\n   windows7下java环境变量配置方法：\r\n   1.用鼠标右击“我的电脑”->属性   \r\n\r\n   选择左边导航的“高级系统设置”选项，然后这回熟悉了吧？\r\n\r\n   继续选择右下角的“环境变量”选项\r\n\r\n   2.进行win7下Java环境变量配置\r\n   \r\n   在\"系统变量\"下进行如下配置：\r\n  (1)新建->变量名：JAVA_HOME 变量值：D:/Java/jdk1.6.0_12(这只是我的JDK安装路径)\r\n  (2)编辑->变量名：Path 在变量值的最前面加上：%JAVA_HOME%/bin;%JAVA_HOME%/jre/bin\r\n  (3)新建->变量名：CLASSPATH 变量值：.;%JAVA_HOME%/lib;%JAVA_HOME%/lib/dt.jar;%JAVA_HOME%/lib/tools.jar\r\n   注意：当设置的变量在末尾时，不要加上“；”。\r\n\r\n  3.测试下环境变量是否设置成功\r\n    在左下角的搜索框中键入\r\n    cmd\r\n    或者按下“WIN+R”键,“WIN”键就是\"CTRL\"和“ALT””中间那个微软图标那个键；\r\n   分别输入java，javac，java -version 命令\r\n   如果出现如下信息：\r\n\r\n   \r\n   4.你的Java环境变量配置成功！\r\n   注意:\r\n   若出现\r\n   \'javac\' 不是内部或外部命令，也不是可运行的程序\r\n   或批处理文件。\r\n   说明此次Java环境变量配置出错了，仔细检查下吧！','#windows#',3,NULL,5,'yc','2019-03-09',NULL,NULL,'windows7下java环境变量配置方法：\r\n   1.用鼠标右击“我的电脑”->属性   \r\n   选择左边导航的“高级系统设置”选项，然后这回熟悉了吧？\r\n   继续选择右下角的“环境变量”选项\r\n   2.进行win7下Java环境变量配置\r\n   在\"系统变量\"下进行如下配置：\r\n  (1)新建->变量名：JAVA_HOME 变量值：D:/Java/jdk1.6.0_12(这只是我的JDK安装路径)\r\n  (2)编辑->变量名：Path 在变量值的最前面加上：%JAVA_HOME%/bin;%JAVA_HOME%/jre/bin\r\n  (3)新建->变量名：CLASSPATH 变量值：.;%JAVA_HOME%/lib;%JAVA_HOME%/lib/dt.jar;%JAVA_HOME%/lib/tools.jar\r\n   注意：当设置的变量在末尾时，不要加上“；”。',NULL,NULL,NULL,NULL,NULL),(60,'老干部','','','IDEA下创建git项目','images/5.jpg','在IDEA中已经为我们集成了git相关的插件，我们只需要配置相应的内容即可使用Git提供给我们的功能。在这之前需要我们电脑中已经安装并配置了Git，具体安装配置请参见《Git安装和使用》。\r\n1.IDEA配置Git\r\n配置git\r\n选择git命令所在路径，点击Test，出现如下界面。\r\n\r\n添加GitHub账户\r\n\r\n\r\n2.在服务器中创建git项目仓库\r\n\r\n3在idea中新建project\r\n \r\n \r\n\r\n此时我们可以看到文件夹下多了一个.git文件夹，说明git项目已经创建完成。\r\n\r\n4.创建Module工程\r\n我们在idea下新建一个JAVA工程demoGit\r\n\r\n国际惯例，添加HelloWorld程序进行测试。\r\n项目结构如下图：\r\n\r\n5.将新建的module工程转换为git项目\r\n进入D:\\01_Work\\demoProject目录，打开Git Bash，执行git init\r\ngit remote add origin git@github.com:*********/demoProject.git\r\n\r\n此时我们可以看到文件夹下多了一个.git文件夹，说明git项目已经创建完成。\r\n\r\n \r\n6.提交到服务器\r\n现在我们需要将helloGit项目提交到github下。\r\n右键helloGit项目 -> 选择Git ->Commit Directory\r\n添加提交注释，Commit and Push\r\n\r\n再次登录github查看\r\n\r\n新建的工程已经被提交，操作完成。\r\n ','#idea#/#Git#',2,NULL,3,'yc','2019-03-09',NULL,NULL,'在IDEA中已经为我们集成了git相关的插件，我们只需要配置相应的内容即可使用Git提供给我们的功能。在这之前需要我们电脑中已经安装并配置了Git，具体安装配置请参见《Git安装和使用》。',NULL,NULL,NULL,NULL,NULL),(61,'老干部','','','Git安装和使用','images/7.jpg','Git安装和使用\r\n \r\n1.Git（分布式版本管理）简述\r\n我们在项目开发的过程中通常是团队协作完成的，在这个过程中，我们会用到版本控制管理工具，例如：SVN Git CVS等。\r\nSVN托管网站需要我们拥有一个（版本库）中央仓库，并且需要每一个工作站与中央仓库网络互通才能进行访问。而Git中没有一个中央仓库的概念，每一个工作站拥有一个本地版本库(分支)，用户将修改后的代码存放到本地版本库中，开发过程中不需要依赖网络环境，只是在最终合并的时候将工作站中的所有版本库进行推送合并到服务器版本库（master）。\r\n2.Git工作原理：\r\n本地工作目录提交到暂存区，当代码达到一定量后最终提交到服务器版本库。\r\n本地工作目录 -> 暂存区：git add\r\n暂存区 -> 版本库：git commit\r\n本地计算机工作目录 推送到 其他计算机工作目录：git push\r\n其他计算机工作目录 拉取到 本地计算机工作目录：git pull\r\n \r\n3.Git的安装\r\n下载地址：msysgit.github.io 会根据自己当前用户的操作系统类型重定向到相应的下载页面\r\n\r\n\r\n下载完成后打开，选择默认配置进行安装。\r\n安装完成后进入cmd下确认输入：git --version 查看是否已经将git添加到环境变量中（2.19默认自动将git添加到环境变量中），如果没有添加，则需要在path中添加git命令执行路径，例如：D:\\Program Files\\Git\\cmd\r\n\r\n \r\n4.Git的本地配置\r\n打开git bash，配置用户名和邮箱,用户名和邮箱相当于SVN中的用户名密码，是区分用户的唯一标识符，输入如下命令：\r\ngit config --global user.name \"example\"\r\ngit config --global user.email \'example@163.com\'\r\n添加完成后可以使用：git config --list 来查看配置是否生效，也可以在本地用户目录下查看.gitconfig文件中的内容与配置是否一致。\r\n\r\n5.配置远程仓库\r\n登录https://github.com，新建仓库\r\n\r\n添加仓库名称：demo 添加描述：初始化demo版本\r\n\r\n对应的https地址：https://github.com/hairuizone/demo.git\r\n对应的ssh地址：git@github.com:hairuizone/demo.git\r\n此时远程仓库已经配置完成。\r\n6.配置本地免密登录服务器仓库\r\n目的：本地计算机与远程服务器之间进行通信关联\r\n本地打开git bash，输入：ssh-keygen -t rsa -C example@163.com\r\n将密钥创建到本地用户目录下\r\n\r\n将本地公钥添加到服务器：\r\n    使用记事本打开id_rsa.pub，并将内容拷贝。\r\n    打开github服务器，选择Settings，并选择如图操作创建新的SSH key\r\n\r\nTitle：任意名称\r\nKey：将刚才拷贝的密钥粘贴进来，并将最后的回车删除\r\n\r\n此时，已经将本地的ssh公钥添加到服务器端，可以使用如下命令验证免密钥登录是否成功：\r\nssh -T git@github.com 提示输入：yes 出现如下界面说明免密登录已经配置完成。同时本地用户目录文件下可以看到一个known_hosts的文件。\r\n\r\n \r\n7.创建Git案例项目\r\n    在本地创建git项目\r\nD盘新建文件夹：gitdemo\r\n在此文件夹下创建文件helloGit.txt \r\nhelloGit.txt内容如下：hello this is git\r\n    在项目根目录（gitdemo文件夹内）右键 Git Bash Here\r\n    输入git init，完成后可以看到当前目录下出现了.git文件夹 则说明git本地项目创建成功。\r\n    \r\n    \r\n8.本地项目与远程资源库进行关联\r\ngit remote add origin https://github.com/hairuizone/demo.git\r\n或者使用ssh唯一标识符进行关联\r\ngit remote add origin git@github.com:hairuizone/demo.git\r\n\r\n \r\n9.Git常见命令的使用\r\n第一次发布项目\r\n将本地项目发布到服务器\r\n将本地项目提交到暂存区：git add .\r\n暂存区推到本地分支：git commit -m \"注释内容\"\r\n第一次将本地分支提交到远程仓库：git push -u origin master\r\n\r\n登录服务器查看查看刚才提交的内容如下：\r\n\r\n第一次下载项目\r\n    远程下载到本地：git clone https://github.com/hairuizone/demo.git\r\n \r\n提交项目\r\n    我们将hellGit.txt中的文件进行修改：hello this is git 1234，然后进行提交。\r\ngit add .\r\ngit commit -m \"注释\"\r\ngit push origin master\r\n\r\n\r\n \r\n更新项目\r\n远程更新到本地\r\ngit pull\r\n ','',2,NULL,3,'yc','2019-03-09',NULL,NULL,'我们在项目开发的过程中通常是团队协作完成的，在这个过程中，我们会用到版本控制管理工具，例如：SVN Git CVS等。\r\nSVN托管网站需要我们拥有一个（版本库）中央仓库，并且需要每一个工作站与中央仓库网络互通才能进行访问。而Git中没有一个中央仓库的概念，每一个工作站拥有一个本地版本库(分支)，用户将修改后的代码存放到本地版本库中，开发过程中不需要依赖网络环境，只是在最终合并的时候将工作站中的所有版本库进行推送合并到服务器版本库（master）。',NULL,NULL,NULL,NULL,NULL),(62,'老干部','','','Apache Maven 3.6.0安装配置','images/1.jpg','第一步：下载maven安装包\r\n下载地址：http://maven.apache.org/download.cgi  注意下载bin文件 src为源码\r\n\r\n \r\n第二步：解压下载文件\r\n将下载的压缩包解压，例如：D:\\Program Files\\apache-maven-3.6.0\r\n\r\n第三步：配置maven环境变量\r\n新建环境变量MAVEN_HOME 并添加路径值D:\\Program Files\\apache-maven-3.6.0\r\n\r\n编辑环境变量Path，添加%MAVEN_HOME%\\bin\\\r\n\r\n进入cmd 输入mvn -v查看maven是否正确安装\r\n\r\n \r\n配置Maven本地仓库\r\n打开文件D:\\Program Files\\apache-maven-3.6.0\\conf\\setting.xml\r\n找到如下代码：<localRepository>/path/to/local/repo</localRepository>\r\n我们可以看到，此段代码已经被注释了，需要取消注释，同时将值修改为本地路径，我这里选择D:\\Program Files\\apache-maven-3.6.0\\repo为本地maven仓库路径。\r\n（配置本地仓库的目的是为了能够更加快速的查找我们在程序开发的过程中需要用到的依赖包，如果本地仓库存在，则直接从仓库中获取，如果不存在，则会去远程仓库下载并保存到本地仓库）\r\n修改前\r\n\r\n修改后\r\n\r\n \r\n配置阿里云镜像仓库\r\n在settings.xml文件中的mirrors下添加mirror标签\r\n<mirror>\r\n<id>alimaven</id>\r\n<name>aliyun maven</name>\r\n<url>http://maven.aliyun.com/nexus/content/groups/public/</url>\r\n<mirrorOf>central</mirrorOf>\r\n</mirror>\r\n\r\n验证之前配置是否生效，命令窗口输入：mvn help:system\r\n \r\n可以发现，maven已经从阿里云镜像中下载了部分相关文件到本地配置路径下\r\n\r\n至此，Maven的安装和配置都已经完成，','',2,NULL,2,'yc','2019-03-09',NULL,NULL,'第一步：下载maven安装包下载地址：http://maven.apache.org/download.cgi  注意下载bin文件 src为源码',NULL,NULL,NULL,NULL,NULL),(63,'老干部','','','DB2常见命令','images/5.jpg','DAS服务启动：db2admin start\r\nDB2启动命令：db2start\r\nDB2停止命令：db2stop / db2stop force\r\n停止所有连接：db2 force application all\r\n连接到指定数据库：db2 connect to dbname user username using password\r\n \r\nBD2数据库导出orcl库中的所有表结构\r\ndb2look -d orcl -e -a -l -o /home/cmis/orcl.ddl\r\n导出指定用户的表结构\r\ndb2look -d orcl -z user1-e -o aa.sql\r\n \r\nDB2数据库导入表结构\r\ndb2 -tvf /home/cmis/orcl.ddl\r\n \r\n导出orcl下的所有数据\r\ndb2move orcl export -sn *\r\n \r\n导出orcl数据库下指定schema下的数据\r\ndb2move orcl export -sn schemaname\r\n \r\n使用db2move导入数据（替换原数据）\r\ndb2move orcl load -lo replace\r\n\r\n更新某张表的某个字段（扩容）\r\nalter table tablename alter columnname set data type CLOB(2048);\r\nalter table tablename alter columnname set data type VARCHAR(20);\r\n \r\n导出某一张表\r\ndb2 export to a.del of del select * from schema.tablename\r\n插入某张表数据\r\ndb2 import from a.del of del insert into schema.tablename\r\n替换某张表数据\r\ndb2 import from a.del of del replace into schema.tablename\r\n \r\n数据库清理日志\r\ndb2 list history archive log all for orcl\r\ndb2 prune history 20161118091620（最新的时间戳）\r\ndb2 list history backup all for orcl\r\ndb2 prune history 20161116160313 with force option and delete\r\ndb2 backup db orck online to /dev/null\r\n \r\n赋予某个用户操作数据库权限\r\ndb2 \"grant dbadm,createtab,bindadd,connect,create_not_fenced_routine,implicit_schema,load,create_external_routine,quiesce_connect,secadm on database  to user usename\"\r\n \r\n \r\n \r\n \r\nselect INDSCHEMA,indname from syscat.indexes where tabname=\'CUSTINFO\'\r\ndb2expln -d testdb -u easycore easycore -t -g -q \"SELECT USERPK,DEPTPK FROM easymis.s_userduty WHERE 9=9 and USERPK=\'admin\'\"\r\nDB2中的转意符为 \'\r\nUser exit for logging enabled (USEREXIT) = OFF\r\n如果等于ON则, 日志慢了, 要备份, 且会引发 table space 无法访问的问题\r\ndb2 list tables for schema easymis\r\n\r\ndb2 \"import from xxx.txt of del modified by coldel| insert into szjxx\"\r\n这个命令可以在DB2V8下load |分隔的文本。\r\n\r\ndb2 connect to easydb user easymis using easymis\r\ndb2 \"import from easymis.xxx.ixf of ixf insert into xxx\"\r\ncreate table student \r\n( \r\nno integer, \r\nname varchar(30), \r\nage integer, \r\nsex integer, \r\ncountry varchar(20), \r\ncity char(10) \r\n); \r\ncreate unique index ix_stu on student (no asc) include(name);\r\n\r\n测试管理系统SQL性能的过程中发现, 有些大的数据表在过渡完后,没有执行runstats on table ..., 这导致在大表关联查询或者其它复杂查询时性能差异极大,例如:\r\nSELECT A.CUSTNO,CUSTNAME,CERTTYPE,CERTNO,CUSTMGR,CUSTTERM,SEX,BIRTHDAY,CARDORGAN,ORGANDISTNO,MOBILETEL,OFFICETEL,HOMETEL,HOSTHOLDADDR,HOMEADDRESS,UNIT,MANAGEUNTNAME,UNTADDR,MANAGEUNTADDR,KHSFLB FROM EASYPUB.PRICUSTINF A,EASYPUB.CUSTINFO B WHERE (A.CUSTNO = B.CUSTNO ) AND ( CUSTNAME = ? )\r\nrunstats: 0.09秒\r\n未runstats: 1m20s\r\n注意在数据过渡后,对大表都加上runstats处理,加在数据过渡的脚本上\r\n \r\ndb2相关端口\r\n449\r\n8471\r\n8476\r\n#查看本instance下有哪些database \r\ndb2 LIST DATABASE DIRECTORY [ on /home/db2inst1 ] \r\n#启动数据库 \r\ndb2start\r\n#停止数据库\r\ndb2stop\r\n#连接数据库\r\ndb2 connect to database_name user db2 using pwd \r\n#中断数据库连接 \r\ndb2 disconnect database_name\r\n#查看及更改数据库实例的配置 \r\ndb2 get dbm cfg \r\ndb2 update dbm cfg for database_name using 参数名 参数\r\n4.10.1 打开对锁定情况的监控。 \r\ndb2 update dbm cfg using dft_mon_lock on \r\n4.10.2 更改诊断错误捕捉级别 \r\ndb2 update dbm cfg using diaglevel 3 \r\n0 为不记录信息 \r\n1 为仅记录错误 \r\n2 记录服务和非服务错误 \r\n缺省是3，记录db2的错误和警告 \r\n4 是记录全部信息，包括成功执行的信息 \r\n一般情况下，请不要用4，会造成db2的运行速度非常慢。 \r\n#查看数据库的配制\r\ndb2 get db cfg for database_name \r\n#写数据库管理程序配置\r\ndb2 update db cfg for database_name using 参数名 参数?\r\n4.9.1 改排序堆的大小 \r\ndb2 update db cfg for head using SORTHEAP 2048 \r\n将排序堆的大小改为2048个页面，查询比较多的应用最好将该值设置比较大一些。 \r\n4.9.2 改事物日志的大小 \r\ndb2 update db cfg for head using logfilsiz 40000 \r\n该项内容的大小要和数据库的事物处理相适应，如果事物比较大，应该要将该值改大一点。否则很容易处理日志文件满的错误。 \r\n4.9.3 出现程序堆内存不足时修改程序堆内存大小 \r\ndb2 update db cfg for head using applheapsz 40000 \r\n该值不能太小,否则会没有足够的内存来运行应用程序。\r\n#关闭所有应用连接\r\ndb2 force application all\r\n#查看应用连接\r\ndb2 list application for db database_name show detail\r\n授权标识 | 应用程序名 | 应用程序句柄 | 应用程序标识 | 序号# | 代理程序 | 协调程序 | 状态 | 状态更改时间 | DB 名 |DB 路径| | 节点号 | pid／线程\r\n其中：1、应用程序标识的第一部分是应用程序的IP地址，不过是已16进制表示的。 \r\n2、pid/线程即是在unix下看到的线程号。 \r\n停止应用程序： \r\ndb2 \"force application(236)\" \r\ndb2 \"force application all\"\r\n该236是查看中的应用程序句柄\r\n#整理表\r\ndb2 reorg table table_name \r\ndb2 runstats on table table_name with distribution and indexes all \r\n#导出表\r\ndb2 export to table_name.txt of del select * from table_name \r\ndb2 export to table_name.ixf of ixf select * from table_name \r\n#导入数据,自增字段不出现在txt里,insert values时自增字段用default\r\ndb2 import from table_name.txt of del insert into table_name\r\ndb2 \"insert into test.test values(\'姓名\',28,default)\"\r\n#执行一个批处理文件\r\ndb2 -tf 批处理文件名(命令结束;\\n)\r\ndb2 -f 批处理文件名(命令结束\\n)\r\n#从系统表中取所有表名\r\ndb2 \"select tabname,tabschema,type from syscat.tables\"\r\n#生成所有建库语句\r\ndb2look -d easydb -e -o ddd2.txt\r\ndb2look -d easydb -u ht -e -p\r\ndb2look -d easydb -u ht -w -asd -a -e\r\n#赋予user表权限\r\ndb2 \"grant all on table_name to user_name\"\r\ndb2 \"grant select/insert/update on table_name to user_name\"\r\ndb2 \"grant select on table_name to public\"\r\n#回收表权限\r\ndb2 \"revoke all on table_name from user user_name\"\r\ndb2 \"revoke select/insert/update on table_name from user user_name\"\r\ndb2 \"revoke all on table_name from public\"\r\n#取前3条记录\r\nselect * from table_name fetch first 3 rows only\r\n#显示当前用户所有表 \r\ndb2 list tables\r\n#显示所有系统表\r\ndb2 list tables for system \r\n#显示所有表\r\ndb2 list tables for all \r\n#显示指定模式所有表\r\ndb2 list tables for schema SCHEMA_NAME\r\n#确定表空间的状态\r\ndb2 list tablespaces show detail\r\n#显示当前活动数据库 ??\r\n#显示当前表结构\r\ndb2 \"describe select * from table_name\"\r\ndb2 \"describe table test.test\"\r\n#查看索引\r\ndb2 \"describe indexes for table test.test show detail\"\r\n#在db2中如何知道表的锁情况\r\n#在你执行你的存储过程之前，执行命令打开锁的监视开光\r\ndb2 update monitor switches using lock on\r\n#然后执行你的存储过程，在执行存储过程期间的时候使用命令\r\ndb2 get snapshot for locks on database_name\r\n#查看数据库表的死锁\r\n再用命令中心查询数据时要注意,如果用了交互式查询数据,命令中心将会给所查的记录加了s锁.这时如果要update记录,由于update要使用x锁,排它锁,将会处于锁等待.\r\n首先,将监视开关打开 \r\ndb2 update dbm cfg using dft_mon_lock on \r\n快照 \r\ndb2 get snapshot for Locks on cleardb >snap.log \r\ntables \r\nbufferpools \r\ntablespaces \r\ndatabase \r\n然后再看snap.log中的内容即可。 \r\n对Lock可根据Application handle（应用程序句柄）看每个应用程序的锁的情况。 \r\n监视完毕后，不要忘了将监视器关闭 \r\ndb2 update dbm cfg using dft_mon_lock off\r\n#可以看正在运行的程序有没有处于锁等待状态的\r\nlist applications for db database_name show detail\r\n#DB2的log sqllib/db2dump/db2diag.log\r\n#查看版本\r\ndb2level\r\ndb2 \"select * from sysibm.sysversions\"\r\n#设置当前schema\r\nSET SCHEMA=SCHEMA_NAME\r\n#查看能在配置文件注册表中设置的所有变量的列表\r\ndb2set -lr\r\n#修改注册项的值\r\n设定当前实例的一个参数\r\nDB2SET PARAMETER=VALUE\r\n设定一个全局级的参数\r\nDB2SET PARAMETER=VALUE -g (小写)\r\n#在DB2 CLP中执行操作系统命令\r\ndb2 => !command\r\n#如何获得DB2的命令的语法相关信息\r\nDB2 ? 显示所有DB2命令 \r\nDB2 ? COMMAND 显示命令信息\r\nDB2 ? SQLnnnn 显示这个SQLCODE的解释信息\r\nDB2 ? DB2nnnn 显示这个DB2错误的解释信息\r\n#如何查看当前CLP的设置\r\ndb2 LIST COMMAND OPTIONS\r\n#如何更新当前CLP会话的特定项设置\r\nDB2 UPDATE COMMAND OPTIONS USING OPTIONS ...\r\n#如何查看系统数据库目录\r\ndb2 LIST DB DIRECTORY\r\n#表空间\r\ndb2 list tablespaces\r\n#表容器空间\r\nLIST TABLESPACE CONTAINERS FOR 1\r\n#如何知道一个用户有多少表\r\nSELECT * FROM SYSIBM.SYSTABLES WHERE CREATOR=\'USER\'\r\n#如何知道用户下的函数\r\ndb2 \"select NAME from sysibm.SYSFUNCTIONS\"\r\n#如何知道用户下的VIEW数\r\ndb2 \"select NAME from sysibm.sysviews WHERE CREATOR=\'USER\'\"\r\n#如何知道用户下的TRIGGER数\r\nselect * from sysibm.SYSTRIGGERS WHERE SCHEMA=\'USER\'\r\n#如何知道TABLESPACE的状况\r\nselect * from sysibm.SYSTABLESPACES\r\n#如何知道SCHEMA的状况\r\ndb2 \"select NAME from sysibm.SYSSCHEMATA\"\r\n#如何知道INDEX的状况\r\nselect * from sysibm.SYSINDEXES\r\n#如何知道表的字段的状况\r\nselect * from sysibm.SYSCOLUMNS WHERE TBNAME=\'TABLE_NAME\'\r\n#如何知道DB2的数据类型\r\nselect * from sysibm.SYSDATATYPES\r\n#如何知道BUFFERPOOLS状况\r\nselect * from sysibm.SYSBUFFERPOOLS\r\n#DB2表的字段的修改限制\r\nalter table只能修改VARCHAR类型的并且只能增加不能减少\r\nalter table yhdab ALTER kh SET DATA TYPE varchar(13)\r\n#一次给一个表增加多个字段 \r\ndb2 \"alter table table_name add column t1 char(1) add column t2 char(2) add column t3 int\" \r\n#如何快速清除一个大表\r\nALTER TABLE TABLE_NAME ACTIVE NOT LOGGED INITALLY WITH EMPTY TABLE\r\n#如何查看数据库的包\r\ndb2 \"select * from sysCAT.PACKAGES\"\r\n#如何查看数据库的存储过程\r\nSELECT * FROM SYSCAT.PROCEDURES\r\nSELECT SUBSTR(PROCSCHEMA,1,15),SUBSTR(PROCNAME,1,15) FROM SYSCAT.PROCEDURES\r\n#如何查看表的约束\r\nSELECT * FROM SYSCAT.CHECKS WHERE TABNAME=\'TABLE_NAME\'\r\n#如何查看表的引用完整约束\r\nSELECT * FROM SYSCAT.REFERENCES WHERE TABNAME=\'TABLE_NAME\'\r\n#别名的使用\r\ndb2 \"create alias test.column for syscat.columns\"\r\ndb2 \"drop alias test.column\"\r\n#复制表结构建表\r\ncreate table new_table as (select * from old_table) definition only; \r\n#插入数据\r\ninsert into new_table select * from old_table; \r\n#建立VIEW\r\ndb2 \"create view test.v_test as select name from test.test\"\r\n#查看view,VIEWNAME要大写\r\ndb2 \"select viewname from syscat.views where viewname=\'V_TEST\'\"\r\n#建立唯一索引\r\ndb2 \"create unique index test.ix_test on test.test(name)\"\r\n#查看索引\r\ndb2 \"select indname from syscat.indexes\"\r\n#SUBSTR\r\ndb2 \"select substr(name,1,2) from test.test\"\r\n#数据类型转换,name为CHARACTER\r\ndb2 \"select cast(name as integer)+12 from test.test\"\r\n#LOCK\r\nlock table test in exclusive mode\r\nlock table test in share mode\r\n#用户权限\r\ndb2 GET AUTHORIZATIONS\r\n#模式特权\r\nGRANT CREATEIN ON SCHEMA SCHEMA-name TO USER USER_NAME\r\nGRANT ALTERIN ON SCHEMA SCHEMA-name TO USER USER_NAME\r\nGRANT DROPIN ON SCHEMA SCHEMA-name TO USER USER_NAME\r\nrevoke CREATEIN ON SCHEMA SCHEMA-name TO USER USER_NAME\r\nrevoke ALTERIN ON SCHEMA SCHEMA-name TO USER USER_NAME\r\nrevoke DROPIN ON SCHEMA SCHEMA-name TO USER USER_NAME\r\n#数据库特权 \r\ndb2 \"grant connect,createtab,dbadm on database to user user_name\"\r\ndb2 \"revoke connect,createtab,dbadm on database from user user_name\"\r\n#索引特权\r\ndb2 \"grant control on index test.ix_test to user_name\"\r\n#检索具有特权的所有授权名\r\n　　SELECT DISTINCT GRANTEE, GRANTEETYPE, \'DATABASE\' FROM SYSCAT.DBAUTH \r\n　　UNION \r\n　　SELECT DISTINCT GRANTEE, GRANTEETYPE, \'TABLE \' FROM SYSCAT.TABAUTH \r\n　　UNION \r\n　　SELECT DISTINCT GRANTEE, GRANTEETYPE, \'PACKAGE \' FROM SYSCAT.PACKAGEAUTH \r\n　　UNION \r\n　　SELECT DISTINCT GRANTEE, GRANTEETYPE, \'INDEX \' FROM SYSCAT.INDEXAUTH \r\n　　UNION \r\n　　SELECT DISTINCT GRANTEE, GRANTEETYPE, \'COLUMN \' FROM SYSCAT.COLAUTH \r\n　　UNION \r\n　　SELECT DISTINCT GRANTEE, GRANTEETYPE, \'SCHEMA \' FROM SYSCAT.SCHEMAAUTH \r\n　　UNION \r\n　　SELECT DISTINCT GRANTEE, GRANTEETYPE, \'SERVER \' FROM SYSCAT.PASSTHRUAUTH \r\n　　ORDER BY GRANTEE, GRANTEETYPE, 3\r\n#创建含identity值(即自动生成的ID)的表\r\ncreate table test2 ( name char(20) not null, age integer not null, number integer not null GENERATED ALWAYS AS IDENTITY (START WITH 500, INCREMENT BY 1)); \r\n#BEFORE CREATE DATABASE\r\ndb2set DB2CODEPAGE -null\r\n\r\ndb2 connect to boc user boc using boc\r\nlist applications for db boc show detail\r\ndb2 get snapshot for locks on boc\r\nlock table L_G_dksqdj in share mode\r\n \r\n\r\n^B^×^Adb2 get monitor switches\r\ndb2 update monitor switches STATEMENT on\r\nset -o vi\r\ndb2 update monitor switches using STATEMENT on\r\ndb2 update monitor switches using SORT on\r\ndb2 update monitor switches using BUFFERPOOL on\r\ndb2 reset monitor\r\ndb2 \\?\r\ndb2 RESET MONITOR\r\ndb2 \\? RESET MONITOR\r\ndb2 RESET MONITOR for tzcbmis\r\ndb2 RESET MONITOR for database tzcbmis\r\ndb2 \\? get snapshot\r\ndb2 get snapshot bufferpools\r\ndb2 get snapshot for bufferpools\r\ndb2 get snapshot for bufferpools on tzcbmis\r\ndb2 RESET MONITOR for tzcbmis\r\ndb2 RESET MONITOR for database tzcbmis\r\ndb2 get snapshot for application on tzcbmis\r\ndb2 get snapshot for all application\r\ndb2 get snapshot for application\r\ndb2 get snapshot for applications\r\ndb2 get snapshot for tables on dbnm\r\ndb2 get snapshot for all on dbnm\r\ndb2 update monitor switches using STATEMENT on\r\n \r\n\r\n对表进行任何操作都不被允许，提示SQLSTATE=57016 SQLCODE=-668 ，原因码 \"7\"的错误：SQL0668N Operation not allowed for reason code \"7\" on table XXX.\r\n首先查一下:\r\ndb2 ? 57016\r\nSQLSTATE 57016: 因为表不活动，所以不能对其进行访问。\r\n解决方法为：执行命令：reorg table XXX；即可。\r\n\r\nrunstats on table administrator.test;\r\nreorg table administrator.test;\r\n\r\nDB2事务隔离级别\r\n1、 RR 可重复读\r\n在SQL执行期间，所有执行些语句扫描过的纪录都会被加上相应的锁，它保证了SQL语句在看到数据之前，所有返回数据都保持不变\r\n2、 RS 读稳定性\r\n些隔离级别下，会锁定所有符合条件的记录\r\n3、 CS 游标稳定性\r\n只锁定游标所在位置以下的行，担是，如果改变了某一行数据，则挂起锁定该行，直到数据库落实\r\n4、 UR 未落实的读\r\n此级别允许访问其他事务未落实的更改，除非其他事务尝试删除或改变表\r\n例子\r\nselect * from db2uat.test for read only with ur\r\nselect * from db2uat.test with ur\r\n\r\n修改OS中 文件型内存占比\r\nvmo -o maxclient%=20\r\nvmo -o maxperm%=20\r\nsvmon -G\r\nvmo -o strict_maxperm=1\r\nSELECT BPNAME FROM SYSCAT.BUFFERPOOLS\r\nCREATE BUFFERPOOL <buffer pool name> PAGESIZE 4096\r\ndb2 list tablespace containers for 6 -- 其中6为表空间标识 用 db2 list tablespace可以看到\r\nselect * from sysibmadm.snapappl\r\ndb2diag -rc 0xFFFF889 --可以看db2dialog.log文件中的ZRC错误码\r\ndb2pd -agents -db sample --查看所有agent （pid client进程之间的关系）\r\ndb2pd -edu --查看edu线程\r\ndb2mtrk -i -d -v --查看DB2内存情况\r\n\r\ndb2 list applications --看当前联链的应用 apphandl=48\r\ndb2pd -db sample -app 48 --看apphandl=48 程序详细情况 查L-AnchID的值 233\r\ndb2pd -db sample -dyn 查看AnchID为233的SQL(用grep过滤) , 上述步骤可以倒序执行：\r\n首先找到文件对应的表，然后db2pd -db dbname –dyn找到操作这个表的sql，通过AnchID在db2pd -app -db dbname 找到AppHandl，通过db2pd -agent就可以找到agent\r\n\r\ndb2pd -db sample -tcbstats 可以查出进行过全表查询的表，和查询次数\r\n\r\nsqlcode：-805 sqlstate：51002 程序没有释放Statemt、 result会导致\r\n/home/db2inst1/sqllib/db2dump/db2diag.log\r\n\r\nINTRA_PARALLEL参数：\r\n该参数指定数据库管理器是否可以使用内部分区并行性(intra-partition parallelism)。默认值 NO 对于并发连接较多的情况(主要是OLTP)最好，而 YES 对于并发连接较少的情况以及复杂 SQL (OLAP/DSS)来说最好。混合的工作负载通常可以得益于NO。\r\n当启用该参数时，就会导致从共享内存中分配排序内存。此外，如果并发程度显著增加，那么还可能导致过多的系统开销。如果系统是非OLTP的，则CPU数与分区数的比例是 4:1，而CPU负载运行的平均百分比是50%，INTRA_PARA LLEL很可能会提高性能\r\n\r\ndb2 -v get snapshot for dbm\r\n\r\ndb2的log file是否可以创建在raw设备上？\r\nIt\'s possible, but as of DB2 V9.1, the use of raw devices for database logging is deprecated. As an alternative to using raw logs, you can use either direct input/output (DIO) or concurrent input/output (CIO).\r\nCheck registry variable DB2_LOGGER_NON_BUFFERED_IO.\r\nDB2? database products support the use of non-buffered I/O (also known as Direct I/O or DIO) when managing database recovery logs on AIX? JFS and JFS2 file systems. To disable file system caching for the file system that contains the database recovery logs, specify the AIX dio or cio (Concurrent I/O) mount options.\r\nNote: Do not use the dio or cio mount options on file systems that contain other DB2 files or directories, such as the sqllib directory.\r\nIf the file system will also contain non-DB2 files, consult your operating system documentation before disabling file system caching. Some AIX operating systems have requirements such as serialization of read and write access. DB2 database manager adheres to these requirements.\r\nTo configure database logging without file system caching:\r\n1.Mount the file system, specifying the AIX dio or cio mount options. \r\nConcurrent I/O (CIO) is an enhanced version of Direct I/O and is supported only on JFS2 file systems. Consult your operating system documentation for more information.\r\n2.Create a directory on the file system for the database recovery logs. For example: \r\nmkdir /new_filesystem/db2logs where new_filesystem is the mount point for the file system.\r\n3.Update the database log path. For example: \r\ndb2 update db cfg for sample using newlogpath /new_filesystem/db2logswhere SAMPLE is the database name. The new setting does not become the value for the logpath database configuration parameter until both of the following occur: \r\n?The database is in a consistent state, as indicated by the database_consistent database configuration parameter. \r\n?All users are disconnected from the database.\r\nThis configuration eliminates any overhead incurred by the operating system as a result of caching database recovery logs. However, the lack of file caching might degrade the performance of log archiving and rollback operations. This performance degradation can be addressed by ensuring that you use an appropriate number of disk spindles and by tuning the log buffer size database configuration parameter (logbufsz).\r\nDB2 database products also support non-buffered I/O for table spaces. Refer to Creating table spaces without file system caching\r\n--------------------------------------\r\ngrant某个schema下所有表的select权限\r\n如何给一个用户grant某个schema下所有表的select权限？\r\n可以用下面语句建立一个批处理文件：\r\nselect \'grant select on \'||rtrim(tabschema)||\'.\'||tabname||\' to user xlhe ;\' from syscat.tables where type=\'T\' and tabschema =\'某个shcema名称\'\r\n---------------------\r\n\r\nDB2日志是以文件的形式存放在文件系统中，分为两种模式：循环日志和归档日志。当创建新数据库时，日志的缺省模式是循环日志。在这种模式下，只能实现数据库的脱机备份和恢复。如果要实现联机备份和恢复，必须设为归档日志模式。在 DB2 UDB 中，脱机备份也是最简单的备份。脱机备份要求采取完全数据库备份，显然，在备份的过程中，数据库是脱机的。换言之，当执行脱机备份时，用户无法访问数据库。如果您正在使用循环日志记录，脱机备份是惟一受支持的备份类型。当首先创建一个数据库的时候，这是默认的日志记录方法。对于循环日志记录，log retain for recovery status 和 user exit for logging status 都被设为 NO。LOGRETAIN 和 USEREXIT 两个参数都被设为 OFF。\r\n目前在综合业务系统中，设置的均是归档日志模式；其它系统（如事后监督、经营决策、中间业务等）一般都设置为循环日志模式。至于采用何种模式，可以通过修改数据库配置参数（LOGRETAIN）来实现： 归档日志模式：db2 update db cfg for using logretain on 注：改为on后，查看数据库配置参数logretain的值时，实际显示的是recovery。改变此参数后，再次连接数据库会显示数据库处于备份暂挂（BACKUP PENDING）状态。这时，需要做一次对数据库的脱机备份（db2 backup db ），才能使数据库状态变为正常。\r\n \r\n----------------\r\n创建死锁事件监控器\r\ndb2 \"create event monitor dlockevm for deadlocks with details history write to file \'/home/cmsinst/deadlocks\'\"\r\ndb2 set event monitor dlockevm state=1\r\n查看事件输出\r\ndb2evmon -db cmsdb -evm dlockevm\r\n关闭并输出结果至文件\r\ndb2 flush event monitor dlockevm\r\ndb2 set event monitor dlockevm state=0\r\ndb2evmon -path /home/cmsinst/deadlocks > deadlock.txt\r\n删除监控器\r\ndb2 \"drop event monitor dlockevm\"\r\n-----------------\r\n当处理程序逻辑为对同一张表 select - update - select 时，有可能在并发操作时出现死锁，若该逻辑在循环中，则出现死锁的概率更大。\r\n\r\n树型数据查询\r\nwith T(usr_id,usr_super) as (select usr_id,usr_super from s_usr where usr_id=\'xxx\'\r\nunion all select s.usr_id,s.usr_super from s_usr S,T where s.usr_super=t.usr_id )\r\nselect usr_id,usr_super from T;\r\n\r\n当查询多条数据1000+时返回列数50+过多时性能会急剧下降\r\n\r\nLOB INLINE 方式可以将较小的LOB数据与普通数据存放在一起，因此可以用BUFFERPOOL，可以被压缩\r\ncreate table xxxt ( yyycoln clob inline length 1000 ); -- 小于1000的大数据，将与普通数据共同存储\r\n由于BLOB没有字符转换，因此推荐用BLOB\r\n复合索引中的第一个字段的数据区分度对索引性能影响大，区分度高的尽量放在第一个字段\r\nINSERT时慢，发生在PCTFREE较高且行记录较大时，频繁地寻找新空闲数据块，对于批量INSERT可以将表的参数设置APPEND ON，在INSERT结束时再改回APPEND OFF。\r\nUPDATE时慢，可以调整表的PCTFREE参数，防止出现行的溢出\r\n对于DISTINCT、ORDER BY、MAX也需要建索引\r\n \r\n--删除某个schema下所有的表\r\nselect \'DROP TABLE \' || tabname ||\' ;\' from syscat.tables where tabschema=\'tabschema\'\r\n \r\n \r\n \r\n \r\nSQLCODE: -443, SQLSTATE: 38553\r\n解决方法：\r\n打开db2命令行，切换到本机db2的/bnd”目录下，\r\n1、db2 connect to 数据库名 user 用户名 using 密码\r\n2、执行db2 bind db2schema.bnd blocking all grant public\r\n \r\nDB2 rbind报错处理\r\nExplicitly rebind packages by performing the below commands.\r\n\r\ndb2 connect to SAMPLE\r\n\r\ndb2 -x \"select \'REBIND PACKAGE \' || rtrim(pkgschema) || \'.\' || rtrim(pkgname) || \';\' as command from syscat.packages\" > rebind.sql\r\n\r\ndb2 -tvf rebind.sql\r\n \r\n如果显示需要先绑定NULLID.***  请先执行 REBIND PACKAGENULLID.***\r\n \r\n \r\n \r\n \r\n','',2,NULL,5,'yc','2019-03-09',NULL,NULL,'DB2常见命令',NULL,NULL,NULL,NULL,NULL),(64,'老干部','','','Oracle数据库常用操作','images/7.jpg','登录oracle数据库\r\nsqlplus / as sysdba\r\n创建用户\r\ncreate user username identified by password;\r\n给用户赋dba权限\r\ngrant dba to username;\r\n \r\n创建表空间TBS_CIIS2ND_DATA\r\n\r\n\r\n1\r\ncreatetablespaceTBS_CIIS2ND_DATAdatafile\'D:\\app\\thinkpad\\oradata\\cmis\\TBS_CIIS2ND_DATA.DBF\'size256Mautoextendonnext100M\r\n \r\n使用exp导出dmp文件\r\nexp username/password@orcl file=/home/user/orcl-exp.dmp log=/home/user/orcl-exp.log owner=username\r\n使用imp导入dmp文件\r\nimp username/password file=/home/user/orcl-exp.dmp touser=username full=y ignore=y;\r\n \r\n查看oracle directory目录\r\nselect * from dba_directories;\r\n \r\n用expdp导出数据\r\n1)导出用户\r\nexpdp scott/tiger@orcl schemas=scott dumpfile=expdp.dmp directory=dump_dir;\r\n2)导出表\r\nexpdp scott/tiger@orcl tables=emp,dept dumpfile=expdp.dmp directory=dump_dir;\r\n3)按查询条件导\r\nexpdp scott/tiger@orcl directory=dump_dir dumpfile=expdp.dmp tables=empquery=\'where deptno=20\';\r\n4)按表空间导\r\nexpdp system/manager@orcl directory=dump_dir dumpfile=tablespace.dmptablespaces=temp,example;\r\n5)导整个数据库\r\nexpdp system/manager@orcl directory=dump_dir dumpfile=full.dmp full=y;\r\n \r\n用impdp导入数据\r\n1)导入用户（从用户scott导入到用户scott）\r\nimpdp scott/tiger@orcl directory=dump_dir dumpfile=expdp.dmp schemas=scott;\r\n2)导入表（从scott用户中把表dept和emp导入到system用户中）\r\nimpdp system/manager@orcl directory=dump_dir dumpfile=expdp.dmptables=scott.dept,scott.emp remap_schema=scott:system;\r\n3)导入表空间\r\nimpdp system/manager@orcl directory=dump_dir dumpfile=tablespace.dmp tablespaces=example;\r\n4)导入数据库\r\nimpdb system/manager@orcl directory=dump_dir dumpfile=full.dmp full=y;\r\n5)追加数据\r\nimpdp system/manager@orcl directory=dump_dir dumpfile=expdp.dmp schemas=systemtable_exists_action','#分布式#',2,NULL,4,'yc','2019-03-09',NULL,NULL,'Oracle数据库常用操作',NULL,NULL,NULL,NULL,NULL),(65,'老干部',' 翟永超','http://blog.didispace.com/spring-cloud-alibaba-version/','Spring Cloud Alibaba与Spring Boot、Spring Cloud之间不得不说的版本关系 ','images/7.jpg','这篇博文是临时增加出来的内容，主要是由于最近连载《Spring Cloud Alibaba基础教程》系列的时候，碰到读者咨询的大量问题中存在一个比较普遍的问题：版本的选择。其实这类问题，在之前写Spring Cloud基础教程的时候，就已经发过一篇《聊聊Spring Cloud版本的那些事儿》，来说明Spring Boot和Spring Cloud版本之间的关系。\r\nSpring Cloud Alibaba现阶段版本的特殊性\r\n\r\n现在的Spring Cloud Alibaba由于没有纳入到Spring Cloud的主版本管理中，所以我们需要自己去引入其版本信息，比如之前教程中的例子：\r\n\r\n<dependencyManagement>\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.cloud</groupId>\r\n            <artifactId>spring-cloud-dependencies</artifactId>\r\n            <version>Finchley.SR1</version>\r\n            <type>pom</type>\r\n            <scope>import</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.cloud</groupId>\r\n            <artifactId>spring-cloud-alibaba-dependencies</artifactId>\r\n            <version>0.2.1.RELEASE</version>\r\n            <type>pom</type>\r\n            <scope>import</scope>\r\n        </dependency>\r\n    </dependencies>\r\n</dependencyManagement>\r\n\r\n而不是像以往使用Spring Cloud的时候，直接引入Spring Cloud的主版本（Dalston、Edgware、Finchley、Greenwich这些）就可以的。我们需要像上面的例子那样，单独的引入spring-cloud-alibaba-dependencies来管理Spring Cloud Alibaba下的组件版本。\r\n\r\n由于Spring Cloud基于Spring Boot构建，而Spring Cloud Alibaba又基于Spring Cloud Common的规范实现，所以当我们使用Spring Cloud Alibaba来构建微服务应用的时候，需要知道这三者之间的版本关系。\r\n\r\n下表整理了目前Spring Cloud Alibaba的版本与Spring Boot、Spring Cloud版本的兼容关系：\r\nSpring Boot 	Spring Cloud 	Spring Cloud Alibaba\r\n2.1.x 	Greenwich 	0.2.2（还未RELEASE）\r\n2.0.x 	Finchley 	0.2.1\r\n1.5.x 	Edgware 	0.1.1\r\n1.5.x 	Dalston 	0.1.1\r\n\r\n所以，不论您是在读我的《Spring Boot基础教程》、《Spring Cloud基础教程》还是正在连载的《Spring Cloud Alibaba系列教程》。当您照着博子的顺序，一步步做下来，但是没有调试成功的时候，强烈建议检查一下，您使用的版本是否符合上表的关系。\r\n推荐：Spring Cloud Alibaba基础教程\r\n\r\n    《Spring Cloud Alibaba基础教程：使用Nacos实现服务注册与发现》\r\n    《Spring Cloud Alibaba基础教程：支持的几种服务消费方式》\r\n    《Spring Cloud Alibaba基础教程：使用Nacos作为配置中心》\r\n    《Spring Cloud Alibaba基础教程：Nacos配置的加载规则详解》\r\n    《Spring Cloud Alibaba基础教程：Nacos配置的多环境管理》\r\n    《Spring Cloud Alibaba基础教程：Nacos配置的多文件加载与共享配置》\r\n    《Spring Cloud Alibaba基础教程：Nacos的数据持久化》\r\n    《Spring Cloud Alibaba基础教程：Nacos的集群部署》\r\n\r\n该系列教程的代码示例：\r\n\r\n    Github：https://github.com/dyc87112/SpringCloud-Learning/\r\n    Gitee：https://gitee.com/didispace/SpringCloud-Learning/\r\n','',4,NULL,2,'zz','2019-03-09',NULL,NULL,'这篇博文是临时增加出来的内容，主要是由于最近连载《Spring Cloud Alibaba基础教程》系列的时候，碰到读者咨询的大量问题中存在一个比较普遍的问题：版本的选择。其实这类问题，在之前写Spring Cloud基础教程的时候，就已经发过一篇《聊聊Spring Cloud版本的那些事儿》，来说明Spring Boot和Spring Cloud版本之间的关系。\r\nSpring Cloud Alibaba现阶段版本的特殊性\r\n\r\n',NULL,NULL,NULL,NULL,NULL),(66,'老干部','','','使用Consul做服务发现的若干姿势 ','images/7.jpg','从2016年起就开始接触Consul，使用的主要目的就是做服务发现，后来逐步应用于生产环境，并总结了少许使用经验。最开始使用Consul的人不多，为了方便交流创建了一个QQ群（群号在最后），这两年微服务越来越火，使用Consul的人也越来越多，目前群里已有400多人，经常有人问一些问题，比如：\r\n\r\n    服务注册到节点后，其他节点为什么没有同步？\r\n    Client是干什么的？（Client有什么作用？）\r\n    能不能直接注册到Server？（是否只有Server节点就够了？）\r\n    服务信息是保存在哪里的？\r\n    如果节点挂了健康检查能不能转移到别的节点？\r\n\r\n有些人可能对服务注册和发现还没有概念，有些人可能使用过其它服务发现的工具，比如zookeeper，etcd，会有一些先入为主的经验。这篇文章将结合Consul的官方文档和自己的实际经验，谈一下Consul做服务发现的方式，文中尽量不依赖具体的框架和开发语言，从原理上进行说明，希望能够讲清楚上边的几个问题。\r\n为什么使用服务发现\r\n\r\n防止硬编码、容灾、水平扩缩容、提高运维效率等等，只要你想使用服务发现总能找到合适的理由。\r\n\r\n一般的说法是因为使用微服务架构。传统的单体架构不够灵活不能很好的适应变化，从而向微服务架构进行转换，而伴随着大量服务的出现，管理运维十分不便，于是开始搞一些自动化的策略，服务发现应运而生。所以如果需要使用服务发现，你应该有一些对服务治理的痛点。\r\n\r\n但是引入服务发现就可能引入一些技术栈，增加系统总体的复杂度，如果你只有很少的几个服务，比如10个以下，并且业务不怎么变化，吞吐量预计也很稳定，可能就没有必要使用服务发现。\r\nConsul内部原理\r\n\r\n下面这张图来源于Consul官网，很好的解释了Consul的工作原理，先大致看一下。\r\n\r\n首先Consul支持多数据中心，在上图中有两个DataCenter，他们通过Internet互联，同时请注意为了提高通信效率，只有Server节点才加入跨数据中心的通信。\r\n\r\n在单个数据中心中，Consul分为Client和Server两种节点（所有的节点也被称为Agent），Server节点保存数据，Client负责健康检查及转发数据请求到Server；Server节点有一个Leader和多个Follower，Leader节点会将数据同步到Follower，Server的数量推荐是3个或者5个，在Leader挂掉的时候会启动选举机制产生一个新的Leader。\r\n\r\n集群内的Consul节点通过gossip协议（流言协议）维护成员关系，也就是说某个节点了解集群内现在还有哪些节点，这些节点是Client还是Server。单个数据中心的流言协议同时使用TCP和UDP通信，并且都使用8301端口。跨数据中心的流言协议也同时使用TCP和UDP通信，端口使用8302。\r\n\r\n集群内数据的读写请求既可以直接发到Server，也可以通过Client使用RPC转发到Server，请求最终会到达Leader节点，在允许数据轻微陈旧的情况下，读请求也可以在普通的Server节点完成，集群内数据的读写和复制都是通过TCP的8300端口完成。\r\nConsul服务发现原理\r\n\r\n下面这张图是自己画的，基本描述了服务发现的完整流程，先大致看一下。\r\n\r\n首先需要有一个正常的Consul集群，有Server，有Leader。这里在服务器Server1、Server2、Server3上分别部署了Consul Server，假设他们选举了Server2上的Consul Server节点为Leader。这些服务器上最好只部署Consul程序，以尽量维护Consul Server的稳定。\r\n\r\n然后在服务器Server4和Server5上通过Consul Client分别注册Service A、B、C，这里每个Service分别部署在了两个服务器上，这样可以避免Service的单点问题。服务注册到Consul可以通过HTTP API（8500端口）的方式，也可以通过Consul配置文件的方式。Consul Client可以认为是无状态的，它将注册信息通过RPC转发到Consul Server，服务信息保存在Server的各个节点中，并且通过Raft实现了强一致性。\r\n\r\n最后在服务器Server6中Program D需要访问Service B，这时候Program D首先访问本机Consul Client提供的HTTP API，本机Client会将请求转发到Consul Server，Consul Server查询到Service B当前的信息返回，最终Program D拿到了Service B的所有部署的IP和端口，然后就可以选择Service B的其中一个部署并向其发起请求了。如果服务发现采用的是DNS方式，则Program D中直接使用Service B的服务发现域名，域名解析请求首先到达本机DNS代理，然后转发到本机Consul Client，本机Client会将请求转发到Consul Server，Consul Server查询到Service B当前的信息返回，最终Program D拿到了Service B的某个部署的IP和端口。\r\n\r\n图中描述的部署架构笔者认为是最普适最简单的方案，从某些默认配置或设计上看也是官方希望使用者采用的方案，比如8500端口默认监听127.0.0.1，当然有些同学不赞同，后边会提到其他方案。\r\nConsul实际使用\r\n\r\n为了更快的熟悉Consul的原理及其使用方式，最好还是自己实际测试下。\r\n\r\nConsul安装十分简单，但是在一台机器上不方便搭建集群进行测试，使用虚拟机比较重，所以这里选择了docker。这里用了Windows 10，需要是专业版，因为Windows上的Docker依赖Hyper-V，而这个需要专业版才能支持。这里对于Docker的使用不会做过多的描述，如果遇到相关问题请搜索一下。\r\n安装Docker\r\n\r\n通过这个地址下载安装：\r\n\r\nhttps://store.docker.com/editions/community/docker-ce-desktop-windows\r\n\r\n安装完成后打开 Windows PowerShell，输入docker –version，如果正常输出docker版本就可以了。\r\n启动Consul集群\r\n\r\n在 Windows PowerShell中执行命令拉取最新版本的Consul镜像：\r\n\r\ndocker pull consul\r\n\r\n然后就可以启动集群了，这里启动4个Consul Agent，3个Server（会选举出一个leader），1个Client。\r\n\r\n#启动第1个Server节点，集群要求要有3个Server，将容器8500端口映射到主机8900端口，同时开启管理界面\r\ndocker run -d --name=consul1 -p 8900:8500 -e CONSUL_BIND_INTERFACE=eth0 consul agent --server=true --bootstrap-expect=3 --client=0.0.0.0 -ui\r\n \r\n#启动第2个Server节点，并加入集群\r\ndocker run -d --name=consul2 -e CONSUL_BIND_INTERFACE=eth0 consul agent --server=true --client=0.0.0.0 --join 172.17.0.2\r\n \r\n#启动第3个Server节点，并加入集群\r\ndocker run -d --name=consul3 -e CONSUL_BIND_INTERFACE=eth0 consul agent --server=true --client=0.0.0.0 --join 172.17.0.2\r\n \r\n#启动第4个Client节点，并加入集群\r\ndocker run -d --name=consul4 -e CONSUL_BIND_INTERFACE=eth0 consul agent --server=false --client=0.0.0.0 --join 172.17.0.2\r\n\r\n第1个启动容器的IP一般是172.17.0.2，后边启动的几个容器IP会排着来：172.17.0.3、172.17.0.4、172.17.0.5。\r\n\r\n这些Consul节点在Docker的容器内是互通的，他们通过桥接的模式通信。但是如果主机要访问容器内的网络，需要做端口映射。在启动第一个容器时，将Consul的8500端口映射到了主机的8900端口，这样就可以方便的通过主机的浏览器查看集群信息。\r\n\r\n进入容器consul1：\r\n\r\ndocker exec -it consul1 /bin/sh\r\n \r\n#执行ls后可以看到consul就在根目录\r\nls\r\n\r\n输入exit可以跳出容器。\r\n服务注册\r\n\r\n自己写一个web服务，用最熟悉的开发语言就好了，不过需要在容器中能够跑起来，可能需要安装运行环境，比如python、java、.net core等的sdk及web服务器，需要注意的是Consul的docker镜像基于alpine系统，具体运行环境的安装请搜索一下。\r\n\r\n这里写了一个hello服务，通过配置文件的方式注册到Consul，服务的相关信息：\r\n\r\n    name：hello，服务名称，需要能够区分不同的业务服务，可以部署多份并使用相同的name注册。\r\n    id：hello1，服务id，在每个节点上需要唯一，如果有重复会被覆盖。\r\n    address：172.17.0.5，服务所在机器的地址。\r\n    port：5000，服务的端口。\r\n    健康检查地址：http://localhost:5000/，如果返回HTTP状态码为200就代表服务健康，每10秒Consul请求一次，请求超时时间为1秒。\r\n\r\n请将下面的内容保存成文件services.json，并上传到容器的/consul/config目录中。\r\n\r\n{\r\n  \"services\": [\r\n    {\r\n      \"id\": \"hello1\",\r\n      \"name\": \"hello\",\r\n      \"tags\": [\r\n        \"primary\"\r\n      ],\r\n      \"address\": \"172.17.0.5\",\r\n      \"port\": 5000,\r\n      \"checks\": [\r\n        {\r\n        \"http\": \"http://localhost:5000/\",\r\n        \"tls_skip_verify\": false,\r\n        \"method\": \"Get\",\r\n        \"interval\": \"10s\",\r\n        \"timeout\": \"1s\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n\r\n复制到consul config目录：\r\n\r\ndocker cp {这里请替换成services.json的本地路径} consul4:/consul/config\r\n\r\n重新加载consul配置：\r\n\r\nconsul reload\r\n\r\n然后这个服务就注册成功了。可以将这个服务部署到多个节点，比如部署到consul1和consul4，并同时运行。\r\n\r\n服务发现\r\n\r\n服务注册成功以后，调用方获取相应服务地址的过程就是服务发现。Consul提供了多种方式。\r\n\r\nHTTP API方式：\r\n\r\ncurl http://127.0.0.1:8500/v1/health/service/hello?passing=false\r\n\r\n返回的信息包括注册的Consul节点信息、服务信息及服务的健康检查信息。这里用了一个参数passing=false，会自动过滤掉不健康的服务，包括本身不健康的服务和不健康的Consul节点上的服务，从这个设计上可以看出Consul将服务的状态绑定到了节点的状态。\r\n\r\n如果服务有多个部署，会返回服务的多条信息，调用方需要决定使用哪个部署，常见的可以随机或者轮询。为了提高服务吞吐量，以及减轻Consul的压力，还可以缓存获取到的服务节点信息，不过要做好容错的方案，因为缓存服务部署可能会变得不可用。具体是否缓存需要结合自己的访问量及容错规则来确定。\r\n\r\n上边的参数passing默认为false，也就是说不健康的节点也会返回，结合获取节点全部服务的方法，这里可以做到获取全部服务的实时健康状态，并对不健康的服务进行报警处理。\r\n\r\nDNS方式：\r\n\r\nhello服务的域名是：hello.service.dc1.consul，后边的service代表服务，固定；dc1是数据中心的名字，可以配置；最后的consul也可以配置。\r\n\r\n官方在介绍DNS方式时经常使用dig命令进行测试，但是alpine系统中没有dig命令，也没有相关的包可以安装，但是有人实现了，下载下来解压到bin目录就可以了。\r\n\r\ncurl -L https://github.com/sequenceiq/docker-alpine-dig/releases/download/v9.10.2/dig.tgz\\|tar -xzv -C /usr/local/bin\r\n\r\n然后执行dig命令：\r\n\r\ndig @127.0.0.1 -p 8600 hello.service.dc1.consul. ANY\r\n\r\n如果报错：parse of /etc/resolv.conf failed ，请将resolv.conf中的search那行删掉。\r\n\r\n正常的话可以看到返回了服务部署的IP信息，如果有多个部署会看到多个，如果某个部署不健康了会自动剔除（包括部署所在节点不健康的情况）。需要注意这种方式不会返回服务的端口信息。\r\n\r\n使用DNS的方式可以在程序中集成一个DNS解析库，也可以自定义本地的DNS Server。自定义本地DNS Server是指将.consul域的请求全部转发到Consul Agent，Windows上有DNS Agent，Linux上有Dnsmasq；对于非Consul提供的服务则继续请求原DNS；使用DNS Server时Consul会随机返回具体服务的多个部署中的一个，仅能提供简单的负载均衡。\r\n\r\nDNS缓存问题：DNS缓存一般存在于应用程序的网络库、本地DNS客户端或者代理，Consul Sever本身可以认为是没有缓存的（为了提高集群DNS吞吐量，可以设置使用普通Server上的陈旧数据，但影响一般不大），DNS缓存可以减轻Consul Server的访问压力，但是也会导致访问到不可用的服务。使用时需要根据实际访问量和容错能力确定DNS缓存方案。\r\n\r\nConsul Template\r\n\r\nConsul Template是Consul官方提供的一个工具，严格的来说不是标准的服务发现方式。这个工具会通过Consul监听数据变化然后替换模板中使用的标签，并发布替换后的文件到指定的目录。在nginx等web服务器做反向代理和负载均衡时特别有用。\r\n\r\nConsul的docker镜像中没有集成这个工具，需要自己安装，比较简单：\r\n\r\ncurl -L https://releases.hashicorp.com/consul-template/0.19.5/consul-template_0.19.5_linux_amd64.tgz\\|tar -xzv -C /usr/local/bin\r\n\r\n然后创建一个文件：in.tpl，内容为：\r\n\r\n{{ range service \"hello\" }}\r\nserver {{ .Name }}{{ .Address }}:{{ .Port }}{{ end }}\r\n\r\n这个标签会遍历hello服务的所有部署，并按照指定的格式输出。在此文件目录下执行：\r\n\r\nnohup consul-template -template \"in.tpl:out.txt\" &\r\n\r\n现在你可以cat out.txt查看根据模板生产的内容，新增或者关闭服务，文件内容会自动更新。\r\n\r\n此工具我没有用在生产环境，详细使用请访问：https://github.com/hashicorp/consul-template\r\n节点和服务注销\r\n\r\n节点和服务的注销可以使用HTTP API:\r\n\r\n    注销任意节点和服务：/catalog/deregister\r\n    注销当前节点的服务：/agent/service/deregister/:service_id\r\n\r\n注意：\r\n\r\n如果注销的服务还在运行，则会再次同步到catalog中，因此应该只在agent不可用时才使用catalog的注销API。\r\n\r\n节点在宕机时状态会变为failed，默认情况下72小时后会被从集群移除。\r\n\r\n如果某个节点不继续使用了，也可以在本机使用consul leave命令，或者在其它节点使用consul force-leave 节点Id，则节点上的服务和健康检查全部注销。\r\nConsul的健康检查\r\n\r\nConsul做服务发现是专业的，健康检查是其中一项必不可少的功能，其提供Script/TCP/HTTP+Interval，以及TTL等多种方式。服务的健康检查由服务注册到的Agent来处理，这个Agent既可以是Client也可以是Server。\r\n\r\n很多同学都使用ZooKeeper或者etcd做服务发现，使用Consul时发现节点挂掉后服务的状态变为不可用了，所以有同学问服务为什么不在各个节点之间同步？这个根本原因是服务发现的实现原理不同。\r\n\r\nConsul与ZooKeeper、etcd的区别\r\n\r\n后边这两个工具是通过键值存储来实现服务的注册与发现。\r\n\r\n    ZooKeeper利用临时节点的机制，业务服务启动时创建临时节点，节点在服务就在，节点不存在服务就不存在。\r\n    etcd利用TTL机制，业务服务启动时创建键值对，定时更新ttl，ttl过期则服务不可用。\r\n\r\nZooKeeper和etcd的键值存储都是强一致性的，也就是说键值对会自动同步到多个节点，只要在某个节点上存在就可以认为对应的业务服务是可用的。\r\n\r\nConsul的数据同步也是强一致性的，服务的注册信息会在Server节点之间同步，相比ZK、etcd，服务的信息还是持久化保存的，即使服务部署不可用了，仍旧可以查询到这个服务部署。但是业务服务的可用状态是由注册到的Agent来维护的，Agent如果不能正常工作了，则无法确定服务的真实状态，并且Consul是相当稳定了，Agent挂掉的情况下大概率服务器的状态也可能是不好的，此时屏蔽掉此节点上的服务是合理的。Consul也确实是这样设计的，DNS接口会自动屏蔽挂掉节点上的服务，HTTP API也认为挂掉节点上的服务不是passing的。\r\n\r\n鉴于Consul健康检查的这种机制，同时避免单点故障，所有的业务服务应该部署多份，并注册到不同的Consul节点。部署多份可能会给你的设计带来一些挑战，因为调用方同时访问多个服务实例可能会由于会话不共享导致状态不一致，这个有许多成熟的解决方案，可以去查询，这里不做说明。\r\n\r\n健康检查能不能支持故障转移？\r\n\r\n上边提到健康检查是由服务注册到的Agent来处理的，那么如果这个Agent挂掉了，会不会有别的Agent来接管健康检查呢？答案是否定的。\r\n\r\n从问题产生的原因来看，在应用于生产环境之前，肯定需要对各种场景进行测试，没有问题才会上线，所以显而易见的问题可以屏蔽掉；如果是新版本Consul的BUG导致的，此时需要降级；如果这个BUG是偶发的，那么只需要将Consul重新拉起来就可以了，这样比较简单；如果是硬件、网络或者操作系统故障，那么节点上服务的可用性也很难保障，不需要别的Agent接管健康检查。\r\n\r\n从实现上看，选择哪个节点是个问题，这需要实时或准实时同步各个节点的负载状态，而且由于业务服务运行状态多变，即使当时选择出了负载比较轻松的节点，无法保证某个时段任务又变得繁重，可能造成新的更大范围的崩溃。如果原来的节点还要启动起来，那么接管的健康检查是否还要撤销，如果要，需要记录服务们最初注册的节点，然后有一个监听机制来触发，如果不要，通过服务发现就会获取到很多冗余的信息，并且随着时间推移，这种数据会越来越多，系统变的无序。\r\n\r\n从实际应用看，节点上的服务可能既要被发现，又要发现别的服务，如果节点挂掉了，仅提供被发现的功能实际上服务还是不可用的。当然发现别的服务也可以不使用本机节点，可以通过访问一个Nginx实现的若干Consul节点的负载均衡来实现，这无疑又引入了新的技术栈。\r\n\r\n如果不是上边提到的问题，或者你可以通过一些方式解决这些问题，健康检查接管的实现也必然是比较复杂的，因为分布式系统的状态同步是比较复杂的。同时不要忘了服务部署了多份，挂掉一个不应该影响系统的快速恢复，所以没必要去做这个接管。\r\nConsul的其它部署架构\r\n\r\n如果你实在不想在每个主机部署Consul Client，还有一个多路注册的方案可供选择，这是交流群中获得的思路。\r\n\r\n如图所示，在专门的服务器上部署Consul Client，然后每个服务都注册到多个Client，这里为了避免服务单点问题还是每个服务部署多份，需要服务发现时，程序向一个提供负载均衡的程序发起请求，该程序将请求转发到某个Consul Client。这种方案需要注意将Consul的8500端口绑定到私网IP上，默认只有127.0.0.1。\r\n\r\n这个架构的优势：\r\n\r\n    Consul节点服务器与应用服务器隔离，互相干扰少；\r\n    不用每台主机都部署Consul，方便Consul的集中管理；\r\n    某个Consul Client挂掉的情况下，注册到其上的服务仍有机会被访问到；\r\n\r\n但也需要注意其缺点：\r\n\r\n    引入更多技术栈：负载均衡的实现，不仅要考虑Consul Client的负载均衡，还要考虑负载均衡本身的单点问题。\r\n    Client的节点数量：单个Client如果注册的服务太多，负载较重，需要有个算法（比如hash一致）合理分配每个Client上的服务数量，以及确定Client的总体数量。\r\n    服务发现要过滤掉重复的注册，因为注册到了多个节点会认为是多个部署（DNS接口不会有这个问题）。\r\n\r\n这个方案其实还可以优化，服务发现使用的负载均衡可以直接代理Server节点，因为相关请求还是会转发到Server节点，不如直接就发到Server。\r\n\r\n是否可以只有Server？\r\n\r\n这个问题的答案还是有关服务数量的问题，首先Server的节点数量不是越多越好，3个或者5个是推荐的数量，数量越多数据同步的处理越慢（强一致性）；然后每个节点可以注册的服务数量是有上限的，这个受限于软硬件的处理能力。所以如果你的服务只有10个左右，只有Server问题是不大的，但是这时候有没有必要使用Consul呢？因此正常使用Consul的时候还是要有Client才好，这也符合Consul的反熵设计。\r\n\r\n大家可以将这个部署架构与前文提到的普适架构对比下，看看哪个更适合自己，或者你有更好的方案欢迎分享出来。','',2,NULL,3,'yc','2019-03-09',NULL,NULL,'从2016年起就开始接触Consul，使用的主要目的就是做服务发现，后来逐步应用于生产环境，并总结了少许使用经验。最开始使用Consul的人不多，为了方便交流创建了一个QQ群（群号在最后），这两年微服务越来越火，使用Consul的人也越来越多，目前群里已有400多人，经常有人问一些问题，比如：\r\n\r\n    服务注册到节点后，其他节点为什么没有同步？\r\n    Client是干什么的？（Client有什么作用？）\r\n    能不能直接注册到Server？（是否只有Server节点就够了？）\r\n    服务信息是保存在哪里的？\r\n    如果节点挂了健康检查能不能转移到别的节点？\r\n',NULL,NULL,NULL,NULL,NULL),(67,'老干部','','','你的微服务敢独立交付么？ ','images/3.jpg','最近经常在项目或是社区里听到大家谈论微服务架构，但谈论的焦点更多集中在微服务拆分，分布式架构，微服务门槛，DevOps配套设施等话题上。\r\n\r\n但是在我眼里，真正能称之为微服务架构的少之又少。原因也很简单，我所见到的很多所谓的微服务架构项目，大多都没有做到微服务架构的一个基本要求：服务的独立部署（交付）。\r\n\r\n这里的独立部署和自动化部署还不是一个概念，服务的自动化部署相对简单，已有大量的工具可以帮助我们做到。但是这里所谈的独立部署，我认为关键和难点并不在于“部署”，而在于“独立”。\r\n\r\n如果失去了服务独立部署（交付）的能力，一个微服务架构的威力将大打折扣，我们的系统虽然在物理上被拆分成了多个小的服务，但是如果从最终交付的角度来看，仍然是以一个整体存在的，就像单体应用一样，存在诸多的问题。\r\n为什么服务的独立交付并不简单？\r\n\r\n那为什么不能让每一个服务都独立部署到产品环境呢？问题的答案是：不是不能，而是不敢！\r\n\r\n为了表达清楚，让我们来看个例子吧。\r\n\r\n像下图一样，我现在就是那个程序员帅哥（本色出演），突然有一天心血来潮，动手开发了一个网上商城。代码Push到Github并通过CI构建持续交付流水线，最终自动化部署到云端产品环境，供用户访问使用。\r\n\r\n随着用户和访问量的增加，需求和功能也越来越多，系统也变得越发复杂。\r\n\r\n从网上了解到最近有个叫微服务的架构非常火爆，我也赶了回时髦，当然也觉得这种架构确实可以帮助我解决现在的一些问题。\r\n\r\n经过对系统的分析，我将商城的后台部分拆分出了3个服务，为了简单我们就称之为ABC三个服务。\r\n\r\n\r\n我们假设一个比较极端的情况，三个服务相互调用（先不考虑这样是否合理），每个服务通过自己的持续交付流水线独立部署到产品环境。当前产品环境的各个服务的版本是：A：1.0、B：2.0、C：3.0\r\n\r\n一切都非常完美是不是？看！我们已经做到了服务的独立部署！So easy~\r\n\r\n当然，事情肯定不会那么简单。\r\n\r\n问题出现在当我对A服务做了一次新的提交之后，A服务的最新版本升级到了1.1。不幸的是，这个新的版本意外的破坏了A与B之间的契约，错误的调用了B的接口，导致出现了错误。\r\n\r\n虽然我的A服务和B服务都有比较完备的UT（单元测试），但因为UT无法发现服务之间的集成是否被破坏，所以只有UT作为质量保障的A服务持续交付流水线也自然没有能力发现AB服务集成被破坏的这个问题。最终导致存在问题的A1.1版本被部署到了产品环境，产品环境出现了严重的Bug。\r\n\r\n请问在座的同学，碰到这样的情况，你会如何处理？\r\n\r\n“加集成测试啊！”\r\n\r\n这位同学说的极是，我这么聪明自然也想到了这一点，不就是要测集成吗？UT干不了就加集成测试不就成了。\r\n\r\n为了统一语言，毕竟对于各种测试的叫法太容易引起混淆，参考Martin Fowler在《微服务测试策略》中的定义，我们在本文中将这种测试多服务集成的测试统一称作端到端测试（End-to-End tests，简称E2E测试）。\r\n\r\n添加了E2E测试之后，我的交付流水线就变成了下面这个样子。\r\n\r\n因为有了E2E测试的存在，问题迎刃而解，当A服务的新版本破坏了与B服务的集成时，E2E测试就会及时诊断出来，并阻止A服务的最新版本向产品环境流动，保证产品环境不被破坏。\r\n\r\n这样看似没有什么问题，通过添加E2E测试，解决了服务间集成的验证问题，但在不知不觉中，我们也失去了微服务架构的那个重要的特性：“服务的独立交付”。\r\n\r\n怎么讲？别急，我们再往下看。\r\n\r\n假设A服务的修复过程中，B和C服务也提交了新的代码，我们假设这两个提交是没有问题的，但因为A服务的1.1版本导致E2E测试挂掉的问题还没有被修复，所以B和C的新版本也被E2E测试拦了下来，此时的E2E测试就像是一个亮起红灯的路口，阻塞了所有服务通往产品环境的通道。\r\n\r\n所以说，随着集中E2E测试的添加，质量被保障的同时，我们的“微服务架构”也已悄然失去了服务独立交付的能力，杀敌一千自损八百，损失惨重！\r\n\r\n这并不是我假想的场景，在我自己经历的几个真实项目中，这个问题都在一直困扰着我们。带来了各种各样的衍生问题，例如E2E测试长时间失败，无人修复，修复难度大，服务交付堵塞，为了保持交付通路畅通还不得不引入同样存在很大副作用的CodeFrezze机制和提交Token机制等。\r\n\r\n可以看到，虽然我们能够在代码库，在部署结构上，甚至在组织上进行服务化拆分，但就因为这最后一个交付的十里路口，最后这一个红绿灯，让所有的服务又纠缠在了一起，所有的服务化拆分形同虚设，最终我们得到的也只是一个看起来像微服务架构的单体应用而已。\r\n拆除红绿灯，各行其道，收复失地！\r\n\r\n那，如何才能将这个“红绿灯”拆除，让服务可以在有质量保障的前提下还可以做到独立交付呢？这就是本文要解决的问题，让我们继续往下看。\r\n\r\n我的解决方法其实也很简单：Inline E2E tests。\r\n\r\n即并不添加新的集中的Pipeline做E2E测试，而是为每一个服务的Pipeline都添加一个相同的E2E测试的Stage，就相当于将E2E测试Inline到每个服务各自的部署流水线中，如下图所示。\r\n\r\n其实Inline E2E测试还不是最关键的，最关键的变化点就是假设A服务有了新的提交，运行到A服务自己Pipeline的E2E测试的时候，此时的E2E测试并不是像之前一样获取B和C服务的最新代码库版本做集成验证，而获取当前产品环境上的B和C服务的已部署当前版本做集成验证。\r\n\r\n例如，如图所示A服务的版本从1.0升级到了1.1，当前产品环境的B和C的版本是2.0和3.0。在执行A服务Pipeline上的E2E测试时，验证出A1.1和B2.0集成存在问题，测试变红，Pipeline挂掉，从而阻断了A服务的1.1版本部署到产品环境，保证了产品环境不会被A的1.1版本破坏。\r\n\r\n同样，假设A还没有被修复之前，B也有了新的提交，产生了一个新的版本B2.1，这时在B服务Pipeline上的E2E测试并不获取当前A服务的代码库最新版本1.1做集成测试，而是获取产品环境上的当前版本A1.0版本做集成测试。我们假设B2.1和A1.0之间的集成没有问题，测试通过，所以B的2.1版本就被成功的交付到了产品环境，而此时产品环境的A服务的版本仍是1.0。\r\n\r\n看！服务之间的阻塞被神奇的解决了，服务再也不会被堵在一个统一的十字路口，而是各行其道，A的车道出了事故，是A的问题，应该由A来承担后果和解决问题，不应该影响到其他服务，其他服务依然可以持续的交付到产品环境。\r\n向前看是持续集成，向后看是持续交付！\r\n\r\n看到这里可能有些小伙伴会感到有些失望。咋呼半天，不就是将E2E测试整到每个服务的Pipeline里，再把获取版本从最新代码改成产品环境么？有啥厉害的。\r\n\r\n但是，在我看来，这个看似简单的变化，意义却是重大的：它揭示了“持续集成”和“持续交付”的一个主要区别。\r\n\r\n“持续集成”和”持续交付”，这两个概念相信大家一定都不陌生，在软件领域也被提了不少年头了，不算什么新概念新技术。但对于这两个概念，我们经常一起提及，也经常混淆，搞不清楚两者的区别到底是什么，可能认为持续交付只不过是持续集成的演进版，新瓶装旧酒而已。\r\n\r\n但其实它们却有着本质的区别。\r\n\r\n“持续集成”关注的是各个集成单元之前最新版本的集成问题，即是不是某个集成单元的最新版本破坏了系统整体的集成，我管这种视角叫：向“前”看。\r\n\r\n而“持续交付”关注的应该不是集成单元最新版本之间的集成问题，而是某个集成单元的最新版本是否可以（能和敢）部署到产品环境。换句话说就是维持产品环境的其他服务不变，只将当前集成单元的最新版本部署到产品环境，产品是否依然可用，不被破坏。所以在“持续交付”的视角下，应该关注的是当前集成单元与产品环境上的其他服务的版本是否兼容，我管这种视角叫：向“后”看。\r\n\r\n向前看是持续集成，向后看才是持续交付，如果前后都不看那就是在裸奔。\r\n\r\n但是肯定早有同学在心里疑惑，将E2E测试下放到每一个服务自己的Pipeline中，靠谱么？是不是太重了？根据测试金字塔，E2E测试应该是属于靠近金字塔顶端的测试种类，无论从数量和覆盖范围应该也都不会太多，怎么能靠它来保障服务之间的所有集成点和契约呢？\r\n主角登场-契约测试\r\n\r\n细心的同学肯定已经发现上面最后一张图中，我已经悄悄的把E2E测试变为了CT，即Contract Test，契约测试。\r\n\r\n契约测试也是这两年伴随微服务架构的兴起，经常被提及的一种比较新的测试类型。在测试金字塔中，他的位置介于E2E和Component Tests（可以理解成单个服务的API测试）之间。\r\n\r\n简单的理解，契约测试就是一种可以用类似于单元测试的技术验证两两服务之间集成的测试技术。它相比于更低层次的单元测试的优势是可以测集成（两两服务之间），相比于更高层次的E2E测试的优势是实现方式上又类似于单元测试，更轻量，跑的更快，覆盖的范围也自然可以更广更细。\r\n\r\n使用契约测试替换掉E2E测试之后，整个架构也会变得更复杂一些，目前契约测试的框架也有很多，如大家常常提到的Pact或是SpringContracts等等。这里我先以Pact为例予以说明，其他框架实现上可能有些差别，但是思路是一致的。\r\n\r\nA服务调用B服务的一个API，我们就称为A和B之间存在了一个契约，即B应该按照这个契约提供一个满足契约要求的API，而A也应该按照这个契约约定的方式来调用B的这个API。在这个过程中A作为调用方，我们称之为Consumer端。B作为被调用方，我们称之为Provider端。\r\n\r\n如果A和B都履行契约，按照契约定义的约定调用和被调用，我们就可以认为集成不会有问题。但无论是B擅自修改了API破坏了契约，还是A擅自修改了调用API的方式破坏了契约，都会导致契约被破坏，反应到测试上就是契约测试会失败，反应到产品上就是功能被破坏，出现Bug。\r\n\r\n每个契约，例如A->B，都会有Consumer端和Provider端生成的两个产出物：分别是a-b.consumer.json.1.1(由Consumer端生成的契约文件，所以版本也是Consumer端A的版本号)和a-b.provider.jar.2.0（由Provider端生成的契约验证测试包，他由Provider端生成，所以版本是B的版本）。这个jar包其实就是一组测试，他的输入是a-b.consumer.json，产出则是测试的结果，也就是契约的验证结果：成功或是失败。\r\n\r\n可以把A服务产出的契约文件a-b.consumer.json.1.1想象成一把钥匙，把B服务产出的Provider端的测试a-b.provider.jar.2.0想象成一把锁。那契约测试的执行过程就像是用这把钥匙试着去打开这把锁：如果可以打开，我们认为这A1.1->B2.0的契约是满足的，反之契约就是被破坏了。\r\n\r\n值得注意的一点就是，契约测试不像E2E测试，它是有方向的，所以我们看到a-b和b-a是两个不同的契约。\r\n\r\n所以，只有当A1.1->B2.0和B2.0->A1.1双向的契约都被验证通过后，我们才能认为A1.1版本和B2.0版本的集成是没有问题的。\r\n用契约测试替换E2E测试\r\n\r\n回到前面的例子上，假设我们已经构建了ABC三个服务两两之间的契约测试。此时，A服务有了新的提交升级到了1.1版本，那我们如何才能通过契约测试来验证A1.1版本能否交付到产品环境呢？\r\n\r\n答案就是只要通过A的1.1版本的最新代码，生成所有A作为Consumer端的契约文件（a-b.consumer.json.1.1和a-c.consumer.json.1.1），用这两把“钥匙”去试着开（作为输入执行Provider端测试）产品环境对应的两把“锁”（a-b.provider.jar.2.0和a-c.provider.jar.3.0）。\r\n\r\n如果都可以打开（测试通过）的话，就证明A的新版本1.1作为Consumer端与产品环境的B和C服务是兼容的。\r\n\r\n等等，别着急，还没完……\r\n\r\n因为我们还需要考虑A作为Provider的情况，做法还是通过A的1.1版本的最新代码生成A版本作为Provider端的契约测试（b-a.provider.jar.1.1和c-a.provider.jar.1.1），拿着这两把“新锁”，然后试着用产品环境上的两把“钥匙”（b-a.consumer.json.2.0和c-a.consumer.json3.0）去开。\r\n\r\n如果也都可以打开（测试通过）的话，就证明A的新版本1.1作为Provider端与产品环境的B和C服务也是兼容的。\r\n\r\n至此，当验证了A的新版本1.1无论是作为调用端还是被调用端都与产品环境上的其他服务契约满足后，我们就认为A1.1与B2.0和C3.0集成是没有问题的，也就代表A1.1可以被放心地部署到产品环境中，替代现在的1.0版本。\r\n最后，敲黑板划重点\r\n\r\n    微服务架构下的独立部署（交付）很重要，但往往容易被忽视，没有被引起足够重视。\r\n    为了实现微服务的独立持续交付，我们要向“后”看，不要向“前”看，即关注当前变更服务与部署环境中其他服务的兼容性而不是关注当前变更服务与其他服务最新版本的兼容性。\r\n    用契约测试来替代E2E测试，降低测试成本，提高测试覆盖，尽早测试。并通过不断地完善契约管理，保障微服务架构质量和避免微服务架构腐化僵化。\r\n','#微服务#/#cloud#/#架构师#/#部署#',3,NULL,3,'yc','2019-03-09',NULL,NULL,'最近经常在项目或是社区里听到大家谈论微服务架构，但谈论的焦点更多集中在微服务拆分，分布式架构，微服务门槛，DevOps配套设施等话题上。\r\n\r\n但是在我眼里，真正能称之为微服务架构的少之又少。原因也很简单，我所见到的很多所谓的微服务架构项目，大多都没有做到微服务架构的一个基本要求：服务的独立部署（交付）。',NULL,NULL,NULL,NULL,NULL),(68,'老干部','','','李开复给女儿的信：你该如何度过大学生涯','images/4.jpg','Dear Daughter: \r\n亲爱的女儿： \r\n　　As we drove off from Columbia, I wanted to write a letter to you to tell you all that is on my mind. \r\n\r\n当我们开车驶出哥伦比亚大学的时候，我想写一封信给你，告诉你盘旋在我脑中的想法。 \r\n\r\n　　First, I want to tell you how proud we are. Getting into Columbia is a real testament of what a great well-rounded student you are. Your academic, artistic, and social skills have truly blossomed in the last few years. Whether it is getting the highest grade in Calculus, completing your elegant fashion design, successfully selling your painted running shoes, or becoming one of the top orators in Model United Nations, you have become a talented and accomplished young woman. You should be as proud of yourself as we are. \r\n\r\n首先，我想告诉你我们为你感到特别骄傲。进入哥伦比亚大学证明你是一个全面发展的优秀学生，你的学业、艺术和社交技能最近都有卓越的表现，无论是你在微积分上得了最高分，完成自己典雅的时尚的设计，成功卖出绘制的跑鞋，还是在“模拟联合国”演说中成为表现最突出的人之一，你毫无疑问已经是一个多才多艺的女孩。你的父母为你感到骄傲，你也应该像我们一样为自己感到自豪。 \r\n\r\n　　I will always remember the first moment I held you in my arms. I felt a tingling sensation that directly touched my heart. It was an intoxicating feeling I will always have. It must be that \"father-daughter connection\" which will bind us for life. I will always remember singing you lullaby while I rocked you to sleep. When I put you down, it was always with both relief (she finally fell asleep!) and regret (wishing I could hold you longer). And I will always remember taking you to the playground, and watching you having so much fun. You were so cute and adorable, and that is why everybody loved you so. \r\n\r\n我会永远记得第一次将你抱在臂弯的那一刻，一种新鲜激动的感觉瞬间触动了我的心，那是一种永远让我陶醉的感觉，就是那种将我们的一生都联结在一起的“父女情结”。我也常常想起我唱着催眠曲轻摇你入睡，当我把你放下的时候，常常觉得既解脱又惋惜，一方面我想，她终于睡着了！另一方面，我又多么希望自己可以多抱你一会儿。我还记得带你到运动场，看着你玩得那么开心，你是那样可爱，所有人都非常爱你。 \r\n\r\n　　You have been a great kid ever since you were born, always quiet, empathetic, attentive, and well-mannered. You were three when we built our house. I remember you quietly followed us every weekend for more than ten hours a day to get building supplies. You put up with that boring period without a fuss, happily ate hamburgers every meal in the car, sang with Barney until you fell asleep. When you went to Sunday Chinese school, you studied hard even though it was no fun for you. I cannot believe how lucky we are as parents to have a daughter like you. \r\n\r\n你不但长得可爱，而且是个特别乖巧的孩子。你从不吵闹、为人着想，既听话又有礼貌。当你三岁我们建房子的时候，每个周末十多个小时你都静静地跟着我们去运建筑材料，三餐在车上吃着汉堡，唱着儿歌，唱累了就睡觉，一点都不娇气不抱怨。你去上周日的中文学习班时，尽管一点也不觉得有趣，却依然很努力。我们做父母的能有像你这样的女儿真的感到非常幸运。 \r\n\r\n　　You have been an excellent elder sister. Even though you two had your share of fights, the last few years you have become best friends. Your sister loves you so much, and she loves to make you laugh. She looks up to you, and sees you as her role model. As you saw when we departed, she misses you so much. And I know that you miss her just as much. There is nothing like family, and other than your parents, your sister is the one person who you can trust and confide in. She will be the one to take care of you, and the one you must take care of. There is nothing we wish more than that your sisterhood will continue to bond as you grow older, and that you will take care of each other throughout your lives. For the next four years, do have a short video chat with her every few days, and do email her when you have a chance. \r\n\r\n你也是个很好的姐姐。虽然你们姐妹以前也会打架，但是长大后，你们真的成为了好朋友。妹妹很爱你，很喜欢逗你笑，她把你当成她的榜样看待。我们开车离开哥大后，她非常想你，我知道你也很想她。世界上最宝贵的就是家人。和父母一样，妹妹就是你最可以信任的人。随着年龄的增长，你们姐妹之间的情谊不变，你们互相照应，彼此关心，这就是我最希望见到的事情了。在你的大学四年，有空时你一定要常常跟妹妹视频聊聊天，写写电子邮件。 \r\n\r\n　　College will be the most important years in your life. It is in college that you will truly discover what learning is about. You often question \"what good is this course\". I encourage you to be inquisitive, but I also want to tell you: \"Education is what you have left after all that is taught is forgotten.\" What I mean by that is the materials taught isn\'t as important as you gaining the ability to learn a new subject, and the ability to analyze a new problem. That is really what learning in college is about – this will be the period where you go from teacher-taught to master-inspired, after which you must become self-learner. So do take each subject seriously, and even if what you learn isn\'t critical for your life, the skills of learning will be something you cherish forever. \r\n\r\n大学将是你人生最重要的时光，在大学里你会发现学习的真谛。你以前经常会问到 “这个课程有什么用”，这是个好问题，但是我希望你理解：“教育的真谛就是当你忘记一切所学到的东西之后所剩下的东西。”我的意思是，最重要的不是你学到的具体的知识，而是你学习新事物和解决新问题的能力。这才是大学学习的真正意义——这将是你从被动学习转向自主学习的阶段，之后你会变成一个很好的自学者。所以，即便你所学的不是生活里所急需的，也要认真看待大学里的每一门功课，就算学习的技能你会忘记，学习的能力是你将受用终身的。 \r\n\r\n　　Do not fall into the trap of dogma. There is no single simple answer to any question. Remember during your high school debate class, I always asked you to take on the side that you don\'t believe in? I did that for a reason -- things rarely \"black and white\", and there are always many ways to look at a problem. You will become a better problem solver if you recognized that. This is called \"critical thinking\", and it is the most important thinking skill you need for your life. This also means you need to become tolerant and supportive of others. I will always remember when I went to my Ph.D. advisor and proposed a new thesis topic. He said \"I don\'t agree with you, but I\'ll support you.\" After the years, I have learned this isn\'t just flexibility, it is encouragement of critical thinking, and an empowering style of leadership, and it has become a part of me. I hope it will become a part of you too. \r\n','',3,NULL,6,'yc','2019-03-09',NULL,NULL,'Dear Daughter: \r\n亲爱的女儿： \r\n　　As we drove off from Columbia, I wanted to write a letter to you to tell you all that is on my mind. \r\n\r\n当我们开车驶出哥伦比亚大学的时候，我想写一封信给你，告诉你盘旋在我脑中的想法。 \r\n',NULL,NULL,NULL,NULL,NULL),(69,'老干部','','','李开复给女儿的信：你该如何度过大学生涯','images/4.jpg','Dear Daughter: \r\n亲爱的女儿： \r\n　　As we drove off from Columbia, I wanted to write a letter to you to tell you all that is on my mind. \r\n\r\n当我们开车驶出哥伦比亚大学的时候，我想写一封信给你，告诉你盘旋在我脑中的想法。 \r\n\r\n　　First, I want to tell you how proud we are. Getting into Columbia is a real testament of what a great well-rounded student you are. Your academic, artistic, and social skills have truly blossomed in the last few years. Whether it is getting the highest grade in Calculus, completing your elegant fashion design, successfully selling your painted running shoes, or becoming one of the top orators in Model United Nations, you have become a talented and accomplished young woman. You should be as proud of yourself as we are. \r\n\r\n首先，我想告诉你我们为你感到特别骄傲。进入哥伦比亚大学证明你是一个全面发展的优秀学生，你的学业、艺术和社交技能最近都有卓越的表现，无论是你在微积分上得了最高分，完成自己典雅的时尚的设计，成功卖出绘制的跑鞋，还是在“模拟联合国”演说中成为表现最突出的人之一，你毫无疑问已经是一个多才多艺的女孩。你的父母为你感到骄傲，你也应该像我们一样为自己感到自豪。 \r\n\r\n　　I will always remember the first moment I held you in my arms. I felt a tingling sensation that directly touched my heart. It was an intoxicating feeling I will always have. It must be that \"father-daughter connection\" which will bind us for life. I will always remember singing you lullaby while I rocked you to sleep. When I put you down, it was always with both relief (she finally fell asleep!) and regret (wishing I could hold you longer). And I will always remember taking you to the playground, and watching you having so much fun. You were so cute and adorable, and that is why everybody loved you so. \r\n\r\n我会永远记得第一次将你抱在臂弯的那一刻，一种新鲜激动的感觉瞬间触动了我的心，那是一种永远让我陶醉的感觉，就是那种将我们的一生都联结在一起的“父女情结”。我也常常想起我唱着催眠曲轻摇你入睡，当我把你放下的时候，常常觉得既解脱又惋惜，一方面我想，她终于睡着了！另一方面，我又多么希望自己可以多抱你一会儿。我还记得带你到运动场，看着你玩得那么开心，你是那样可爱，所有人都非常爱你。 \r\n\r\n　　You have been a great kid ever since you were born, always quiet, empathetic, attentive, and well-mannered. You were three when we built our house. I remember you quietly followed us every weekend for more than ten hours a day to get building supplies. You put up with that boring period without a fuss, happily ate hamburgers every meal in the car, sang with Barney until you fell asleep. When you went to Sunday Chinese school, you studied hard even though it was no fun for you. I cannot believe how lucky we are as parents to have a daughter like you. \r\n\r\n你不但长得可爱，而且是个特别乖巧的孩子。你从不吵闹、为人着想，既听话又有礼貌。当你三岁我们建房子的时候，每个周末十多个小时你都静静地跟着我们去运建筑材料，三餐在车上吃着汉堡，唱着儿歌，唱累了就睡觉，一点都不娇气不抱怨。你去上周日的中文学习班时，尽管一点也不觉得有趣，却依然很努力。我们做父母的能有像你这样的女儿真的感到非常幸运。 \r\n\r\n　　You have been an excellent elder sister. Even though you two had your share of fights, the last few years you have become best friends. Your sister loves you so much, and she loves to make you laugh. She looks up to you, and sees you as her role model. As you saw when we departed, she misses you so much. And I know that you miss her just as much. There is nothing like family, and other than your parents, your sister is the one person who you can trust and confide in. She will be the one to take care of you, and the one you must take care of. There is nothing we wish more than that your sisterhood will continue to bond as you grow older, and that you will take care of each other throughout your lives. For the next four years, do have a short video chat with her every few days, and do email her when you have a chance. \r\n\r\n你也是个很好的姐姐。虽然你们姐妹以前也会打架，但是长大后，你们真的成为了好朋友。妹妹很爱你，很喜欢逗你笑，她把你当成她的榜样看待。我们开车离开哥大后，她非常想你，我知道你也很想她。世界上最宝贵的就是家人。和父母一样，妹妹就是你最可以信任的人。随着年龄的增长，你们姐妹之间的情谊不变，你们互相照应，彼此关心，这就是我最希望见到的事情了。在你的大学四年，有空时你一定要常常跟妹妹视频聊聊天，写写电子邮件。 \r\n\r\n　　College will be the most important years in your life. It is in college that you will truly discover what learning is about. You often question \"what good is this course\". I encourage you to be inquisitive, but I also want to tell you: \"Education is what you have left after all that is taught is forgotten.\" What I mean by that is the materials taught isn\'t as important as you gaining the ability to learn a new subject, and the ability to analyze a new problem. That is really what learning in college is about – this will be the period where you go from teacher-taught to master-inspired, after which you must become self-learner. So do take each subject seriously, and even if what you learn isn\'t critical for your life, the skills of learning will be something you cherish forever. \r\n\r\n大学将是你人生最重要的时光，在大学里你会发现学习的真谛。你以前经常会问到 “这个课程有什么用”，这是个好问题，但是我希望你理解：“教育的真谛就是当你忘记一切所学到的东西之后所剩下的东西。”我的意思是，最重要的不是你学到的具体的知识，而是你学习新事物和解决新问题的能力。这才是大学学习的真正意义——这将是你从被动学习转向自主学习的阶段，之后你会变成一个很好的自学者。所以，即便你所学的不是生活里所急需的，也要认真看待大学里的每一门功课，就算学习的技能你会忘记，学习的能力是你将受用终身的。 \r\n\r\n　　Do not fall into the trap of dogma. There is no single simple answer to any question. Remember during your high school debate class, I always asked you to take on the side that you don\'t believe in? I did that for a reason -- things rarely \"black and white\", and there are always many ways to look at a problem. You will become a better problem solver if you recognized that. This is called \"critical thinking\", and it is the most important thinking skill you need for your life. This also means you need to become tolerant and supportive of others. I will always remember when I went to my Ph.D. advisor and proposed a new thesis topic. He said \"I don\'t agree with you, but I\'ll support you.\" After the years, I have learned this isn\'t just flexibility, it is encouragement of critical thinking, and an empowering style of leadership, and it has become a part of me. I hope it will become a part of you too. \r\n','',3,NULL,6,'yc','2019-03-09',NULL,NULL,'Dear Daughter: \r\n亲爱的女儿： \r\n　　As we drove off from Columbia, I wanted to write a letter to you to tell you all that is on my mind. \r\n\r\n当我们开车驶出哥伦比亚大学的时候，我想写一封信给你，告诉你盘旋在我脑中的想法。 \r\n',NULL,NULL,NULL,NULL,NULL),(70,'老干部','心柔','http://www.duwenzhang.com/wenzhang/renshengzheli/ganwu/20181019/395166.html','余生，请善待自己的父母','images/8.jpg','> 生命来来往往，来日并不方长。时光如水流逝，岁月无声催老。每一天，都过得忙忙碌碌，每一天，都有不同的精彩。春花秋月，夏雨冬雪，走过了一程又一程，蓦然回首，便已是上有老下有小的年纪。\r\n\r\n###### 曾经年少，不解父母辛劳，一路成长，一路依靠。所谓养儿方知父母恩，为人父母之后，自己如何操劳，如何不易，唯有经历过后，才知其中艰辛。这世上，从来就没有什么感同身受，唯有亲身经历，才能深解其味。\r\n\r\n###### 　　人生，就是一场轮回，年轻的时候，谁不为子女奔波劳累，待到子女羽翼已丰，不再需要护佑之时，自己已是夕阳暮景。而那些曾经的子女，也会成为新的父母，一如自己的父母那般，勤勤恳恳，为自己的子女操劳负累，待到子女再次长成，自己便也老去。\r\n\r\n###### 　　谁都有年迈之时。幼时，父母耐心教导，周全照料，待到父母暮年，我们是否也能如同曾经他们对待我们那般，不嫌不怪，周全仔细，用心侍奉。\r\n**人生，总是吃过生活的苦，才知道幸福有多甜蜜；走过太多弯路，才明白自己要怎么活。衡量幸福的标准，不是你得到了多少，而是要看你当下拥有多少，并且，要懂得珍视。**\r\n\r\n　　在这个世界上，父母，是唯一尽心付出却不求回报的人，也是最不愿意给我们添麻烦的人。都说，做父母是有有效期的，其实，做儿女又何尝不是？子欲养而亲尚待，绝对是上天给予的最大恩赐。趁父母还年轻，趁父母还健在，多陪陪他们吧。不要整天只知道在朋友圈说什么父母在，人生尚有来处，父母去，人生只剩归途。多拿出些实际行动，去做，去实现。\r\n\r\n　　不要总说自己没时间，真正没时间的不是我们，而是那一天比一天更加老去的父母。他们内心的孤独，对子女的渴盼，以及在那岁月深处，面对迟暮的恐慌，才是最需要我们抓紧时间去慰藉的。\r\n\r\n　　老人的那一代，远不及我们现在条件好，但不论怎样，他们依旧护我们健康茁壮的成长。而今，他们逐渐年纪大了，不要觉得反正也老了，凡事就给他们凑合。正因为老了，来日并不方长了，所以才更应该尽自己所能，给他们创造一些好的生活质量。\r\n\r\n　　少一些玩手机的时间，多给父母买一件像样的衣服；少一次聚会的时间，多陪父母说说话。他们想要吃什么，就给他们买点什么，不要舍不得，不要怕花钱，只要老人健康，不生病，光他们那点吃喝穿戴，又能花得了多少钱。有空的时候，也给父母安排一次说走就走的旅行，去他们想去的地方，看他们想看的风景，完成他们未完成的心愿，满足他们一直想要的渴求。\r\n\r\n　　不要觉得父母还有健康的体魄，闲暇的时间，就觉得他们还应该为我们做些什么。带孩子，收拾家，麻烦这些事情我们自己来做，老人已经辛劳了大半辈子了，熬盼了多久，才能熬到如今子女已长成，工作也已功成身退的光景。他们也需要一点时间为自己而活，他们也需要好好的享受一下自己生命的光彩，不论成与败，他们将我们抚育成人，就是最大的成就。\r\n\r\n　　很多事情，都是拥有的时候，不疼不痒毫不在意，失去了以后才知道珍惜，追悔莫及。当白发换走青丝，当皱纹刻于脸颊，才突然惊觉，原来父母，已然老去。幸好，已经发现，一切还算来得及。\r\n\r\n　　不要计较父母曾经偏爱了谁，做错了什么，付出了多少。尽孝这件事，不需要任何条件和理由，只管做自己就好。善待老人，就是善待明天的自己。多少年以后你就会发现，善待老人，不光是一种报恩，更是对自己内心的成全。\r\n\r\n　　完美人生，不是要得到别人的喝彩，而是要活出自己的精彩。不是要成就多少，而是要不留遗憾。余生，请活好自己，更请善待老人，你便此生无憾。\r\n\r\n\r\n','#人生感悟#',1,NULL,6,'zz','2019-03-09',NULL,NULL,'生命来来往往，来日并不方长。时光如水流逝，岁月无声催老。每一天，都过得忙忙碌碌，每一天，都有不同的精彩。春花秋月，夏雨冬雪，走过了一程又一程，蓦然回首，便已是上有老下有小的年纪。',NULL,NULL,NULL,NULL,NULL),(71,'老干部','心若雨汐 ','http://www.duwenzhang.com/wenzhang/aiqingwenzhang/ganwu/20180918/394279.html','不想结婚的姑娘 最后大多嫁给了爱情','images/5.jpg','# 一、我应该嫁给爱情么？还是嫁给现实\r\n曾有个密友问我，她说：“亲爱的，女生到底是应该嫁给爱情，还是嫁给现实呢？嫁给现实，无非就是自己少奋斗几年。而后用10数年的时间去后悔。不过这么说也算牵强，身边不乏些嫁给现实的朋友，在柴米油盐的生活中不仅慢慢习惯上了对方的存在，那种习惯略带些依赖的味道，并在长此以往的依赖中得了一种病，药石无医-懒癌晚期。”\r\n\r\n　　她说自己最近认识了一个男生，对方有车有房有存款，只是自己对他不曾看对眼。\r\n\r\n　　我说；“既然你不喜欢他，那为何要纠结呢。你有没有想过另一半是陪伴你走完一生的人。不喜欢不如直接回绝了人家，两不耽误，各自再找。而你又有赚钱的能力，嘴上总是挂着靠人不如靠己的字眼，既然不靠对方经济补给，那结果自然明了。后来我听说，她之所以苦恼，全因母亲的一席话。\r\n\r\n　　“什么都比不上有个属于自己的家不是么？感情都是可以慢慢培养的。在我们那个年代基本上都是亲朋好友给介绍，见见面走个过场便走在一起水到渠成。哪有那么多矫情，见怪不怪的。甚至我的上一辈还是受父母之命呢，爱情有用么，穷苦夫妻百事哀。就算你们之间的爱情浓烈到坚贞不渝也终会为现实所败，巧妇难为无米之炊。你看你你表姐跟着另一半满世界的旅行，你不眼气么？”为人父母，大都喜欢这样教育子女。父母不是你感情经历的亲身体验者，因此他们有时候抛出的观点，直观理性但又武断片面。“不听老人言，吃亏在眼前。“然而，对于爱情我从来都是借鉴些我认为对的地方，并不会全盘吸纳。\r\n\r\n　　有房又如何？房子没法给我这种人安全感。现实世界中我很理性，我清楚自己要的什么。然而当我遇上喜欢的人，我是很感性的。没有爱作为精神纽带的婚姻我觉得索然无味。人活一世不过3万多天，人生苦短，不容后悔。\r\n\r\n　　如果你是个“圣斗士”或许你的家人即便知道你心不属他，可仍旧会强撮合，只因这个对象他们看着还不错，又怕你错失了他“你找不着怎么办”。但我想劝叔叔阿姨一句：“古话说的好，强扭的瓜不甜。”我想对那些如闺蜜般夹杂其中，不停苦恼的女孩说一声：“你有追求幸福的权力，选择权只在你自己手里，别人的话只能是参考，如果你并不认为那是对的，让他如云烟般路过就好。别人不是你，不会有你的感同身受。当事人以外的人的话语多少带有些片面的意味。”\r\n\r\n　　说到这，我同那位朋友的观点默契的达成一致，好的感情，你是我的，我是你的。而我们又都是属于自己的。感情在于沟通，沟通的首要前提便是有话聊，你们可以有不同的爱好，但尊重、接受便好。你们之间的交流是否可以由浅入深，是否带有营养。并在某种程度上达成统一，这才是关键。三观不同的人同处同一屋檐，你们对周遭审度不同，再好的感情基础也是白费。更何况你们也不具有共同的感情经历。好的感情是彼此间的信任、是我们之间有同进步共患难的决心，而不是空有一个能够躲雨的巢穴，心与心之间毫无交流。即使你终究败给现实，想象一下当你每天对着一个无话聊的人，那种尴尬叫做无奈。\r\n\r\n　　有温度的才叫家，没温度的叫住所。说的难听些，你走后就连这个住所中的一砖一瓦都带不走，还跟我谈什么曾经拥有。\r\n\r\n　　你是嫁给爱情，还是嫁给临时住所呢？对相爱的人来说婚姻是神圣的殿堂，而不爱的，那叫坟墓。\r\n\r\n\r\n# 二、我爱你，更爱与你在一起时我的样子\r\n我曾在网上看到这样一个案例， 通读过后，我为男女主人公间的爱深深折服。这是一对恋人，他们结婚的时候没有车、房，吝啬的就连仪式、亲朋间的祝福都没有。然而女孩并没有后悔，她说：“年轻的时候反而不懂爱情，只是想简单找个对自己好的人。他对我好，所以我嫁了。\r\n\r\n　　“刚刚恋爱的那段时间，他们住在廉价的出租房，挤狭小的卫生间，拿着微薄的工资，过着青黄不接的日子。她说：”最难熬的日子，我们都一起度过了。“结婚十年，她事业稳定，她老公的事业也蒸蒸日上。两个人不光在市区买了房子，男人得到了女人家里的认可。其实幸福从来都来得好不容易，两个人在一起十多年，早就把两个人的生活过成了一个人。\r\n\r\n　　女人说：“自己动手，丰衣足食。”男人却说：“为了心爱的人再苦再累都无所谓，每天拖着疲惫的身子看着她系着围裙站在厨房面带微笑的做着晚餐，那一刻我觉得自己是世界上最幸福的人。“男人时常觉着自己欠妻子一个仪式，于是偷偷的在十周年那天精心布置了一场迟来的求婚仪式。\r\n\r\n　　她未曾想这场惊喜这么突然，虽然这一天在她意料之中，结果还是被感动得一塌糊涂。然好事刚过。坏事便接踵而来，婚后不久她经历了一场严重车祸，这次车祸给她造成了片段式的失忆是永久性的。包括她的父母，朋友，这些张熟悉的面孔一一从她的世界彻底删除。那些天只要她清醒过来，便不断向身边人求助，“我要找我老公”本能的情感依赖，其实就是一种深爱。\r\n\r\n　　这份深爱是我忘却了世界，唯独忘不了你。你看我即使忘记了我们的一二事，我还是绝对信任你啊。他说：“只要她能醒过来，忘记就忘记吧，不管她变成什么样子，我依然爱她。大不了，我们重新开始，从我叫什么开始。\r\n\r\n　　只要她还活着，我们还有大把的时间足够我们再好好爱一回。“那之后，他日夜守在医院里陪伴她，这期间他的朋友不是没出过劝他再找的主意，他狠狠的说：”再说这样的话，绝交。世上好女孩万万千，我爱的只有这一人。“\r\n\r\n　　好的爱情大抵就是这个样子，不论你变成什么样子，我都欣然接受，依然爱你。夫妻本是同林鸟，大难临头各自飞。在好的爱情面前这条定理并不受用。\r\n\r\n\r\n# 三、阿娇结婚：谢谢你出现，我还以为遇不到你了\r\n好的爱情会迟到，但它从不曾缺席。在不爱你的人面前我懂得了生活艰辛、学会了迎着风雨奔跑。在爱你的人面前，你明白了爱的真谛。可能爱情就是，有人曾深深地伤害过你还一笑而过。于是，你失望了，你觉得好像整个世家都抛弃了你，你觉得自己存在的本身就是天大的笑话。然而直到另一个人的出现，他用自己的行动告诉你他爱你，他不在意你有怎样的过去，就算你很糟糕，他爱的恰好就是此刻站在眼前那个最糟糕的女孩。你不用很好，我爱你便好。\r\n\r\n　　如果说生活曾带给你各种各样的亏欠，那么请相信总有一个人会弥补生活带给你的全部亏欠。\r\n\r\n　　即使世界荒芜了，也要相信总有一个人会是你的信徒。不论你是好是坏，也不管你是谁，你都是我的信仰。\r\n\r\n　　阿娇结婚了，穿着抹胸婚纱的她，光彩照人，那一天她是这个世上最美的女人。她也终于验证了自己歌里的那句话：最后变天后，变新娘，都是理想。\r\n\r\n　　想起阿娇曾经唱过的那首《下一站天后》，里面有一句话跟她的爱情观很契合：“其实心里最大的理想，跟他归家为他唱。“\r\n\r\n　　阿娇曾说，她要找一个很帅的男人结婚，艳照门事件后，她开始忽略颜值。阿娇曾失声痛哭的说，再没有人会娶我。在那段时间里，仍旧有人喜欢她、慢慢爱上她。只是，从未有人想过给那个看似坚强而内心深处总是敏感而受伤的女孩一个未来。\r\n\r\n　　对于一个相信爱的女孩来说：我可以接受你的不完美，我可以接受把我仅有的面包分一半给你。但我最怕的是无论我付出多少，怎样付出。都打动不了你。你描绘的那个未来很美，只是多余一个我。\r\n\r\n　　时间兜兜转转，27到37，一个女人最好的黄金年龄已然过去，如果换作意志不坚定的女孩或许早就不等了，可这个人偏偏是阿娇，我曾看过一期阿娇的专访，30多岁的她谈及那场遭人唾弃的爱恋，她的眼圈还是会泛红。泪水的含义或许更多的还是放不下吧。\r\n\r\n　　我给了你一颗心，一颗纯粹赤诚的爱你的心，后来你走了，我发现我的心空荡荡的。好像少了点什么。\r\n\r\n　　今年五月，阿娇结婚的消息一度上了热搜。阿娇找到了一个很帅的男人，没有复杂的情史，也不会计较她的过去。只是单纯的想和她走完一生。他给了她一场浪漫的婚礼，让她如愿做上最美的新娘。婚礼上，致词讲到：“走到今天好不容易…”时，阿娇哭得很厉害，然最先流泪的不是阿娇，而是那个很爱她的男人。\r\n\r\n　　他笑着告诉她，娶到你真好。终于等到你，还好我没有放弃。\r\n\r\n　　爱是什么，爱就是在对的时间遇到对的人，而错误的时间里，你付出爱的那个人终究是浮云自眼前一过。幸好，你即使遍体鳞伤也也依然愿意相信爱。\r\n# 四、好的爱情，是你可以做自己，简单而美好\r\n我觉得一段感情好不好，在女孩子身上就能体现的出来。一个女孩子自信幽默，举止落落大方，那她的身后肯定有一个愿意宠她、疼她的人。这个人用自己的行动去保护她本脆弱的自尊心。所以她说话做事的时候才不会畏手畏脚，踌躇不前，更不会为了一件事像一个神经病一样患得患失。\r\n\r\n　　其实世界上好的爱情就是这样的，对错不重要，只要有爱，就会有偏袒去宠着。爱给你一个支点，让你宽容温和的去面对这个并不完美的世界。\r\n\r\n　　就如张小娴说的那样：你要等对的人的时候，自己可能也不知道怎样才是对的人，只有当那个人出现，你才会知道，他应该就是那个对的人，他在你生命中出现，也是为了满足你，也让你去完善自己。\r\n\r\n　　嫁给爱情的女孩大多在接受爱的同时，学会了奉献爱，她们懂得付出和包容，并设身处地的为另一半未雨绸缪。她们往往戒掉了本身自带的小脾气，变得温和从容、平易近人。如果你发现一个女人如泼妇般骂街，哪怕一件微不足道的小事都要斤斤计较，锱铢必较。我想或许是她过得不够好吧。\r\n\r\n　　也许会晚点遇见你，无论你是二十岁还是三十岁，但我仍坚信，那个爱我、懂我、惜我的人会穿越人海，只为给我一个爱的港湾。在这之前，你要做的就是善待自己，让自己试着独立、拥有一个不依赖旁人的独立人格，答应我，好吗？\r\n\r\n　　心若雨汐：你还相信爱吗？不过，我是一如既往的相信着，等待着。\r\n','#爱情故事#',1,NULL,6,'zz','2019-03-09',NULL,NULL,'曾有个密友问我，她说：“亲爱的，女生到底是应该嫁给爱情，还是嫁给现实呢？嫁给现实，无非就是自己少奋斗几年。而后用10数年的时间去后悔。不过这么说也算牵强，身边不乏些嫁给现实的朋友，在柴米油盐的生活中不仅慢慢习惯上了对方的存在，那种习惯略带些依赖的味道，并在长此以往的依赖中得了一种病，药石无医-懒癌晚期。”',NULL,NULL,NULL,NULL,NULL),(72,'老干部','yyyy0101','http://www.duwenzhang.com/wenzhang/yuanchuang/20190224/399816.html','野心勃勃而又不去行动的人才会有更多的担心','images/9.jpg','> 杞人忧天的故事很多人都知道，说的是古时杞国有一个人会有各种各样的担心，比如担心会自己生病，担心自己会穷困，有一天甚至担心天会塌下来。别人都笑话他，说他的担忧是多余的，整天哪有果多的担心，人岂不是很悲催痛苦，后来有一成语来形容他，就是杞人忧天。\r\n\r\n在现实生活中，我发现有更多的人做着杞人忧天的提心。比方说，有人担心自己孩子输在起跑线上，就拼命给孩子报各种补习班，后来又担心孩子考不上好的大学，成年后，又担心没房没车没找不到好人家的姑娘，再后来结婚了，又担心孙子是不是健康，做着各种各样的检查……\r\n\r\n　　我们发现有一些人一生当中始终处于担忧里，这是很痛苦的，他们从来没有享受过生活，一生在担忧里小心谨慎的生活着，生活的美好他们体会不到，他们就高速运转的机器，哪来的闲功夫见看花开花落，松涛阵阵。\r\n\r\n　　那么，问题来了，这是怎么样形成的性格，有必于搞的这样紧张吗？一生这样无趣，还不如四五岁的孩童，天真烂漫无忧无虑的生活着。\r\n\r\n　　我们发现这些人都是不甘示弱的人，都是天生有着优越感的人，自认为自己就应该比别人过得好，他们也的确是生活的强者，但是却并非都是智者，不懂得享受生活。\r\n\r\n　　他们内心会有各种各样的欲望攀比，永无止境的奋斗目标，为此，这些想法让他们寝食难安，他们每天都会难受，因为内心的奋斗目标在召唤，他们对现实的生存环境是不满意的，甚至是反感的，于是痛苦产生了。接下来，就会有两种情况产生。\r\n\r\n　　一种是没有觉知，不知道自己痛苦的根源，过着得过且过的生活，因为他们生活并没有触及内心的根源，或者说没有产生直接的行动，他们会越来越担忧，严重了就会胡思乱想，就像那个杞国人一样担心天会塌下来。\r\n\r\n　　另一种是觉知，知道自己内心痛苦的根源，并积极朝着内心的目标奋进，做一个知行合一的人，这种人往往是野心勃勃的，并有积极的行动，因此，他们并不会胡思乱想，也不会害怕恐惧，这样的人如果持之以恒的专攻某一领域，往往能取得成功。\r\n\r\n　　所以第一种人应该向第二种人学习，如果认为自己非等闲之辈，就应该积极的行动，而不会各种担忧和恐惧，因为行动是战胜魔鬼最有效的武器，当你认为自己对前面临的是一座山时，走一步是一步，终究有一天会走完，当你认为面前拦路虎是一个魔鬼时，那么就亮出宝剑，勇敢战斗，那么你才有赢得胜利的机会，如果不去亮剑，不去行动，就永远没有成功的机会。\r\n\r\n　　当然了，生活也并非完全那么急促湍急，它也有柳暗花明花红叶绿云淡风轻的时刻，当你在为着自己理想和目标奋斗时，也要抽出一点时间来享受美好的生活，不要无趣的只知道奋斗。\r\n\r\n　　如果认为自己天生并非俗辈，那么就做个勇敢的人。欲望越大，烦恼越多，这是成正比的，所以担忧恐惧也会少不了的，如果想跨越这个坎，那么就再加上勇敢积极的行动吧，他们战胜一切负面情绪最有效的法定。\r\n','#故事#',1,NULL,6,'zz','2019-03-09',NULL,NULL,'杞人忧天的故事很多人都知道，说的是古时杞国有一个人会有各种各样的担心，比如担心会自己生病，担心自己会穷困，有一天甚至担心天会塌下来。别人都笑话他，说他的担忧是多余的，整天哪有果多的担心，人岂不是很悲催痛苦，后来有一成语来形容他，就是杞人忧天。',NULL,NULL,NULL,NULL,NULL),(73,'老干部','孟婷1234','http://www.duwenzhang.com/wenzhang/lizhiwenzhang/20180518/388882.html','三十多岁，如何打理尴尬年龄里的凌乱人生','images/6.jpg','> 三十岁是一个分水岭，一边是骄阳似火、山花烂漫的绚丽青春，一边是蝇营狗苟、满地鸡毛的凌乱人生，曾经的热血青年已经成为端着保温杯泡着枸杞的中年大叔。\r\n\r\n　　*三十岁是一扇门，门里面是此时的平淡安逸，门外面是未知的挑战与激情。看到众多招聘广告的年龄要求——三十五周岁以下，有一种莫名的恐慌，然后暗自庆幸自己还有一份工作。*\r\n\r\n　　三十岁是一道鸿沟，90后、00后的小孩们兴致勃勃地聊着跑男的情景恰似当年的我们对《流星花园》的执迷狂热，我们所说的责任、信念、三观等在他们看来不可思议。父辈们劝我们平安是福、知足常乐，而内心深处却住着一个倔强不屈、勇于挑战的自己。\r\n  三十岁是个岔路口，一边是安逸舒适的人生之路，就像温水中的青蛙，沉浸在一成不变、波澜不惊的生活中不能自拔，最终失了跳出去的斗志和勇气；另一边道路泥泞、弯曲、充满坎坷、前途未卜，机遇与挑战激励着我们不断成长进步，一路上感受着探索未知世界的乐趣。\r\n\r\n　　三十岁是人生中的一个转折，棱角分明、意气用事、口无遮拦、锋芒毕露被圆融世故、深思熟虑、谨言慎行、韬光养晦所代替；曾经追求生活品质热衷于名牌的我们觉得购买打折、促销商品有失风度，现在竟为秒杀到一件根本用不上的物品而欣喜不已；为维护自己的权益与商家据理力争，有时候也和买菜的小贩们调侃几句，发发牢骚，这就是所谓的中年油腻人生吗？ \r\n\r\n　　三十多岁，如何打理尴尬年龄里的凌乱人生？\r\n\r\n　　开始反思以前的生活，在反思中成长。\r\n\r\n　　三十多岁在工作、结婚、生子之后人生的雏形基本形成，当享受着日复一日的安逸闲适，突然发现年少时的学霸们已经在一个在众人不可企及的高度上继续攀爬，我开始怀疑人生了，比我们更优秀的人如此拼命，我们有什么理由故步自封、混沌度日呢？\r\n\r\n　　想起曾经年少无知虚度的光阴，想起在人生紧要关头错过的机遇，悲从中来。\r\n\r\n　　生活已经够安逸了，为什么还要在安逸中不思进取呢？在还可以努力的年龄里尽力拼一把，不要给人生留下遗憾。\r\n\r\n　　反思让我们清醒自己的现状，也让我看清以后要走的路，人格在反思中得以重构，思维在反思中明晰，个体在反思中脱胎换骨。\r\n\r\n　　《我的前半生》中为爱牺牲甘愿做家庭主妇的罗子君在遭遇婚变后，在痛定思痛的反思之后开启了崭新的人生。\r\n\r\n　　做人生的减法，根据自己的特长，选择那个最靠谱的目标。\r\n\r\n　　追求完美的我也曾给自己定了很多目标，总是在坚持了一段时间以后就放弃了，家里的跑步机成为晾衣服的最佳工具，买的书籍早已积上了厚厚的尘土……生命就一次次陷入这样的恶性循环：\r\n\r\n　　确立目标——斗志满满满 ——缺乏自制力、外在诱惑而放弃——痛下决心——再次确立目标\r\n\r\n　　树立太多的目标、兼顾太多反而会顾此失彼，三十多岁开始做人生的减法，在每个阶段确立一两项可行的、可发挥自己所长的目标然后坚持下来\r\n\r\n　　董明珠在35岁以后专注空调销售业务，以自己的死缠烂打和执着坚韧谱写了销售界的神话。\r\n\r\n　　持之以恒将一件事情做到极致的人是人生的赢家。\r\n\r\n　　那么确立目标之后怎样有效地坚持下来呢？半途而废源于缺乏强大的动力支持，朋友说她才开始跑步的那几天，每天跑完五公里后肌肉酸痛、身心疲惫，是什么让她支撑下来的呢？每次快要放弃的时候，像勾践卧薪尝胆，她默默地问自己：“你忘了曾经被当众嘲笑肥胖的耻辱吗？”，“一雪前耻”是她坚持的动力，多少次在别人的酣梦中她离开温暖的被窝，两年多的坚持带给她意想不到的人生收获。\r\n\r\n　　坚持总会伴随着突然的改变带来的阵痛与不适，这是正常现象，给自己找一个坚持下去的动力，回忆自己曾经因为坚持获得成功或者因为半途而废而错失良机的经历，或者给自己树立一个积极向上的榜样。就像母亲痛苦的分娩换来的是新生命的诞生，挺过生命状态改变之初这段最难熬的日子，坚持就成为了一种习惯，当习惯成为生活的常态，我们将会收获不一样的人生。\r\n\r\n　　缓解压力，学习一些缓解不良情绪的方法。\r\n\r\n　　我们努力在资历深厚的前辈和势头正猛的90后之间争得一席之地，孩子的教育、父母日渐衰老的身体需要我们承担起应有的责任来，看到别人家的孩子在周末努力学习着各种本领，感受着逢年过节相聚时充斥着的攀比、炫耀，品尝着生活的酸甜苦辣，我们眉头紧锁、焦虑不安，这些无形的压力正在考验着我们敏感脆弱的内心，不由地感慨：人到中年百事哀。\r\n\r\n　　三十多岁，要学会正确宣泄自己的不良情绪，在运动、音乐、冥想中让自己紧绷的神经得以放松，身心做一番休憩之后再继续上路。\r\n\r\n　　抛掉不切实际的幻想，为可以触摸到的现实而努力。\r\n\r\n　　我们喂马、劈柴，为粮食、蔬菜担心，用心经营着工作、生活，但不会冲动之下为诗和远方远走他乡，我们深知自己肩负的各种责任，而这些责任让我们的人生变得深刻。\r\n\r\n　　把工作当成提升历练自己的平台，30岁以后，要开始积累经验、能力、知识、人脉之类的东西，远离七嘴八舌、说长道短，在单位里每个员工身上都有值得学习的闪光点，做到博采众长不断完善自己，为实实在在可触摸到的东西努力才是值得的。\r\n\r\n　　珍惜和家人在一起的时光，放下手机，带老人孩子出去散心，哪怕是不咸不淡的聊天，不要用口头的承诺代替实际的陪伴，因为岁月匆匆，经不起太多的等待。\r\n\r\n　　利用好自己的业余时间，抛掉无用的社交。\r\n\r\n　　在这个世界上，无论你多么优秀，总有人喜欢你，也有人不喜欢你，所以不必讨好每一个人。三十岁之前为了保持合群的状态，我们总是削尖脑袋钻进那一堆聊天、嗑瓜子的人群之中，现在我们即使游离在众人之外却并不感到落寞。\r\n\r\n　　与其让生命的能量在虚情假意地应付无关痛痒的社交中慢慢流失，不如去拿起专业书籍提升自己的业务能力，或者是在知识的海洋汲取人生的精华，感悟生命的真谛。\r\n\r\n　　业余时间可以造就一个人，也可以毁掉一个人。\r\n\r\n　　工作之余把别人用来刷屏、谈论八卦的时间用于学习会收到意想不到的效果：手机里存上一本书籍，在等待孩子上兴趣班的时间可以看一看；如果时间允许可以步行上下班，锻炼身体的同时顺便对当天的生活做一番规划或者总结；抽空查看一下最近的消费明细，做到心中有数，减掉不必要的支出，学习一些实用的理财技巧让财富增值，利用好碎片化的时间人生会有意想不到的收获。\r\n\r\n　　三十多岁，把握机会、用心经营、努力付出的你会收获不一样的精彩人生。\r\n\r\n','#励志#',1,NULL,6,'zz','2019-03-09',NULL,NULL,'三十岁是一个分水岭，一边是骄阳似火、山花烂漫的绚丽青春，一边是蝇营狗苟、满地鸡毛的凌乱人生，曾经的热血青年已经成为端着保温杯泡着枸杞的中年大叔。三十岁是一扇门，门里面是此时的平淡安逸，门外面是未知的挑战与激情。看到众多招聘广告的年龄要求——三十五周岁以下，有一种莫名的恐慌，然后暗自庆幸自己还有一份工作。\r\n',NULL,NULL,NULL,NULL,NULL),(74,'老干部','心若雨汐','http://www.duwenzhang.com/wenzhang/renshengzheli/ganwu/20181002/394682.html','有一种心态叫放下，有一种境界叫舍得','images/2.jpg','> 心像是个口袋，什么都不装的叫心灵，装一点的叫心眼，装多了的的叫心计，装更多的叫心机，装得太多了最后那些负累就只能被当作心事了。人活在世往往过于在意近在咫尺的功名利禄，我们的生活是否如与朋友说起时一般绚烂夺目，现实生活中亦有很多人深陷进没有结果的爱情里，明知是错的，还要迂回前进。那些口口声声说着为了生活的衣食无忧、为了孩子不得不继续维持的婚姻。很多人拿不起又放不下，任由空白的生活在自己的眼中周而复始、慢慢的这种负累侵蚀的我们身心不堪重负。试着放下吧，放下你的疲惫、放下那些没有结果的执念、清醒时看到的你和他的未来若是并不理想，不如劝自己趁早放下，长痛不如短痛。再试着看开些，有钱就会拥有快乐么？就像你耗尽心力换得了工作场上的升职机会，而就在你即将上任时被查出了重症，钱能换回健康么？再多的钱能换回你的生命，换回勃勃生机的青春么？钱固然重要，可是与生命、与亲情、爱情比起来，钱真的没有那么重要。有形的财富无法与无价的情感、生命相提并论，何来取舍一说呢。\r\n\r\n#### 人一定要想清三个问题，第一你有什么，第二你要什么，第三你能放弃什么。对于多数人而言：有什么，我们往往很轻易的就评价出自己的现状；那要什么，大多数人内心也有明确的想法；那么问题来了，现在你告诉我你能放弃什么，几乎没有人可以做到不放弃就轻易获得了全部你想要的东西。人生不会每一件事都会让自己称心如意，常言道：人为财死，鸟为食亡。但有多少人为了事业有成，最后倒在了工作岗位上，那些口耳相传的过劳案例并非偶然意外、就像疾病的发展也是有一个循序渐进的过程。外在的过劳加上心里的过度忧思，外因内因从不分离。那些远赴千里外的地方工作的子女，其家中病重老母为不让远方的儿过于掂念，不忍心在孩子耳边传递生病讯息，弥留之际也未能见上最后一面。我并不赞成那些抛家舍业的一颗心思完全放在工作上的做法，工作一时的，即便离开这，你仍有再次获得的机会。而家庭、健康却要陪伴你很久，且一旦失去就是永远。或许你是为财而死，但是不值得。\r\n\r\n#### 　　生活中很多人喜欢就一件事左右摇摆，举棋不定。轻易落子怕输了，一子不落怕错过。于是他们一直纠结于细微得不值得一提的小事，让自己始终活在紧张的泥潭不能自拔。在自己短暂的一生中，谨小慎微，防微杜渐，也许别人的一句话，一个眼神，一个表情，都会不断揣摩，别人随口一说的话却始终放在心里耿耿于怀，凡事有一点端倪便以偏概全，杞人忧天。所以这些人总是活得很累，舒心二字与他们完全绝缘。其实人生有一种心态叫放下，。不必凡事都争个明白，我们生活的这个社会本就很复杂，然而很多人把这个本来就复杂的社会弄得更加复杂，复杂的无章可循。贪婪的人容易受到打击。欲望越少，生活越幸福。','#哲理#',1,NULL,6,'zz','2019-03-09',NULL,NULL,'心像是个口袋，什么都不装的叫心灵，装一点的叫心眼，装多了的的叫心计，装更多的叫心机，装得太多了最后那些负累就只能被当作心事了。人活在世往往过于在意近在咫尺的功名利禄，我们的生活是否如与朋友说起时一般绚烂夺目，现实生活中亦有很多人深陷进没有结果的爱情里，明知是错的，还要迂回前进。那些口口声声说着为了生活的衣食无忧、为了孩子不得不继续维持的婚姻。很多人拿不起又放不下，任由空白的生活在自己的眼中周而复始、慢慢的这种负累侵蚀的我们身心不堪重负。试着放下吧，放下你的疲惫、放下那些没有结果的执念、清醒时看到的你和他的未来若是并不理想，不如劝自己趁早放下，长痛不如短痛。再试着看开些，有钱就会拥有快乐么？就像你耗尽心力换得了工作场上的升职机会，而就在你即将上任时被查出了重症，钱能换回健康么？再多的钱能换回你的生命，换回勃勃生机的青春么？钱固然重要，可是与生命、与亲情、爱情比起来，钱真的没有那么重要。有形的财富无法与无价的情感、生命相提并论，何来取舍一说呢。',NULL,NULL,NULL,NULL,NULL),(75,'老干部','','','美国载人版“龙”飞船完成首次试飞返回地球','images/1.jpg','> 新华社洛杉矶3月8日电（记者 谭晶晶）在国际空间站停留5天后，美国太空探索技术公司的首艘载人版“龙”飞船8日凌晨脱离空间站，并于6个多小时后顺利溅落在预定的大西洋海域，完成首次试飞任务。\r\n\r\n美国航天局的直播画面显示，“龙”飞船于美国东部时间8日2时32分（北京时间8日15时32分）离开国际空间站。在近地轨道飞行5个多小时后，“龙”飞船点燃推进器开始回归。随后，飞船的4个降落伞展开，以减缓飞船下降速度。\r\n美国东部时间8时45分（北京时间21时45分），“龙”飞船落入佛罗里达海岸附近的大西洋海域。太空探索技术公司的回收船负责打捞飞船，并将其运回陆地。\r\n\r\n美国航天局局长布里登斯廷当天表示，在顺利完成国际空间站任务后，载人版“龙”飞船成功落入大西洋，成为人类太空飞行新时代的又一里程碑，距离“龙”飞船从美国本土将美国宇航员送入太空的目标更近了一步。\r\n\r\n据美国航天局介绍，“龙”飞船此次向国际空间站送去约200千克物资和设备，并将约150千克科学工具、空间站设备等带回地球。\r\n\r\n此次载人版“龙”飞船进行不载人试飞，飞船上载有一个身穿白色宇航服、名为“里普利”的假人模型。其头部、颈部和脊柱等装有多个传感器，用于收集飞船飞行过程中的相关数据。飞船回收后，科研人员将分析所有相关数据，为将来的载人飞行做准备。\r\n\r\n按照设计，载人版“龙”飞船可在空间站停留210天，但这次执行任务的“龙”飞船只在空间站停留5天。\r\n\r\n这次试飞旨在验证载人版“龙”飞船安全运送宇航员往返国际空间站的能力，是美国在航天飞机退役近8年后迈出的恢复载人发射能力的关键一步。按照美国航天局的计划，本次试飞成功后，载人版“龙”飞船将于今年7月进行首次载人飞行，将两名美国宇航员送往国际空间站。','',4,NULL,3,'yc','2019-03-09',NULL,NULL,'新华社洛杉矶3月8日电（记者 谭晶晶）在国际空间站停留5天后，美国太空探索技术公司的首艘载人版“龙”飞船8日凌晨脱离空间站，并于6个多小时后顺利溅落在预定的大西洋海域，完成首次试飞任务。\r\n美国航天局的直播画面显示，“龙”飞船于美国东部时间8日2时32分（北京时间8日15时32分）离开国际空间站。在近地轨道飞行5个多小时后，“龙”飞船点燃推进器开始回归。随后，飞船的4个降落伞展开，以减缓飞船下降速度。',NULL,NULL,NULL,NULL,NULL),(76,'老干部','','','web项目常见错误汇总','images/7.jpg','java.lang.IllegalStateException: Web app root system property already set to different value: \'webapp.root\' = [....\\tmp1\\wtpwebapps\\workreport\\] instead of [.....\\wtpwebapps\\ApprovalFront\\] \r\n- Choose unique values for the \'webAppRootKey\' context-param in your web.xml files!\r\n \r\n错误原因：Tomcat发布多个项目时抛的webAppRootKey错误,  原因是部署在同一容器中的Web项目，定义了相同的webAppRootKey或者都没有定义\r\n解决办法：需要为每个web都定义一个webAppRootKey\r\n<!--app1中的web.xml-->\r\n<context-param>\r\n    <param-name>webAppRootKey</param-name>\r\n    <param-value>app1name</param-value>\r\n</context-param>\r\n \r\n<!--app2中的web.xml-->\r\n<context-param>\r\n    <param-name>webAppRootKey</param-name>\r\n    <param-value>app2name</param-value>\r\n</context-param>','',2,NULL,1,'yc','2019-03-09',NULL,NULL,'Tomcat发布多个项目时抛的webAppRootKey错原因是部署在同一容器中的Web项目，定义了相同的webAppRootKey或者都没有定义\r\n解决办法：需要为每个web都定义一个webAppRootKey',NULL,NULL,NULL,NULL,NULL),(77,'老干部','','','如何在Maven下搭建SSM框架','images/6.jpg','如何在Maven下搭建SSM框架\r\n1.Eclipse配置\r\n \r\n这里提供两种开发工具\r\nSSM框架项目可以使用Eclipse进行开发为了能简化开发流程，首先需要在Eclipse中安装SpringIDE插件，详细安装步骤请参考：\r\nhttps://blog.csdn.net/zhen_6137/article/details/79383941\r\n或者使用Spring官方提供的STS工具进行开发，下载地址：\r\nhttps://spring.io/tools/sts/legacy\r\n2.构建Maven环境\r\nMaven下载配置\r\nMaven下载地址：http://maven.apache.org/download.cgi\r\n\r\n下载完成后解压到：D:\\Program Files\\apache-maven-3.5.3下\r\n\r\n在环境变量中，新增\r\n系统变量名：MAVEN_HOME\r\n变量值：D:\\Program Files\\apache-maven-3.5.3\r\n在Path中追加：%MAVEN_HOME%\\bin;\r\n在命令行窗口中输入：mvn –v 显示如下信息，这说明Maven安装成功；\r\n\r\nMaven仓库设置\r\n由于Maven提供的公共仓库的访问速度十分缓慢，所以这里修改使用阿里的Maven仓库镜像，编辑conf/setting.xml文件，在mirrors节点下，新增如下内容，这样从仓库中下载jar包速度上会快很多。\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n<mirror>\r\n<id>nexus-aliyun</id>\r\n<mirrorOf>*</mirrorOf>\r\n<name>Nexusaliyun</name>\r\n<url>http://maven.aliyun.com/nexus/content/groups/public</url>\r\n</mirror>\r\n同时需要将maven下载的jar包存放路径进行设置，编辑conf/setting.xml文件，配置本地仓库路径：\r\n\r\n\r\n1\r\n<localRepository>D:/ProgramFiles/apache-maven-3.5.3/repo</localRepository>\r\n3.Eclipse（STS）与Maven整合\r\n设置自带maven整合工具，在Preferences中找到Maven节点，将User Settings项的设置配置为自己maven所在路径然后更新设置（Update Settings Reindex）\r\n\r\n点击Installations节点，添加maven runtime，具体如图所示：\r\n\r\n4.创建maven项目时设置JDK\r\n问题描述：eclipse创建maven项目时，显示的JDK默认版本为1.5，实际使用的JDK为1.8，如何修改？\r\n解决方案：编辑conf/settings.xml文件，在profiles节点下配置\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n<id>jdk-1.8</id>\r\n<activation>\r\n<activeByDefault>true</activeByDefault>\r\n<jdk>1.8</jdk>\r\n</activation>\r\n<properties>\r\n<maven.compiler.source>1.8</maven.compiler.source>\r\n<maven.compiler.target>1.8</maven.compiler.target>\r\n<maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>\r\n</properties>\r\n5.使用maven创建项目\r\n新建项目，类型选择：Maven Project，点击Next\r\n\r\n选择默认工作空间，点击Next\r\n\r\n选择maven-archetype-webapp，点击Next\r\n\r\nGroup Id：com.ssm 表示应用的包名称\r\nArtifact Id：demossm 表示工程名称\r\n\r\n6.新建的项目问题处理\r\n创建完成后会出现如图所示报错：\r\n\r\n报错原因：\r\n\r\n解决办法：添加Tomcat Server 并选择JRE为本地安装的JDK的jre\r\n\r\n选择项目，右键编辑Build Path -> Configure Build Path\r\n\r\n将JRE System修改为自己本地安装的JDK下的jre，并添加Tomcat到编译环境中：\r\n\r\n此时项目已经不再报错\r\n\r\n创建后的工程需要完善目录信息，一般创建后需要存在4个目录（src/main/java  src/main/resources  src/test/java  src/test/resources）需要根据实际补充缺少的包；\r\n \r\n\r\n默认的Dynamic Web Module为2.3，使用Tomcat 8.0，需要修改为3.0\r\n这里如果直接修改是会报错并无法修改的，如下图所示：\r\n \r\n修改方法：\r\n \r\n① 编辑工程所在目录下.settrings文件夹中的org.eclipse.wst.common.project.facet.core.xml文件\r\n将\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<faceted-project>\r\n<fixedfacet=\"wst.jsdt.web\"/>\r\n<installedfacet=\"java\"version=\"1.5\"/>\r\n<installedfacet=\"jst.web\"version=\"2.3\"/>\r\n<installedfacet=\"wst.jsdt.web\"version=\"1.0\"/>\r\n</faceted-project>\r\n修改为：\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<faceted-project>\r\n<fixedfacet=\"wst.jsdt.web\"/>\r\n<installedfacet=\"java\"version=\"1.8\"/>\r\n<installedfacet=\"jst.web\"version=\"3.0\"/>\r\n<installedfacet=\"wst.jsdt.web\"version=\"1.0\"/>\r\n</faceted-project>\r\n \r\n修改项目web.xml文件为：\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<web-appxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\nxmlns=\"http://java.sun.com/xml/ns/javaee\"\r\nxsi:schemaLocation=\"http://java.sun.com/xml/ns/javaeehttp://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\r\nversion=\"3.0\">\r\n<display-name>ArchetypeCreatedWebApplication</display-name>\r\n</web-app>\r\n在pom.xml文件build节点中添加如下信息：\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n<plugins>\r\n<plugin>\r\n<groupId>org.apache.maven.plugins</groupId>\r\n<artifactId>maven-compiler-plugin</artifactId>\r\n<configuration>\r\n<source>1.8</source>\r\n<target>1.8</target>\r\n</configuration>\r\n</plugin>\r\n</plugins>\r\n \r\n修改后，在项目上右键，找到Maven属性下点击Update Project\r\n\r\n\r\n此时项目已经修改为Dynamic Web Module为3.0\r\n \r\n创建示例S_USER表：\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\nCREATETABLE\r\nS_USER\r\n(\r\nIDINT(4)NOTNULL,\r\nNAMEVARCHAR(80),\r\nACCOUNTVARCHAR(30),\r\nPASSWORDVARCHAR(128),\r\nPRIMARYKEY(ID)\r\n);\r\n7.添加基本配置文件\r\n添加以下配置文件\r\n\r\n \r\nPom.xml配置如下：\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n50\r\n51\r\n52\r\n53\r\n54\r\n55\r\n56\r\n57\r\n58\r\n59\r\n60\r\n61\r\n62\r\n63\r\n64\r\n65\r\n66\r\n67\r\n68\r\n69\r\n70\r\n71\r\n72\r\n73\r\n74\r\n75\r\n76\r\n77\r\n78\r\n79\r\n80\r\n81\r\n82\r\n83\r\n84\r\n85\r\n86\r\n87\r\n88\r\n89\r\n90\r\n91\r\n92\r\n93\r\n94\r\n95\r\n96\r\n97\r\n98\r\n99\r\n100\r\n101\r\n102\r\n103\r\n104\r\n105\r\n106\r\n107\r\n108\r\n109\r\n110\r\n111\r\n112\r\n113\r\n114\r\n115\r\n116\r\n117\r\n118\r\n119\r\n120\r\n121\r\n122\r\n123\r\n124\r\n125\r\n126\r\n127\r\n128\r\n129\r\n130\r\n131\r\n132\r\n133\r\n134\r\n135\r\n136\r\n137\r\n138\r\n139\r\n140\r\n141\r\n142\r\n143\r\n144\r\n145\r\n146\r\n147\r\n148\r\n149\r\n150\r\n151\r\n152\r\n153\r\n154\r\n155\r\n156\r\n157\r\n158\r\n159\r\n160\r\n161\r\n162\r\n163\r\n164\r\n165\r\n166\r\n167\r\n168\r\n169\r\n170\r\n171\r\n172\r\n173\r\n174\r\n175\r\n176\r\n177\r\n178\r\n179\r\n180\r\n181\r\n182\r\n183\r\n184\r\n185\r\n186\r\n187\r\n188\r\n189\r\n190\r\n191\r\n192\r\n193\r\n194\r\n195\r\n196\r\n197\r\n198\r\n199\r\n200\r\n201\r\n202\r\n203\r\n204\r\n205\r\n206\r\n207\r\n208\r\n209\r\n210\r\n211\r\n212\r\n213\r\n214\r\n215\r\n216\r\n217\r\n218\r\n219\r\n220\r\n221\r\n222\r\n223\r\n224\r\n225\r\n<projectxmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0http://maven.apache.org/maven-v4_0_0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <groupId>com.ssm</groupId>\r\n    <artifactId>demossm</artifactId>\r\n    <packaging>war</packaging>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <name>demossmMavenWebapp</name>\r\n    <url>http://maven.apache.org</url>\r\n    <properties>\r\n        <!--Spring版本号-->\r\n        <spring.version>4.3.8.RELEASE</spring.version>\r\n        <mybatis.version>3.3.0</mybatis.version>\r\n        <aspect.version>1.8.0</aspect.version>\r\n        <mysql.version>5.1.35</mysql.version>\r\n        <slf4j.version>1.7.12</slf4j.version>\r\n        <log4j.version>1.2.17</log4j.version>\r\n        <jackson.version>2.5.4</jackson.version>\r\n    </properties>\r\n    <dependencies>\r\n        <!--Spring相关包start-->\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-core</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-aop</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-web</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-webmvc</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-jdbc</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-tx</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <!--以下包看情况需要-->\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-test</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-oxm</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-context</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-context-support</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-expression</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-orm</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-webmvc</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <!--spring框架包end-->\r\n        <!--AOP相关包SpringAOP会使用到以下两个包-->\r\n        <dependency>\r\n            <groupId>org.aspectj</groupId>\r\n            <artifactId>aspectjrt</artifactId>\r\n            <version>${aspect.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.aspectj</groupId>\r\n            <artifactId>aspectjweaver</artifactId>\r\n            <version>${aspect.version}</version>\r\n        </dependency>\r\n        <!--MyBatis相关包-->\r\n        <dependency>\r\n            <groupId>org.mybatis</groupId>\r\n            <artifactId>mybatis</artifactId>\r\n            <version>${mybatis.version}</version>\r\n        </dependency>\r\n        <!--Spring集成MyBatis-->\r\n        <dependency>\r\n            <groupId>org.mybatis</groupId>\r\n            <artifactId>mybatis-spring</artifactId>\r\n            <version>1.2.3</version>\r\n        </dependency>\r\n        <!--MySQL相关包-->\r\n        <dependency>\r\n            <groupId>mysql</groupId>\r\n            <artifactId>mysql-connector-java</artifactId>\r\n            <version>${mysql.version}</version>\r\n        </dependency>\r\n        <!--数据库连接池-->\r\n        <dependency>\r\n            <groupId>com.alibaba</groupId>\r\n            <artifactId>druid</artifactId>\r\n            <version>1.0.20</version>\r\n        </dependency>\r\n        <!--json数据格式支持-->\r\n        <dependency>\r\n            <groupId>net.sf.json-lib</groupId>\r\n            <artifactId>json-lib</artifactId>\r\n            <version>2.4</version>\r\n            <classifier>jdk15</classifier>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>com.fasterxml.jackson.core</groupId>\r\n            <artifactId>jackson-core</artifactId>\r\n            <version>${jackson.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>com.fasterxml.jackson.core</groupId>\r\n            <artifactId>jackson-databind</artifactId>\r\n            <version>${jackson.version}</version>\r\n        </dependency>\r\n        <!--jstl标签类-->\r\n        <dependency>\r\n            <groupId>jstl</groupId>\r\n            <artifactId>jstl</artifactId>\r\n            <version>1.2</version>\r\n        </dependency>\r\n        <!--Servlet-->\r\n        <dependency>\r\n            <groupId>javax.servlet</groupId>\r\n            <artifactId>servlet-api</artifactId>\r\n            <version>2.5</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>javax.servlet.jsp</groupId>\r\n            <artifactId>jsp-api</artifactId>\r\n            <version>2.1</version>\r\n        </dependency>\r\n        <!--上传组件包start-->\r\n        <dependency>\r\n            <groupId>commons-fileupload</groupId>\r\n            <artifactId>commons-fileupload</artifactId>\r\n            <version>1.3.1</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>commons-io</groupId>\r\n            <artifactId>commons-io</artifactId>\r\n            <version>2.4</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>commons-codec</groupId>\r\n            <artifactId>commons-codec</artifactId>\r\n            <version>1.10</version>\r\n        </dependency>\r\n        <!--上传组件包end-->\r\n        <!--logstart-->\r\n        <dependency>\r\n            <groupId>log4j</groupId>\r\n            <artifactId>log4j</artifactId>\r\n            <version>${log4j.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.slf4j</groupId>\r\n            <artifactId>slf4j-api</artifactId>\r\n            <version>${slf4j.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.slf4j</groupId>\r\n            <artifactId>slf4j-log4j12</artifactId>\r\n            <version>${slf4j.version}</version>\r\n        </dependency>\r\n        <!--logEND-->\r\n        <!--Junit单元测试-->\r\n        <dependency>\r\n            <groupId>junit</groupId>\r\n            <artifactId>junit</artifactId>\r\n            <version>3.8.1</version>\r\n            <scope>test</scope>\r\n        </dependency>\r\n    </dependencies>\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.apache.maven.plugins</groupId>\r\n                <artifactId>maven-compiler-plugin</artifactId>\r\n                <configuration>\r\n                    <source>1.8</source>\r\n                    <target>1.8</target>\r\n                </configuration>\r\n            </plugin>\r\n        </plugins>\r\n        <finalName>demossm</finalName>\r\n    </build>\r\n</project>\r\n \r\njdbc.properties\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\ndriverClassName=com.mysql.jdbc.Driver\r\nurl=jdbc:mysql://localhost:3306/cpanydb\r\nusername=cpany\r\npassword=cpany\r\n#定义初始连接数\r\ninitialSize=1\r\n#定义最大连接数\r\nmaxActive=20\r\n#定义最大空闲\r\nmaxIdle=20\r\n#定义最小空闲\r\nminIdle=1\r\n#定义最长等待时间\r\nmaxWait=60000\r\n log4j.properties\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n#定义LOG输出级别\r\nlog4j.rootLogger=DEBUG,Console\r\n#定义日志输出目的地为控制台\r\nlog4j.appender.Console=org.apache.log4j.ConsoleAppender\r\nlog4j.appender.Console.Target=System.out\r\nlog4j.appender.Console.layout=org.apache.log4j.PatternLayout\r\nlog4j.appender.Console.layout.ConversionPattern=%d[%t]%-5p[%c]-%m%n\r\n#文件大小到达指定尺寸的时候产生一个新的文件\r\nlog4j.appender.File=org.apache.log4j.RollingFileAppender\r\n#指定输出目录\r\nlog4j.appender.File.File=C:/logs/demossm.log\r\n#定义文件最大大小\r\nlog4j.appender.File.MaxFileSize=10MB\r\n#输出所以日志，如果换成DEBUG表示输出DEBUG以上级别日志\r\nlog4j.appender.File.Threshold=ALL\r\nlog4j.appender.File.layout=org.apache.log4j.PatternLayout\r\nlog4j.appender.File.layout.ConversionPattern=[%p][%d{yyyy-MM-ddHH\\:mm\\:ss}][%c]%m%n\r\nlog4j.logger.java.sql.ResultSet=INFO\r\nlog4j.logger.org.apache=INFO\r\nlog4j.logger.java.sql.Connection=DEBUG\r\nlog4j.logger.java.sql.Statement=DEBUG\r\nlog4j.logger.java.sql.PreparedStatement=DEBUG\r\n mybatis-config.xml\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<!DOCTYPEconfiguration\r\nPUBLIC\"-//mybatis.org//DTDConfig3.0//EN\"\r\n\"http://mybatis.org/dtd/mybatis-3-config.dtd\">\r\n<configuration>\r\n<!--设置别名-->\r\n<typeAliases>\r\n<packagename=\"com.ssm.domain\"/>\r\n</typeAliases>\r\n</configuration>\r\nspring-mvc.xml\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<beansxmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xmlns:context=\"http://www.springframework.org/schema/context\"\r\n    xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\r\n    xsi:schemaLocation=\"\r\nhttp://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsd\r\nhttp://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context.xsd\r\nhttp://www.springframework.org/schema/mvchttp://www.springframework.org/schema/mvc/spring-mvc.xsd\">\r\n    <!--启动自动扫描-->\r\n    <context:component-scanbase-package=\"com.ssm.*\"/>\r\n    <!--注册MVC注解驱动-->\r\n    <mvc:annotation-driven>\r\n        <!--避免IE执行AJAX时,返回JSON出现下载文件-->\r\n        <mvc:message-converters>\r\n            <bean\r\n                class=\"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter\">\r\n                <propertyname=\"supportedMediaTypes\">\r\n                    <list>\r\n                        <value>text/html;charset=UTF-8</value>\r\n                        <value>text/json;charset=UTF-8</value>\r\n                        <value>application/json;charset=UTF-8</value>\r\n                    </list>\r\n                </property>\r\n            </bean>\r\n        </mvc:message-converters>\r\n    </mvc:annotation-driven>\r\n    <!--静态资源可访问的设置方式-->\r\n    <mvc:default-servlet-handler/>\r\n    <!--配置视图解析器，可以显式设置，也可以不设置，不设置会依据SpringMVC的默认设置-->\r\n    <beanid=\"viewResolver\"\r\n        class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\r\n        <propertyname=\"prefix\"value=\"/WEB-INF/views/\"/>\r\n        <propertyname=\"suffix\"value=\".jsp\"/>\r\n    </bean>\r\n</beans>\r\nspring-mybatis.xml\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<beansxmlns=\"http://www.springframework.org/schema/beans\"\r\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\nxsi:schemaLocation=\"\r\nhttp://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n<beanid=\"propertyConfigurer\"\r\nclass=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\r\n<propertyname=\"location\"value=\"classpath:jdbc.properties\"/>\r\n</bean>\r\n<!--定义数据源Bean-->\r\n<!--Druid-->\r\n<beanid=\"dataSource\"\r\nclass=\"com.alibaba.druid.pool.DruidDataSource\">\r\n<propertyname=\"driverClassName\"value=\"${driverClassName}\"/>\r\n<propertyname=\"url\"value=\"${url}\"/>\r\n<propertyname=\"username\"value=\"${username}\"/>\r\n<propertyname=\"password\"value=\"${password}\"/>\r\n<!--配置初始化大小、最小、最大连接数-->\r\n<propertyname=\"initialSize\"value=\"${initialSize}\"/>\r\n<propertyname=\"minIdle\"value=\"${minIdle}\"/>\r\n<propertyname=\"maxIdle\"value=\"${maxIdle}\"/>\r\n<propertyname=\"maxActive\"value=\"${maxActive}\"/>\r\n<!--配置获取连接等待超时的时间-->\r\n<propertyname=\"maxWait\"value=\"${maxWait}\"/>\r\n</bean>\r\n<!--注册SqlSessionFactoryBean-->\r\n<beanid=\"sqlSessionFactory\"\r\nclass=\"org.mybatis.spring.SqlSessionFactoryBean\">\r\n<propertyname=\"dataSource\"ref=\"dataSource\"/>\r\n<!--自动扫描mappers.xml文件-->\r\n<propertyname=\"mapperLocations\"\r\nvalue=\"classpath:mappers/*.xml\"/>\r\n<propertyname=\"configLocation\"\r\nvalue=\"classpath:mybatis-config.xml\"></property>\r\n</bean>\r\n<!--DAO接口所在包名，Spring会自动查找其下的类-->\r\n<beanclass=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\r\n<propertyname=\"basePackage\"value=\"com.ssm.dao\"/>\r\n<propertyname=\"sqlSessionFactoryBeanName\"\r\nvalue=\"sqlSessionFactory\"/>\r\n</bean>\r\n</beans>\r\nspring-tx.xml\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<beansxmlns=\"http://www.springframework.org/schema/beans\"\r\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\nxmlns:context=\"http://www.springframework.org/schema/context\"\r\nxmlns:aop=\"http://www.springframework.org/schema/aop\"\r\nxmlns:tx=\"http://www.springframework.org/schema/tx\"\r\nxsi:schemaLocation=\"\r\nhttp://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsd\r\nhttp://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context.xsd\r\nhttp://www.springframework.org/schema/aophttp://www.springframework.org/schema/aop/spring-aop.xsd\r\nhttp://www.springframework.org/schema/txhttp://www.springframework.org/schema/tx/spring-tx.xsd\">\r\n<!--开启AOP注解扫描-->\r\n<aop:aspectj-autoproxyproxy-target-class=\"true\"/>\r\n<!--事务管理器，依赖于数据源-->\r\n<beanid=\"txManager\"class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n<propertyname=\"dataSource\"ref=\"dataSource\"/>\r\n</bean>\r\n<!--编写通知：对事务进行增强（通知），需要编写对切入点和具体执行事务细节-->\r\n<tx:adviceid=\"txAdvice\"transaction-manager=\"txManager\">\r\n<tx:attributes>\r\n<!--\r\n为切入点方法添加事务详情\r\nname：方法名，*表示任意方法名称\r\npropagation：设置传播行为\r\nisolation：设置隔离级别\r\nread-only：是否只读\r\n-->\r\n<tx:methodname=\"add*\"propagation=\"REQUIRED\"isolation=\"DEFAULT\"read-only=\"false\"rollback-for=\"Exception\"/>\r\n<tx:methodname=\"delete*\"propagation=\"REQUIRED\"isolation=\"DEFAULT\"read-only=\"false\"rollback-for=\"Exception\"/>\r\n<tx:methodname=\"update*\"propagation=\"REQUIRED\"isolation=\"DEFAULT\"read-only=\"false\"rollback-for=\"Exception\"/>\r\n</tx:attributes>\r\n</tx:advice>\r\n<!--设置AOP，让Spring自动对目标生成代理，需要使用AspectJ表达式-->\r\n<aop:configproxy-target-class=\"true\">\r\n<!--切面：整合切入点和通知-->\r\n<aop:advisoradvice-ref=\"txAdvice\"pointcut=\"within(com.ssm.controller.*)\"/>\r\n</aop:config>\r\n</beans>\r\n8.配置web.xml文件\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n50\r\n51\r\n52\r\n53\r\n54\r\n55\r\n56\r\n57\r\n58\r\n59\r\n60\r\n61\r\n62\r\n63\r\n64\r\n65\r\n66\r\n67\r\n68\r\n69\r\n70\r\n71\r\n72\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<-appxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xmlns=\"http://java.sun.com/xml/ns/javaee\"\r\n    xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaeehttp://java.sun.com/xml/ns/javaee/-app_3_0.xsd\"\r\n    version=\"3.0\">\r\n    <display-name>ArchetypeCreatedApplication</display-name>\r\n    <welcome-file-list>\r\n        <welcome-file>/index.jsp</welcome-file>\r\n    </welcome-file-list>\r\n    <!--加载springbean-->\r\n    <context-param>\r\n        <param-name>contextConfigLocation</param-name>\r\n        <param-value>classpath:applicationContext.xml</param-value>\r\n    </context-param>\r\n    <listener>\r\n        <listener-class>org.springframework..context.ContextLoaderListener</listener-class>\r\n    </listener>\r\n    <!--编码过滤器-->\r\n    <filter>\r\n        <filter-name>encodingFilter</filter-name>\r\n        <filter-class>org.springframework..filter.CharacterEncodingFilter</filter-class>\r\n        <init-param>\r\n            <param-name>encoding</param-name>\r\n            <param-value>UTF-8</param-value>\r\n        </init-param>\r\n    </filter>\r\n    <filter-mapping>\r\n        <filter-name>encodingFilter</filter-name>\r\n        <url-pattern>/*</url-pattern>\r\n    </filter-mapping>\r\n    <!--日志记录-->\r\n    <context-param>\r\n        <!--日志配置文件路径-->\r\n        <param-name>log4jConfigLocation</param-name>\r\n        <param-value>classpath:log4j.properties</param-value>\r\n    </context-param>\r\n    <context-param>\r\n        <!--日志页面的刷新间隔-->\r\n        <param-name>log4jRefreshInterval</param-name>\r\n        <param-value>6000</param-value>\r\n    </context-param>\r\n    <listener>\r\n        <listener-class>org.springframework..util.Log4jConfigListener</listener-class>\r\n    </listener>\r\n    <!--SpringMVCservlet-->\r\n    <servlet>\r\n        <servlet-name>SpringMVC</servlet-name>\r\n        <servlet-class>org.springframework..servlet.DispatcherServlet</servlet-class>\r\n        <init-param>\r\n            <param-name>contextConfigLocation</param-name>\r\n            <param-value>classpath:spring-mvc.xml</param-value>\r\n        </init-param>\r\n        <load-on-startup>1</load-on-startup>\r\n    </servlet>\r\n    <servlet-mapping>\r\n        <servlet-name>SpringMVC</servlet-name>\r\n        <url-pattern>/</url-pattern>\r\n    </servlet-mapping>\r\n    \r\n<servlet-mapping>\r\n<servlet-name>default</servlet-name>\r\n<url-pattern>*.js</url-pattern>\r\n</servlet-mapping>\r\n<servlet-mapping>\r\n<servlet-name>default</servlet-name>\r\n<url-pattern>*.css</url-pattern>\r\n</servlet-mapping>\r\n</-app>\r\n9.添加相关处理类\r\n在src/main/java下分别添加我们的dao包，domain包，service包，还有controller包。包里面添加相应的类，效果图如下：\r\n\r\n \r\nSUser.java\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\npackagecom.ssm.domain;\r\npublicclassSUser{\r\n//成员变量\r\nprivateIntegerid;\r\nprivateStringname;\r\nprivateStringaccount;\r\nprivateStringpassword;\r\n//构造函数\r\npublicSUser(){\r\nsuper();\r\n}\r\npublicSUser(Integerid,Stringname,Stringaccount,Stringpassword){\r\nsuper();\r\nthis.id=id;\r\nthis.name=name;\r\nthis.account=account;\r\nthis.password=password;\r\n}\r\n//成员方法\r\npublicIntegergetId(){\r\nreturnid;\r\n}\r\npublicvoidsetId(Integerid){\r\nthis.id=id;\r\n}\r\npublicStringgetName(){\r\nreturnname;\r\n}\r\npublicvoidsetName(Stringname){\r\nthis.name=name;\r\n}\r\npublicStringgetPassword(){\r\nreturnpassword;\r\n}\r\npublicvoidsetPassword(Stringpassword){\r\nthis.password=password;\r\n}\r\npublicStringgetAccount(){\r\nreturnaccount;\r\n}\r\npublicvoidsetAccount(Stringaccount){\r\nthis.account=account;\r\n}\r\n}\r\nSUserController.java\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n50\r\n51\r\n52\r\n53\r\n54\r\n55\r\n56\r\n57\r\n58\r\n59\r\n60\r\n61\r\n62\r\n63\r\n64\r\n65\r\n66\r\n67\r\n68\r\n69\r\n70\r\n71\r\n72\r\n73\r\n74\r\n75\r\n76\r\n77\r\n78\r\n79\r\n80\r\n81\r\n82\r\n83\r\n84\r\n85\r\n86\r\n87\r\n88\r\n89\r\n90\r\n91\r\n92\r\n93\r\n94\r\n95\r\n96\r\n97\r\n98\r\n99\r\n100\r\n101\r\n102\r\n103\r\n104\r\n105\r\n106\r\n107\r\n108\r\n109\r\n110\r\n111\r\n112\r\n113\r\n114\r\n115\r\n116\r\n117\r\n118\r\n119\r\n120\r\n121\r\n122\r\n123\r\n124\r\n125\r\n126\r\n127\r\n128\r\n129\r\n130\r\n131\r\n132\r\n133\r\n134\r\n135\r\n136\r\n137\r\n138\r\n139\r\n140\r\n141\r\n142\r\n143\r\n144\r\n145\r\n146\r\n147\r\n148\r\n149\r\n150\r\n151\r\n152\r\n153\r\n154\r\n155\r\n156\r\n157\r\n158\r\n159\r\n160\r\n161\r\n162\r\n163\r\n164\r\n165\r\n166\r\n167\r\npackagecom.ssm.controller;\r\nimportjava.util.List;\r\nimportjavax.annotation.Resource;\r\nimportjavax.servlet.http.HttpServletRequest;\r\nimportorg.springframework.stereotype.Controller;\r\nimportorg.springframework.ui.Model;\r\nimportorg.springframework.web.bind.annotation.RequestMapping;\r\nimportorg.springframework.web.bind.annotation.ResponseBody;\r\nimportcom.ssm.domain.SUser;\r\nimportcom.ssm.service.SUserService;\r\nimportnet.sf.json.JSONObject;\r\n@Controller\r\n@RequestMapping(\"/suser\")\r\npublicclassSUserController{\r\n    @Resource\r\n    privateSUserServicesUserService;\r\n    /**\r\n    *列表数据\r\n    *\r\n    *@parammodel\r\n    *@return\r\n    */\r\n    @ResponseBody\r\n    @RequestMapping(\"/listSUserData\")\r\n    publicList<SUser>listSUserData(Modelmodel){\r\n        List<SUser>sUserList=sUserService.listSUserData();\r\n        returnsUserList;\r\n    }\r\n    /**\r\n    *新增数据\r\n    *\r\n    *@paramrequest\r\n    *@paramsUser\r\n    *@return\r\n    */\r\n    @RequestMapping(\"/addSUserData\")\r\n    @ResponseBody\r\n    publicJSONObjectaddSUserData(HttpServletRequestrequest,SUsersUser){\r\n        JSONObjectjsonObject=newJSONObject();\r\n        try{\r\n            sUserService.addSUserData(sUser);\r\n            jsonObject.put(\"flag\",\"success\");\r\n            jsonObject.put(\"msg\",\"成功\");\r\n        }catch(Exceptione){\r\n            jsonObject.put(\"flag\",\"failed\");\r\n            jsonObject.put(\"msg\",\"失败\");\r\n        }\r\n        returnjsonObject;\r\n    }\r\n    /**\r\n    *修改数据\r\n    *\r\n    *@paramrequest\r\n    *@paramsUser\r\n    *@return\r\n    */\r\n    @RequestMapping(\"/modifySUserData\")\r\n    @ResponseBody\r\n    publicJSONObjectmodifySUserData(HttpServletRequestrequest,SUsersUser){\r\n        JSONObjectjsonObject=newJSONObject();\r\n        try{\r\n            sUserService.modifySUserData(sUser);\r\n            jsonObject.put(\"flag\",\"success\");\r\n            jsonObject.put(\"msg\",\"成功\");\r\n        }catch(Exceptione){\r\n            jsonObject.put(\"flag\",\"failed\");\r\n            jsonObject.put(\"msg\",\"失败\");\r\n        }\r\n        returnjsonObject;\r\n    }\r\n    /**\r\n    *获取数据\r\n    *\r\n    *@paramrequest\r\n    *@parammodel\r\n    *@return\r\n    */\r\n    @ResponseBody\r\n    @RequestMapping(\"/getSUserData\")\r\n    publicSUsergetSUserData(HttpServletRequestrequest,Modelmodel){\r\n        SUsersUser=null;\r\n        Stringparam=request.getParameter(\"id\");\r\n        sUser=sUserService.getSUserData(param);\r\n        returnsUser;\r\n    }\r\n    /**\r\n    *删除数据\r\n    *\r\n    *@paramrequest\r\n    *@paramsUser\r\n    *@return\r\n    */\r\n    @RequestMapping(\"/deleteSUserData\")\r\n    @ResponseBody\r\n    publicJSONObjectdeleteSUserData(HttpServletRequestrequest,SUsersUser){\r\n        JSONObjectjsonObject=newJSONObject();\r\n        try{\r\n            sUserService.deleteSUserData(sUser);\r\n            jsonObject.put(\"flag\",\"success\");\r\n            jsonObject.put(\"msg\",\"成功\");\r\n        }catch(Exceptione){\r\n            jsonObject.put(\"flag\",\"failed\");\r\n            jsonObject.put(\"msg\",\"失败\");\r\n        }\r\n        returnjsonObject;\r\n    }\r\n    /**\r\n    *列表页面\r\n    *\r\n    *@return\r\n    */\r\n    @RequestMapping(\"/getSUserListPage\")\r\n    publicStringgetSUserListPage(){\r\n        return\"suser/listSUser\";\r\n    }\r\n    /**\r\n    *新增页面\r\n    *\r\n    *@return\r\n    */\r\n    @RequestMapping(\"/getSUserAddPage\")\r\n    publicStringgetSUserAddPage(){\r\n        return\"suser/addSUser\";\r\n    }\r\n    /**\r\n    *修改页面\r\n    *\r\n    *@paramrequest\r\n    *@parammodel\r\n    *@return\r\n    */\r\n    @RequestMapping(\"/getSUserModifyPage\")\r\n    publicStringgetSUserModifyPage(HttpServletRequestrequest,Modelmodel){\r\n        Stringparam=request.getParameter(\"id\");\r\n        model.addAttribute(\"param\",param);\r\n        return\"suser/modifySUser\";\r\n    }\r\n    /**\r\n    *查看页面\r\n    *\r\n    *@paramrequest\r\n    *@parammodel\r\n    *@return\r\n    */\r\n    @RequestMapping(\"/getSUserDetailPage\")\r\n    publicStringgetSUserDetailPage(HttpServletRequestrequest,Modelmodel){\r\n        Stringparam=request.getParameter(\"id\");\r\n        model.addAttribute(\"param\",param);\r\n        return\"suser/detailSUser\";\r\n    }\r\n}\r\nSUserService.java\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\npackagecom.ssm.service;\r\nimportjava.util.List;\r\nimportcom.ssm.domain.SUser;\r\npublicinterfaceSUserService{\r\n    publicvoidaddSUserData(SUsersUser);\r\n    publicvoidmodifySUserData(SUsersUser);\r\n    publicvoiddeleteSUserData(SUsersUser);\r\n    publicSUsergetSUserData(Stringid);\r\n    publicList<SUser>listSUserData();\r\n}\r\nSUserServiceImpl.java\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\npackagecom.ssm.service.impl;\r\nimportjava.util.List;\r\nimportjavax.annotation.Resource;\r\nimportorg.springframework.stereotype.Service;\r\nimportcom.ssm.dao.SUserDao;\r\nimportcom.ssm.domain.SUser;\r\nimportcom.ssm.service.SUserService;\r\n@Service(\"sUserService\")\r\npublicclassSUserServiceImplimplementsSUserService{\r\n    @Resource\r\n    privateSUserDaosUserDao;\r\n    @Override\r\n    publicvoidaddSUserData(SUsersUser){\r\n        sUserDao.addSUser(sUser);\r\n    }\r\n    @Override\r\n    publicvoidmodifySUserData(SUsersUser){\r\n        sUserDao.modifySUser(sUser);\r\n    }\r\n    @Override\r\n    publicSUsergetSUserData(Stringid){\r\n        returnsUserDao.detailSUser(id);\r\n    }\r\n    @Override\r\n    publicvoiddeleteSUserData(SUsersUser){\r\n        sUserDao.deleteSUser(sUser);\r\n    }\r\n    @Override\r\n    publicList<SUser>listSUserData(){\r\n        returnsUserDao.listSUser();\r\n    }\r\n}\r\nSUserDao.java\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\npackagecom.ssm.dao;\r\nimportjava.util.List;\r\nimportcom.ssm.domain.SUser;\r\npublicinterfaceSUserDao{\r\n    publicvoidaddSUser(SUsersUser);\r\n    publicvoidmodifySUser(SUsersUser);\r\n    publicvoiddeleteSUser(SUsersUser);\r\n    publicSUserdetailSUser(Stringid);\r\n    publicList<SUser>listSUser();\r\n}\r\n \r\n在resources下添加映射文件\r\n \r\n\r\nSUserMapper.xml\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n50\r\n51\r\n52\r\n53\r\n54\r\n55\r\n56\r\n57\r\n58\r\n59\r\n60\r\n61\r\n62\r\n63\r\n64\r\n65\r\n66\r\n67\r\n68\r\n69\r\n70\r\n71\r\n72\r\n73\r\n74\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<!DOCTYPEmapperPUBLIC\"-//mybatis.org//DTDMapper3.0//EN\"\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\r\n<mappernamespace=\"com.ssm.dao.SUserDao\">\r\n    <resultMapid=\"BaseResultMap\"type=\"com.ssm.domain.SUser\">\r\n        <resultcolumn=\"id\"property=\"id\"jdbcType=\"INTEGER\"/>\r\n        <resultcolumn=\"name\"property=\"name\"jdbcType=\"VARCHAR\"/>\r\n        <resultcolumn=\"account\"property=\"account\"jdbcType=\"VARCHAR\"/>\r\n        <resultcolumn=\"password\"property=\"password\"\r\n            jdbcType=\"VARCHAR\"/>\r\n    </resultMap>\r\n    <sqlid=\"Base_Column_List\">\r\n        id,name,account,password\r\n    </sql>\r\n    <!--查询所有用户-->\r\n    <selectid=\"listSUser\"resultMap=\"BaseResultMap\">\r\n        select\r\n        <includerefid=\"Base_Column_List\"/>\r\n        froms_user\r\n    </select>\r\n    <selectid=\"detailSUser\"resultMap=\"BaseResultMap\">\r\n        select\r\n        <includerefid=\"Base_Column_List\"/>\r\n        froms_userwhereid=#{id}\r\n    </select>\r\n    <updateid=\"modifySUser\">\r\n        updates_userset\r\n        name=#{name},\r\n        account=#{account},\r\n        password=#{password}\r\n        where\r\n        id=#{id,jdbcType=INTEGER}\r\n    </update>\r\n    <deleteid=\"deleteSUser\">\r\n        deletefroms_userwhereid=#{id,jdbcType=INTEGER}\r\n    </delete>\r\n    <!--插入-->\r\n    <insertid=\"addSUser\">\r\n        insertintos_user\r\n        <trimprefix=\"(\"suffix=\")\"suffixOverrides=\",\">\r\n            <iftest=\"id!=null\">\r\n                id,\r\n            </if>\r\n            <iftest=\"name!=null\">\r\n                name,\r\n            </if>\r\n            <iftest=\"account!=null\">\r\n                account,\r\n            </if>\r\n            <iftest=\"password!=null\">\r\n                password,\r\n            </if>\r\n        </trim>\r\n        <trimprefix=\"values(\"suffix=\")\"suffixOverrides=\",\">\r\n            <iftest=\"id!=null\">\r\n                #{id,jdbcType=INTEGER},\r\n            </if>\r\n            <iftest=\"name!=null\">\r\n                #{name,jdbcType=VARCHAR},\r\n            </if>\r\n            <iftest=\"account!=null\">\r\n                #{account,jdbcType=VARCHAR},\r\n            </if>\r\n            <iftest=\"password!=null\">\r\n                #{password,jdbcType=VARCHAR},\r\n            </if>\r\n        </trim>\r\n    </insert>\r\n</mapper>\r\n10.添加相关前台页面\r\nwebapp目录下添加如下信息：\r\n\r\naddSUser.jsp\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n50\r\n51\r\n52\r\n53\r\n54\r\n55\r\n56\r\n57\r\n58\r\n59\r\n60\r\n61\r\n62\r\n63\r\n<%@pagelanguage=\"java\"contentType=\"text/html;charset=UTF-8\"\r\n    pageEncoding=\"UTF-8\"%>\r\n<!DOCTYPEhtmlPUBLIC\"-//W3C//DTDHTML4.01Transitional//EN\"\"http://www.w3.org/TR/html4/loose.dtd\">\r\n<html>\r\n<head>\r\n<metahttp-equiv=\"Content-Type\"content=\"text/html;charset=UTF-8\">\r\n<title>新增页面</title>\r\n<jsp:includepage=\"/includeUI.jsp\"></jsp:include>\r\n</head>\r\n<body>\r\n    <divclass=\"easyui-panel\"title=\"新增\"style=\"width:300px;\">\r\n        <formid=\"ff\"method=\"post\">\r\n            <tablecellpadding=\"5\">\r\n                <tr>\r\n                    <td>id</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"id\"name=\"id\"data-options=\"required:true\"></input></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>name</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"name\"name=\"name\"></input></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>account</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"account\"name=\"account\"></input></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>password</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"password\"name=\"password\"></input></td>\r\n                </tr>\r\n            </table>\r\n            <divalign=\"center\">\r\n                <aclass=\"easyui-linkbutton\"data-options=\"iconCls:\'icon-ok\'\"onclick=\"submit()\">确定</a>\r\n                <aclass=\"easyui-linkbutton\"data-options=\"iconCls:\'icon-cancel\'\"onclick=\"reset()\">重置</a>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</body>\r\n<scripttype=\"text/javascript\">\r\nfunctionsubmit(){\r\n    $(\'#ff\').form(\'submit\',{\r\n        url:\'addSUserData\',\r\n        dataType:\'json\',\r\n        onSubmit:function(){\r\n            //dosomecheck\r\n            //returnfalsetopreventsubmit;\r\n        },\r\n        success:function(data){\r\n            responseText=JSON.parse(data);\r\n            if(responseText.flag==\'success\'){\r\n                $.messager.alert(\'提示\',responseText.msg,\'info\');\r\n                window.opener.location.href=window.opener.location.href;\r\n                window.close();\r\n            }else{\r\n                $.messager.alert(\'错误\',responseText.msg,\'error\');\r\n            }\r\n        }\r\n    });\r\n}\r\nfunctionreset(){\r\n    $(\'#ff\').form(\'clear\');\r\n}\r\n</script>\r\n</html>\r\ndetailSUser.jsp\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n<%@pagelanguage=\"java\"contentType=\"text/html;charset=UTF-8\"\r\npageEncoding=\"UTF-8\"%>\r\n<!DOCTYPEhtmlPUBLIC\"-//W3C//DTDHTML4.01Transitional//EN\"\"http://www.w3.org/TR/html4/loose.dtd\">\r\n<html>\r\n<head>\r\n<metahttp-equiv=\"Content-Type\"content=\"text/html;charset=UTF-8\">\r\n<title>查看页面</title>\r\n<jsp:includepage=\"/includeUI.jsp\"></jsp:include>\r\n</head>\r\n<body>\r\n    <divclass=\"easyui-panel\"title=\"查看\"style=\"width:300px;\">\r\n        <formid=\"ff\"method=\"post\">\r\n            <tablecellpadding=\"5\">\r\n                <tr>\r\n                    <td>id</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"id\"name=\"id\"disabled=\"disabled\"data-options=\"required:true\"></input></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>name</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"name\"name=\"name\"disabled=\"disabled\"></input></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>account</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"account\"name=\"account\"disabled=\"disabled\"></input></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>password</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"password\"name=\"password\"disabled=\"disabled\"></input></td>\r\n                </tr>\r\n            </table>\r\n            <divalign=\"center\">\r\n                <aclass=\"easyui-linkbutton\"data-options=\"iconCls:\'icon-cancel\'\"onclick=\"close()\">关闭</a>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</body>\r\n<scripttype=\"text/javascript\">\r\n$(function(){\r\n    varparam=\'${param.id}\';\r\n    varurl=\'getSUserData?id=\'+param;\r\n    $(\'#ff\').form(\'load\',url);\r\n});\r\nfunctionclose(){\r\n    window.close();\r\n}\r\n</script>\r\n</html>\r\nmodifySUser.jsp\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n50\r\n51\r\n52\r\n53\r\n54\r\n55\r\n56\r\n57\r\n58\r\n59\r\n60\r\n61\r\n62\r\n63\r\n64\r\n65\r\n66\r\n67\r\n68\r\n69\r\n<%@pagelanguage=\"java\"contentType=\"text/html;charset=UTF-8\"\r\npageEncoding=\"UTF-8\"%>\r\n<!DOCTYPEhtmlPUBLIC\"-//W3C//DTDHTML4.01Transitional//EN\"\"http://www.w3.org/TR/html4/loose.dtd\">\r\n<html>\r\n<head>\r\n<metahttp-equiv=\"Content-Type\"content=\"text/html;charset=UTF-8\">\r\n<title>修改页面</title>\r\n<jsp:includepage=\"/includeUI.jsp\"></jsp:include>\r\n</head>\r\n<body>\r\n    <divclass=\"easyui-panel\"title=\"修改\"style=\"width:300px;\">\r\n        <formid=\"ff\"method=\"post\">\r\n            <tablecellpadding=\"5\">\r\n                <tr>\r\n                    <td>id</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"id\"name=\"id\"readonly=\"readonly\"data-options=\"required:true\"></input></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>name</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"name\"name=\"name\"></input></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>account</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"account\"name=\"account\"></input></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>password</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"password\"name=\"password\"></input></td>\r\n                </tr>\r\n            </table>\r\n            <divalign=\"center\">\r\n                <aclass=\"easyui-linkbutton\"data-options=\"iconCls:\'icon-ok\'\"onclick=\"submit()\">确定</a>\r\n                <aclass=\"easyui-linkbutton\"data-options=\"iconCls:\'icon-cancel\'\"onclick=\"cancel()\">取消</a>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</body>\r\n<scripttype=\"text/javascript\">\r\n$(function(){\r\n    varparam=\'${param.id}\';\r\n    varurl=\'getSUserData?id=\'+param;\r\n    $(\'#ff\').form(\'load\',url);\r\n});\r\nfunctionsubmit(){\r\n    $(\'#ff\').form(\'submit\',{\r\n        url:\'modifySUserData\',\r\n        dataType:\'json\',\r\n        onSubmit:function(){\r\n            //dosomecheck\r\n            //returnfalsetopreventsubmit;\r\n        },\r\n        success:function(data){\r\n            responseText=JSON.parse(data);\r\n            if(responseText.flag==\'success\'){\r\n                $.messager.alert(\'提示\',responseText.msg,\'info\');\r\n                window.opener.location.href=window.opener.location.href;\r\n                window.close();\r\n            }else{\r\n                $.messager.alert(\'错误\',responseText.msg,\'error\');\r\n            }\r\n        }\r\n    });\r\n}\r\nfunctioncancel(){\r\n    window.close();\r\n}\r\n</script>\r\n</html>\r\nlistSUser.jsp\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n50\r\n51\r\n52\r\n53\r\n54\r\n55\r\n56\r\n57\r\n58\r\n59\r\n60\r\n61\r\n62\r\n63\r\n64\r\n65\r\n66\r\n67\r\n68\r\n69\r\n70\r\n71\r\n72\r\n73\r\n74\r\n75\r\n76\r\n77\r\n78\r\n79\r\n80\r\n81\r\n82\r\n83\r\n84\r\n85\r\n86\r\n87\r\n88\r\n89\r\n90\r\n91\r\n92\r\n93\r\n94\r\n95\r\n96\r\n97\r\n98\r\n99\r\n<%@pagelanguage=\"java\"contentType=\"text/html;charset=UTF-8\"\r\n    pageEncoding=\"UTF-8\"%>\r\n<!DOCTYPEhtmlPUBLIC\"-//W3C//DTDHTML4.01Transitional//EN\"\"http://www.w3.org/TR/html4/loose.dtd\">\r\n<html>\r\n<head>\r\n<metahttp-equiv=\"Content-Type\"content=\"text/html;charset=UTF-8\">\r\n<title>列表页面</title>\r\n<jsp:includepage=\"/includeUI.jsp\"></jsp:include>\r\n</head>\r\n<body>\r\n    <tableid=dgclass=\"easyui-datagrid\"title=\"列表页面\"style=\"width:500px\"\r\n        data-options=\"rownumbers:true,\r\n                    singleSelect:true,\r\n                    method:\'post\',\r\n                    loadMsg:\'数据加载中，请稍等...\',\r\n                    toolbar:toolbar,\r\n                    pagination:true,\r\n                    pageSize:10\">\r\n        <thead>\r\n            <tr>\r\n                <thdata-options=\"field:\'id\',width:100\">ID</th>\r\n                <thdata-options=\"field:\'name\',width:100\">Name</th>\r\n                <thdata-options=\"field:\'account\',width:100,align:\'left\'\">Account</th>\r\n                <thdata-options=\"field:\'password\',width:100,align:\'right\'\">Password</th>\r\n            </tr>\r\n        </thead>\r\n    </table>\r\n</body>\r\n<scripttype=\"text/javascript\">\r\n$(function(){\r\n    //指定url\r\n    $(\'#dg\').datagrid({\r\nurl:\'listSUserData\',\r\n});\r\n//刷新表格\r\n$(\"#dg\").datagrid(\"reload\");\r\n});\r\nvartoolbar=[{\r\n    text:\'新增\',\r\n    iconCls:\'icon-add\',\r\n    handler:function(){\r\n        varurl=\"getSUserAddPage\";\r\n        window.open(url,\"newWindow\");\r\n    }\r\n},{\r\n    text:\'修改\',\r\n    iconCls:\'icon-edit\',\r\n    handler:function(){\r\n        vardata=$(\"#dg\").datagrid(\"getSelected\");\r\n        if(data!=null){\r\n            varurl=\"getSUserModifyPage?id=\"+data.id;\r\n            window.open(url,\"newWindow\");\r\n        }else{\r\n            $.messager.alert(\'提示\',\'请选择一条记录！\',\'info\');\r\n        }\r\n    }\r\n},{\r\n    text:\'删除\',\r\n    iconCls:\'icon-remove\',\r\n    handler:function(){\r\n        vardata=$(\"#dg\").datagrid(\"getSelected\");\r\n        if(data!=null){\r\n            $.messager.confirm(\'提示\',\'确定要删除吗？\',function(r){\r\n                if(r){\r\n                    $.ajax({\r\n                                            type:\"POST\",\r\n                                            url:\"deleteSUserData\",\r\n                                            data:\"id=\"+data.id,\r\n                                            dataType:\"json\",\r\n                                            success:function(data){\r\n                                                    if(data.flag==\"success\"){\r\n                                                        $.messager.alert(\'提示\',data.msg,\'info\');\r\n                                                        $(\"#dg\").datagrid(\'reload\');\r\n                                        }else{\r\n                                            $.messager.alert(\'错误\',data.msg,\'error\');\r\n                                        }\r\n                                            }\r\n                                    });\r\n                }\r\n            });\r\n        }else{\r\n            $.messager.alert(\'提示\',\'请选择一条记录！\',\'info\');\r\n        }\r\n    }\r\n},{\r\n    text:\'查看\',\r\n    iconCls:\'icon-search\',\r\n    handler:function(){\r\n        vardata=$(\"#dg\").datagrid(\"getSelected\");\r\n        if(data!=null){\r\n            varurl=\"getSUserDetailPage?id=\"+data.id;\r\n            window.open(url,\"newWindow\");\r\n        }else{\r\n            $.messager.alert(\'提示\',\'请选择一条记录！\',\'info\');\r\n        }\r\n    }\r\n}];\r\n</script>\r\n</html>\r\n includeUI.jsp为引入easyui样式公共文件\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n<%@pagelanguage=\"java\"contentType=\"text/html;charset=UTF-8\"\r\npageEncoding=\"UTF-8\"%>\r\n<%@tagliburi=\"http://java.sun.com/jsp/jstl/core\"prefix=\"c\"%>\r\n<!DOCTYPEhtmlPUBLIC\"-//W3C//DTDHTML4.01Transitional//EN\"\"http://www.w3.org/TR/html4/loose.dtd\">\r\n<html>\r\n    <head>\r\n        <metahttp-equiv=\"Content-Type\"content=\"text/html;charset=UTF-8\">\r\n        <title>js/css</title>\r\n        <!--以下内容引入为默认easyui样式-->\r\n        <linkrel=\"stylesheet\"type=\"text/css\"href=\"<%=request.getContextPath()%>/jquery-easyui/themes/default/easyui.css\">\r\n        <linkrel=\"stylesheet\"type=\"text/css\"href=\"<%=request.getContextPath()%>/jquery-easyui/themes/icon.css\">\r\n        <scripttype=\"text/JavaScript\"src=\"<%=request.getContextPath()%>/jquery-easyui/jquery.min.js\"></script>\r\n        <scripttype=\"text/javascript\"src=\"<%=request.getContextPath()%>/jquery-easyui/jquery.easyui.min.js\"></script>\r\n        <scripttype=\"text/javascript\"src=\"<%=request.getContextPath()%>/jquery-easyui/locale/easyui-lang-zh_CN.js\"></script>\r\n    </head>\r\n    <body>\r\n    </body>\r\n</html>\r\n11.展示效果\r\n至此，简单的ssm框架整合已经完成，同时添加了基本的操作功能；\r\n列表页面\r\n\r\n新增页面\r\n\r\n修改页面\r\n\r\n查看页面\r\n\r\n删除操作\r\n','#JAVA#/#maven#',5,NULL,1,'yc','2019-03-09',NULL,NULL,'提供两种开发工具\r\nSSM框架项目可以使用Eclipse进行开发为了能简化开发流程，首先需要在Eclipse中安装SpringIDE插件，详细安装步骤请参考：\r\nhttps://blog.csdn.net/zhen_6137/article/details/79383941\r\n或者使用Spring官方提供的STS工具进行开发，下载地址：\r\nhttps://spring.io/tools/sts/legacy',NULL,NULL,NULL,NULL,NULL),(78,'老干部','','','Linux下的定时任务crontab的配置','images/7.jpg','> crontab是linux中的一种定时调度配置管理，我们可以使用crontab来按照自己的需求配置相应的定时任务\r\n\r\n1.查看linux下是否已经安装了crontab以及相关服务\r\n    rpm -qa|grep vixie-cron\r\n    rpm -qa|grep crontabs\r\n其中vixie-cron软件包是cron的主程序。\r\ncrontabs软件包是用来安装、卸装、或列举用来驱动 cron 守护进程的表格的程序。\r\n \r\n如果系统中没有安装这两个软件包，则需要手动安装，执行如下命令：\r\n    yum -y install vixie-cron\r\n    yum -y install crontabs\r\n \r\n2.确认crontab服务是否已经启动\r\n    cron服务对应的后台进程名称为cornd，所以我们需要查看crond进程的状态。\r\n \r\n    查看crontd进程运行状态：service crond status 或者 systemctl status crond.service\r\n    启动crontab服务：service crond start 或者 systemctl start crond.service\r\n    停止crontab服务：service crond stop 或者 systemctl stop crond.service\r\n    重启crontab服务：service crond restart 或者 systemctl restart crond.service\r\n    重新载入crontab配置：service crond reload 或者 systemctl reload crond.service \r\n    （备注：在CentOS 7 以后的版本中建议使用systemctl命令来监控和调用服务）\r\n \r\n3.配置定时任务\r\n    cron有两个配置文件，一个是一个全局配置文件（/etc/crontab），是针对系统任务的；\r\n一组是crontab命令生成的配置文件（/var/spool/cron下的文件），是针对某个用户的.定时任务配置到任意一个中都可以。\r\n \r\n在/etc/crontab中添加定时任务\r\n \r\n普通用户配置定时任务：','',5,NULL,3,'yc','2019-03-09',NULL,NULL,'crontab是linux中的一种定时调度配置管理，我们可以使用crontab来按照自己的需求配置相应的定时任务',NULL,NULL,NULL,NULL,NULL),(79,'老干部','','','VNC CentOS Linux下VNC Server远程桌面配置详解','images/6.jpg','# VNC概述\r\n  VNC (Virtual Network Console)是虚拟网络控制台的缩写。VNC 是一款优秀的远程控制工具软件，由著名的 AT&T 的欧洲研究实验室开发的。VNC 是在基于 UNIX 和 Linux操作系统的免费的开源软件，远程控制能力强大，高效实用，其性能可以和 Windows 或 MAC中的任何远程控制软件媲美。在 Linux 中，VNC 包括以下四个命令：vncserver，vncviewer，vncpasswd，和 vncconnect。大多数情况下只需要其中的两个命令：vncserver 和 vncviewer。目前，原来的AT&T版本已经不再使用，因为更多有重大改善的分支版本已经出现， 像是RealVNC， VNC tight 和UltraVNC。 Real VNC 是当前最活跃和强大的主流应用。\r\n RealVNC官方网址  :  http://www.realvnc.com/\r\n Tight VNC官方网址:  http://www.tightvnc.com/\r\n UltraVNC官方网址 ： http://www.uvnc.com/\r\n#  VNC原理\r\nVNC系统由客户端，服务端和一个协议组成。VNC的服务端目的是分享其所运行机器的屏幕， 服务端被动的允许客户端控制它。 VNC客户端（或Viewer） 观察控制服务端，与服务端交互。 VNC 协议 Protocol (RFB)是一个简单的协议，传送服务端的原始图像到客户端（一个X,Y 位置上的正方形的点阵数据）， 客户端传送事件消息到服务端。\r\n服务器发送小方块的帧缓存给客户端，在最简单的情况，VNC协议使用大量的带宽，因此各种各样的方法被发明出来减少通讯的开支，举例来说，有各种各样的编码方法来决定最有效率的方法来传送这些点阵方块）\r\n协议允许客户端和服务端去协议哪种编码会被使用，最简单的编码，被大多数客户端和服务端所支持的是， 从左到右的像素扫描数据的原始编码， 当原始的满屏被发送后，只发送变化的方块区域。这种编码在幁间只有小部分屏幕变化的情况下工作的非常好（像是鼠标键在桌面移动的情况，或在光标处敲击文字），不过如果大量的像素同时变化带宽将会增加的非常高，像是拖动一个窗口或观看全屏录像。\r\nVNC默认使用TCP端口5900至5906，而JAVA的VNC客户端使用5800至5806。一个服务端可以在5500口用“监听模式”连接一个客户端，使用监听模式的一个好处是服务端不需要设置防火墙。\r\nUNIX上的VNC称为xvnc，同时扮演两种角色，对X窗口系统的应用程序来说它是X server，对于VNC客户端来说它是VNC服务器程序。\r\n# VNC安装配置\r\n安装相应桌面环境与vnc服务端和客户端：\r\n# yum groupinstall \"GNOME Desktop Environment\"（CentOS 5.x安装GNOME桌面环境）\r\n# yum groupinstall \"X Window System\" \"Desktop\"（CentOS 6.x安装GNOME桌面环境）\r\n# yum groupinstall Xfce（CentOS安装Xfce桌面环境，可选）\r\n# yum install vnc-server vnc* （CentOS 5.x里）\r\n# yum install tigervnc-server tigervnc （CentOS 6.x里）\r\n说明：Xfce与KDE，Gnome都是图形桌面环境，其特点是占用资源更小资源占用情况大致为：Gnome>KDE>Xfce。具体情况与版本有关。一般版本越新，资源占用越大。\r\n1.确认VNC是否安装\r\n默认情况下，CentOS Linux安装程序会将VNC服务安装在系统上。\r\n确认是否已经安装VNC服务及查看安装的VNC版本\r\n[root@ localhost ~]# rpm -q vnc-server\r\nvnc-server-4.1.2-9.el5\r\n[root@ localhost ~]#\r\n若系统没有安装,可以到操作系统安装盘的Server目录下找到VNC服务的RPM安装包vnc-server-4.1.2-9.el5.x86_64.rpm，安装命令如下\r\nrpm -ivh /mnt/Server/vnc-server-4.1.2-9.el5.x86_64.rpm\r\n也可以连网直接用yum源安装。\r\n2.启动VNC服务\r\n使用vncserver命令启动VNC服务，命令格式为“vncserver :桌面号”，其中“桌面号”用“数字”的方式表示，每个用户连接需要占用1个桌面\r\n启动编号为1的桌面示例如下\r\n=======================================================================\r\n[root@ localhost ~]# vncserver :1\r\nYou will require a password to access your desktops.\r\nPassword:                                            #要求输入密码\r\nVerify:                                                #验证刚才输入的密码\r\nxauth:  creating new authority file /root/.Xauthority\r\nNew \'testdb:1 (root)\' desktop is testdb:1\r\nCreating default startup script. /root/.vnc/xstartup\r\nStarting applications specified in /root/.vnc/xstartup\r\nLog file is /root/.vnc/testdb:1.log\r\n=======================================================================\r\n命令执行的过程中，是在root用户提示符下执行同时也是第一次执行，会在此用户的主目录（/root/）下生成.vnc子目录和相应的配置文件，同时需要输入密码(vncviewer端用此用户访问的密码)，这个密码被加密保存在此用户主目录下的.vnc子目录（/root/.vnc/passwd）中；同时在用户主目录下的.vnc子目录中为用户自动建立xstartup配置文件（/root/.vnc/xstartup），在每次启动VND服务时，都会读取该文件中的配置信息。上面的是添加root用户通过VNC访问权限，如果想添加其他用户访问权限，需要在相应的用户命令提示符下进行上面的操作（如test用户也需要执行[test@ localhost ~]$ vncserver :1   在相应的主目录下生成对应的.vnc子目录）。对不同用户的访问密码更改也需要在相应的命令提示符下操作。\r\n在/root/.vnc/目录下还有一个“root:1.pid”文件，这个文件记录着启动VNC后对应后天操作系统的进程号，用于停止VNC服务时准确定位进程号.\r\n3.VNC服务使用的端口号与桌面号的关系\r\nVNC服务使用的端口号与桌面号相关，VNC使用TCP端口从5900开始，对应关系如下\r\n桌面号为“1”  ---- 端口号为5901\r\n桌面号为“2”  ---- 端口号为5902\r\n桌面号为“3”  ---- 端口号为5903\r\n……\r\n基于Java的VNC客户程序Web服务TCP端口从5800开始，也是与桌面号相关，对应关系如下\r\n桌面号为“1”  ---- 端口号为5801\r\n桌面号为“2”  ---- 端口号为5802\r\n桌面号为“3”  ---- 端口号为5803\r\n……\r\n基于上面的介绍，如果Linux开启了防火墙功能，就需要手工开启相应的端口，以开启桌面号为“1”相应的端口为例，命令如下\r\n=========================================================================\r\n[root@ localhost ~]# iptables -I INPUT -p tcp --dport 5901 -j ACCEPT\r\n[root@ localhost ~]# iptables -I INPUT -p tcp --dport 5801 -j ACCEPT\r\n==========================================================================\r\n4.测试VNC服务\r\n第一种方法是使用VNC Viewer软件登陆测试，操作流程如下\r\n启动VNC Viewer软件 --> Server输入“192.168.1.100:1” --> 点击“OK” --> Password输入登陆密码 --> 点击“OK”登陆到X-Window图形桌面环境 --> 测试成功\r\n第二种方法是使用Web浏览器（如Firefox,IE,Safari）登陆测试，操作流程如下\r\n地址栏输入192.168.1.100:1:5801/ --> 出现VNC viewer for Java（此工具是使用Java编写的VNC客户端程序）界面，同时跳出VNC viewer对话框，在Server处输入“144.194.192.183:1”点击“OK” --> Password输入登陆密码 --> 点击“OK”登陆到X-Window图形桌面环境 --> 测试成功\r\n（注：VNC viewer for Java需要JRE支持，如果页面无法显示，表示没有安装JRE，可以到http://java.sun.com/javase/downloads/index_jdk5.jsp这里下载最新的JRE进行安装）\r\n5.配置VNC图形桌面环境为KDE或GNOME桌面环境\r\n如果您是按照我的上面方法进行的配置的，登陆到桌面后效果是非常简单的，只有一个Shell可供使用，这是为什么呢？怎么才能看到可爱并且美丽的KDE或GNOME桌面环境呢？回答如下\r\n之所以那么的难看，是因为VNC服务默认使用的是twm图形桌面环境的，可以在VNC的配置文件xstartup中对其进行修改(需要登录的每个用户主目录下的.vnc/xstartup文件都要修改)，先看一下这个配置文件。\r\n==========================================================================\r\n[root@ localhost ~]# vi /root/.vnc/xstartup\r\n#!/bin/sh\r\n# Uncomment the following two lines for normal desktop:\r\n# unset SESSION_MANAGER\r\n# exec /etc/X11/xinit/xinitrc\r\n[ -x /etc/vnc/xstartup ] && exec /etc/vnc/xstartup\r\n[ -r $HOME/.Xresources ] && xrdb $HOME/.Xresources\r\nxsetroot -solid grey\r\nvncconfig -iconic &\r\nxterm -geometry 80x24+10+10 -ls -title \"$VNCDESKTOP Desktop\" &\r\ntwm &\r\n==========================================================================\r\n取消这个xstartup文件中下面两行的注释，就是删除行前面的“#”的符号。\r\n# unset SESSION_MANAGER\r\n# exec /etc/X11/xinit/xinitrc\r\n这个xstartup文件的最后一行twm& 前面加“#” 注释”， 在新建一行添加gnome-session &  ，重新启动vncserver服务后就可以登陆到GNOME桌面环境。\r\n这个xstartup文件的最后一行twm& 前面加“#” 注释”， 在新建一行添加startkde &  ，重新启动vncserver服务后就可以登陆到KDE桌面环境 。                             \r\n重新启动vncserver服务的方法：\r\n==========================================================================[[root@ localhost ~]# vncserver -kill :1\r\n[root@ localhost ~]# vncserver :1\r\n==========================================================================\r\n6.配置多个桌面\r\n可以使用如下的方法启动多个桌面的VNC\r\nvncserver :1\r\nvncserver :2\r\nvncserver :3\r\n……\r\n但是这种手工启动的方法在服务器重新启动之后将失效，因此，下面介绍如何让系统自动管理多个桌面的VNC，方法是将需要自动管理的信息添加到/etc/sysconfig/vncservers配置文件中，先以桌面1为root用户、桌面2为test用户为例进行配置如下：\r\n格式为：VNCSERVERS=\"桌面号:使用的用户名  桌面号:使用的用户名\"   \r\n修改/etc/sysconfig/vncservers文件，未经修改的vncservers文件如下所示：\r\n===========================================================\r\n[root@localhost ~]# more /etc/sysconfig/vncservers\r\n# The VNCSERVERS variable is a list of display:user pairs.\r\n#\r\n# Uncomment the lines below to start a VNC server on display :2\r\n# as my \'myusername\' (adjust this to your own).  You will also\r\n# need to set a VNC password; run \'man vncpasswd\' to see how\r\n# to do that. \r\n#\r\n# DO NOT RUN THIS SERVICE if your local area network is\r\n# untrusted!  For a secure way of using VNC, see\r\n# <URL:http://www.uk.research.att.com/archive/vnc/sshvnc.html>.\r\n# Use \"-nolisten tcp\" to prevent X connections to your VNC server via TCP.\r\n# Use \"-nohttpd\" to prevent web-based VNC clients connecting.\r\n# Use \"-localhost\" to prevent remote VNC clients connecting except when\r\n# doing so through a secure tunnel.  See the \"-via\" option in the\r\n# `man vncviewer\' manual page.\r\n# VNCSERVERS=\"2:myusername\"\r\n# VNCSERVERARGS[2]=\"-geometry 800x600 -nolisten tcp -nohttpd -localhost\"\r\n===========================================================\r\n \r\n将最后两行配置信息取消注释。\r\nVNCSERVERS=\"2:myusername\"\r\n上面这行添加两个用户，可以添加多个用户中间用空格隔开，如下：\r\nVNCSERVERS=\"1：root  2：test\"\r\n VNCSERVERARGS[2]=\"-geometry 800x600 -nolisten tcp -nohttpd -localhost\"\r\n上面这行是每个用户的配置参数，用户和用户参数要一一对应，修个成如下参数：\r\nVNCSERVERARGS[1]=\"-geometry 1024x768 \"\r\nVNCSERVERARGS[2]=\"-geometry 1024x768 \"\r\n关于参数配置说明：\r\n1）、VNCSERVERS 是用来设定可以使用VNC的服务器账号，可以设定多个，这里的“用户名”是指linux系统用户的名称（root用户和普通用户），例如上面root、test，但是中间要用空格隔开。使用VNCVIEWER登录时，192.168.1.100:1表示是以root账号登录，以此类推。\r\n2）、注意前面的数字“1”或是“2”为桌面号，每个用户可以有多个桌面号，但是每个桌面号只能属于一个用户，当你要从其它电脑用VNC访问服务器时，就需要用IP:1这种方法，而不能直接用IP。如假定你的VNC服务器IP是192.168.1.100，那想进入VNC服务器，并以test用户登录时，需要在vncviewer里输入IP的地方输入：192.168.1.100:2 （2对应的就是test用户）,如果是root,那就是192.168.1.100:1 （1对应的就是root用户）；\r\n3）、下面两行[1][2]最好与上面那个相对应，后面的800X600可以换成你电脑支持的分辨率。注意中间的”x”不是“*”，而是小写字母”x”。\r\n4）：-geometry 表示远程桌面分辨率，默认为800x600，根据vncviewer所在电脑的分辨率设置。\r\n5）：-nohttpd  表示不监听HTTP端口（58xx），这个在参数里面去掉不加影响效果。\r\n6）：-nolisten tcp 表示不监听TCP端口（60xx），这个在参数里去掉不加影响效果。\r\n7）：-localhost 只运行从本机访问，这个在参数里去掉不加，加了远程登录不了。\r\n8）：AlwaysShared 默认只允许一个VNCVIEWER连接，此参数表示同一个显示端口允许多用户同时登录.\r\n9）：-depth  表示色深，参数有8,16,24,32. 可以不加。\r\n7）: SecurityTypes None 登录不需要密码认证VncAuth默认值,要密码认证。\r\n7.修改VNC访问的密码\r\n使用命令vncpasswd对不同用户的VNC的密码进行修改，一定要注意，如果配置了不同用户的VNC需要分别到各自用户中进行修改，例如在我的这个实验中，root用户和test用户需要分别修改，修改过程如下：\r\n==========================================================================\r\n[root@ localhost ~]# vncpasswd\r\nPassword:                                                       #输入密码\r\nVerify:                                                           #确认密码\r\n[root@ localhost ~]#\r\n8.启动和停止VNC服务\r\n1）启动VNC服务命令\r\n[root@ localhost ~]# service vncserver start\r\n2）停止VNC服务命令\r\n[root@ localhost ~]# service vncserver stop\r\n3）重新启动VNC服务命令\r\n[root@ localhost ~]# service vncserver restart\r\n\r\n9设置VNC服务随系统启动自动加载\r\n第一种方法：使用“ntsysv”命令启动图形化服务配置程序，在vncserver服务前加上星号，点击确定，配置完成。\r\n第二种方法：使用“chkconfig”在命令行模式下进行操作，命令使用如下（预知chkconfig详细使用方法请自助式man一下）\r\n[root@testdb ~]# chkconfig vncserver on\r\n[root@testdb ~]# chkconfig --list vncserver\r\nvncserver       0:off   1:off   2:on    3:on    4:on    5:on    6:off\r\n10、可能遇到的问题:\r\n1）、黑屏\r\n在Linux里安装配置完VNC服务端，发现多用户登陆会出现黑屏的情况，具体的现象为：\r\n客户端可以通过IP与会话号登陆进入系统，但登陆进去是漆黑一片，除了一个叉形的鼠标以外，伸手不见五指。\r\n原因：用户的VNC的启动文件权限未设置正确。\r\n解决方法：将黑屏用户的xstartup（一般为：/用户目录/.vnc/xstartup）文件的属性修改为755（rwxr-xr-x）。\r\n完后杀掉所有已经启动的VNC客户端：\r\nvncserver -kill :1\r\nvncserver -kill :2 （注意：-kill与:1或:2中间有一空格）\r\n最后重启vncserver服务即可！ # service vncserver restart\r\n注意：vncserver只能由启动它的用户来关闭，即时是root也不能关闭其它用户开启的vncserver，\r\n除非用kill命令暴力杀死进程。\r\n2）、Windown下如何登陆VNC Server\r\na从浏览器登录（浏览器需要安装JAVA支持库，作为java applet来实现，才能登录控制VNC服务器，可以yum install java*安装）\r\n直接从浏览器中输入如下地址：\r\nhttp://xxx.xxx.xxx.xxx:5801\r\nb从VNC客户端登录\r\n在windows上安装vnc客户端，然后输入xxx.xxx.xxx.xxx:x，连接登录。\r\n备注：\r\n输入的格式为IP:桌面号，桌面号要看你自己的配置而定。如192.168.80.128:1\r\n登陆提示connection refused(10061)，则是因为linux防火墙的问题，请检查防火墙设置。\r\n后面的尾缀”:x”也是不能少的，要不然老提示failed to connect : connection refused (10061)\r\n11.小结\r\n  VNC的详细配置方法到此已经写完，都是在网上搜索的加自己的实践。VNC对于远程调用图形化界面来说非常的轻巧和便捷！','',1,NULL,2,'yc','2019-03-09',NULL,NULL,'VNC (Virtual Network Console)是虚拟网络控制台的缩写。VNC 是一款优秀的远程控制工具软件，由著名的 AT&T 的欧洲研究实验室开发的。VNC 是在基于 UNIX 和 Linux操作系统的免费的开源软件，远程控制能力强大，高效实用，其性能可以和 Windows 或 MAC中的任何远程控制软件媲美。在 Linux 中，VNC 包括以下四个命令：vncserver，vncviewer，vncpasswd，和 vncconnect。大多数情况下只需要其中的两个命令：vncserver 和 vncviewer。目前，原来的AT&T版本已经不再使用，因为更多有重大改善的分支版本已经出现， 像是RealVNC， VNC tight 和UltraVNC。 Real VNC 是当前最活跃和强大的主流应用。\r\n RealVNC官方网址  :  http://www.realvnc.com/\r\n Tight VNC官方网址:  http://www.tightvnc.com/\r\n UltraVNC官方网址 ： http://www.uvnc.com/',NULL,NULL,NULL,NULL,NULL),(80,'老干部','','','Linux基础命令','images/1.jpg','Part1:\r\n系统命令存放:/bin或/sbin\r\n#start x 调回xwindows\r\n/etc/inittab\r\n启动级别解释:0-6\r\n0:关机\r\n1:单用户\r\n2:无网络无图形 \r\n3:有网络无图形\r\n4:预留\r\n5:有网络有图形\r\n6:重启\r\n-----------------------------------------------------------\r\nshell:命令解释器，用户通过shell和操作系统的内核之间进行交互,linux命令又分为\r\n内部，与外部俩部分，例如：qq软件不属于linux原有命令。\r\n-----------------------------------------------------------\r\nPart2:\r\n基础捷键：\r\n1.tab ：补齐\r\n2.反斜杠 \\ 强制换行 \r\n3.ctrl+u 清空至行首 \r\n4.ctrl+k 清空至行尾 \r\n5.ctrl+l 清屏 \r\n6.ctrl+c 取消本次命令编辑终断\r\n扩展：windows帮助执行：cmd输入 dir /? \r\n----------------------------------------------------\r\nPart3:基础命令\r\n一.目录操作命令\r\n1.pwd:打印显示当前路径\r\n2.cd:切换工作目录\r\n\r\n#cd ~ 表示返回主目录\r\n绝对路径与相对路径:\r\n绝对路径：直观从根开始执行 ：#cd /root/Desktop\r\n相对路径：从当下开始执行 #cd . 或 cd .. 当前目录 ，上级目录 的切换\r\n--------------------------------------------------------------------\r\n3.ls:显示目录内容\r\n\r\n-a 显示所有子目录和文件信息包括隐藏文件\r\n-l 以长格式显示 \r\n-R 递归显示内容\r\n-i 查看文件的节点数\r\n-d 显示目录本身属性（只显示目录不关心内容）\r\n--color 以颜色区别不同类型文件 \r\n例如：ls -l /usr表示以长格式显示/usr下的文件信息\r\n4.mkdir:创建目录\r\n#mkdir -p /haha/xixi/qq 递归一次创建多个目录\r\n5.du:统计目录及文件空间占用情况\r\n-a 默认-a \r\n-s 只统计每个参数占用空间大小\r\n-h 以更为易懂的字节单位(K,M 等)\r\n二.文件操作命令\r\n6.touch:创建空文件 \r\ntouch test.txt表示在当前目录下创建test.txt \r\ntouch /usr/test.txt表示在usr目录下创建test.txt\r\n7.cp:复制 格式:#cp 源 目标 \r\n例：cp /usr/test.txt /usr/test2.txt /home表示将usr下面的test.txt和test2.txt拷贝到home目录下\r\n例：cp -R /usr /home 其中R表示复制目录 表示就爱了个usr目录拷贝到home下\r\n-R 递归复制整个目录树\r\n-p 保持原文件属性不变（时间，作者...）\r\n-f 强制覆盖目标同名文件或目录\r\n-i 需要覆盖文件或目录时进行提醒\r\n---------------------------------------\r\n8.rm -rf:强制删除不提示 \r\nrm file1 删除file1 \r\nrm -r dir1 删除目录dir1（一般使用rm -rf dir1 强制删除所有文件，避免询问是否删除）\r\n9.mv:移除 \"在同目录下修改文件名\"\r\n例：mv test.txt test2.txt表示将test.txt改名为test2.txt\r\n例：mv test.txt /home表示将test.txt剪切到/home下 \r\n10.which:查找系统命令位置\r\n11.find:查找文件或目录 格式#find / -name qq\r\n-name:按文件名称查找\r\n-size:按文件大小查找\r\n-user:按文件属主查找\r\n-type:按文件类型查找\r\n12.ln -s :软链接 格式：#ln -s /etc/passwd /home\r\n-----------------------------------------------------\r\n三.文件内容操作命令\r\n13.cat 显示文件全部内容\r\n14.more 逐屏显示文件内容\r\n15.less 与more命令相同 格式：#cat /etc/passwd |more或less\r\n16.head -数字 查看显示默认前10行 格式：#head /etc/passwd\r\n17.tail -数字 查看显示默认后10行 格式：#tail /etc/passwd \r\ntail -F 监控 执行不退出多用于监视日志\r\n18.wc:统计文件中单词数量 格式：#wc -l /etc/passd\r\n-l:统计行数\r\n-w:统计单词个数\r\n-c:统计字节数 \r\n----------------------\r\n19.grep:过滤 格式：#grep ^root /etc/passwd \r\n-i：查找忽略大小写\r\n-v：反向过滤\r\n^:表示以。。。开头\r\n$:表示以。。。结尾\r\n20.tar:归档及压缩命令 \r\n-c:创建.tar格式的包文件\r\n-x:解开.tar格式的包文件\r\n-v:输出详细信息\r\n-f:表示使用归档文件 \r\n-p:打包时保留原始文件及目录权限 \r\n-t:列表查看包内的文件\r\n-C：指定解压路径\r\n格式：#tar -cvf passwd.tar passwd 创\r\n#tar -xvf passwd.tar -C /home 解\r\n调用： -z :gzip \r\n-j :bzip2\r\n格式:#tar -czvf passwd.tar.gz \r\n#tar -cjvf passwd.tar.bz2 创\r\n#tar -xzvf passwd.tar.gz -C /home \r\n#tar -xjvf passwd.tar.bz2 -C /home 解\r\n ','#Linux#',5,NULL,5,'yc','2019-03-09',NULL,NULL,'系统命令存放:/bin或/sbin\r\n#start x 调回xwindows\r\n/etc/inittab\r\n启动级别解释:0-6\r\n0:关机\r\n1:单用户\r\n2:无网络无图形 \r\n3:有网络无图形\r\n4:预留\r\n5:有网络有图形\r\n6:重启',NULL,NULL,NULL,NULL,NULL),(81,'老干部','','','Spring基础知识学习总结','images/1.jpg','Spring是什么？\r\nSpring是一个开源框架\r\nSpring为简化企开发而生，使用spring可以简化javabean的实现和管理\r\nSpring是一个IOC控制反转/DI依赖注入和AOP容器框架\r\n \r\n-轻量级：非侵入性\r\n-依赖注入IOC DI\r\n-面向切面编程 AOP\r\n-容器：spring是一个容器，它包含并管理整个应用对象的生命周期\r\n-一站式框架(可以整合其他框架)：在IOC和AOP的基础上可以去整合一些优秀的第三方框架（spring自身也提供了展现层SpringMVC和持久层SpringJDBC）\r\n \r\nIOC和DI\r\nIOC（Inversion Of　Control）：其思想是反转资源获取的方向。传统的资源查找方式要求组件向容器发起请求获取资源。作为响应，容器适时的返回资源。而应用了IOC之后，容器主动的将资源推送给它所管理的组件，组件所要做的仅仅是选择一种合适的方式来接受资源，也被称为查找的被动形式。\r\nDI（Dependency Injection）：IOC的另一种表达方式，即组件以一些预定好的方式（例如setter方法）接受来自容器注入的资源。\r\n \r\nIOC前生\r\n--分离接口与实现（自己实现）\r\n--工厂设计模式（工厂中获取）\r\n--采用控制反转\r\n \r\n \r\n \r\nIOC&DI概述：\r\n配置bean\r\n配置形式：基于XML文件的方式；基于注解的方式\r\nBean的配置方式：通过全类名（反射）、通过工厂方法（静态工厂方法&实例工厂方法）、\r\nIOC容器BeanFactory & ApplicaitonContext概述\r\n依赖注入的方式：属性注入；构造器注入\r\n注入属性细节\r\n自动转配\r\nBean之间的关系：继承；依赖\r\nBean的作用域：singleton单例；prototype；WEB 环境作用域\r\n使用外部属性文件\r\nspEL表达式\r\nIOC容器中Bean的生命周期\r\nSpring4新特性：泛型依赖注入\r\n \r\n在Spring的IOC容器里配置Bean\r\n在XML文件中通过bean节点来配置bean\r\n<!--通过全类名来配置bean    -->\r\n<bean id=\"user\" class=\"cn.demo.spring.User\">\r\n    <constructor-arg name=\"name\" value=\"Spring\"></constructor-arg>\r\n</bean>\r\nid:bean的名称\r\n在ioc容器中必须是唯一的\r\n容id没有指定，spring自动将权限限定性类型作为bean的名字\r\nId可以指定多个名字，名字之间可以用逗号、分号、或者空格分隔\r\nSpring容器\r\n在Spring IOC容器读取bean配置创建bean实例之前，必须对它进行实例化，只有在容器实例化之后，才能从IOC容器里获取bean实例并使用。\r\nSpring提供了两种类型的IOC容器实现：\r\nBeanFactory：IOC容器的基本实现\r\nApplicationContext提供了更多的高级特性，是BeanFactory的子接口\r\nBeanFactory是Spring的基础设施，面向Spring本身；\r\nApplicationContext面向使用Spring框架的开发者，几乎所有的应用场合都直接使用ApplicationContext而非底层的BeanFactory\r\n无论何种方式配置文件是相同的\r\nApplicationContext\r\nApplicationContext的主要是实现类：\r\nClassPathXmlApplicationContext：从类路径加载配置文件\r\nFileSystemXmlApplicationContext：从文件系统中加载配置文件\r\nConfigurableApplictionContext扩展于ApplicationContext，新增两个主要方法：refresh()和close()，让ApplicationContext具有驱动刷新和关闭上下文的能力；\r\nApplicationContext在初始化上下文时就实例化所有的单例Bean。\r\nWebApplictionContext是专门为web应用而准备的，它允许从相当于web根目录的路径中完成初始化工作。\r\n \r\n依赖注入的方式\r\n属性注入\r\n构造器注入\r\n工厂方法注入（很少用，不推荐）\r\n属性注入\r\n通过setter方法注入bean的属性或依赖的对象\r\n属性注入使用<property>元素，使用name属性指定bean的属性名称，value属性或<value>子节点指定属性值\r\n属性注入是实际应用中最常用的注入方式\r\n构造方法注入\r\n通过构造方法注入bean的属性或依赖的对象，它保证了bean实例在实例化之后就能使用。\r\n构造器注入在<constructor-arg>元素里声明，它没有name属性。\r\n \r\n字面值\r\n字面值：可以用字符串表示的值，可以通过<value>元素标签或value属性进行注入。\r\n基本数据类型及其封装类、String等类型都可以采用字面值注入的方式。\r\n若字面值中包含特殊字符，可以使用<![CDATA[]]>把字面值包裹起来。\r\n \r\n \r\n引用其他bean\r\n组成引用程序的bean经常需要相互协作以完成应用程序的功能，要使bean能够相互访问，就必须在bean文职文件中指定对bean的引用。\r\n在bean的配置文件中可以通过<ref>元素或ref属性问bean的属性或构造器参数指定对bena的引用。\r\n也可以在属性或者构造器里包含bean的声明，这样的bean称为内部bean。\r\n \r\n内部bean\r\n当bean实例仅仅给一个特定的属性使用时，可以将其声明为内部bean，内部bean声明直接包含在<property>或<constructor-arg>元素里，不需要设置任何id或name属性。\r\n内部bean不能使用在其他地方。\r\n \r\n注入参数详解：null值和级联属性\r\n可以使用专用的<null/>元素标签为bean的字符串或其他对象类型的属性注入null值。\r\n和Struts、hibernate等框架一样，spring支持级联属性的配置。\r\n集合属性\r\n在Spring中可以通过一组内置的xml标签，例如<list> <set> <map> <array>等来配置集合属性。\r\n配置java.util.list类型的属性需要指定<list>标签，在标签里包含一些元素，这些标签可以通过<value>指向简单的常量值，也可以通过<ref>指向对其他bean的引用，通过<bean>指定内置bean的定义，通过<null/>指定空元素，甚至可以内嵌其他集合。\r\n数组的定义可以使用<array>，也可以和list一样使用<list>\r\n配置java.util.Set需要使用<set>标签，定义元素的方法与List一样\r\nJava.util.Map通过<map>标签定义，<map>标签可以使用多个<entry>作为子标签，每个条目包含一个键和一个值。\r\n必须在<key>标签里定义键\r\n因为键和值的类型没有限制，所以可以自由地位他们指定<value> <ref> <bean>或<null/>元素。\r\n可以将Map的键和值最为<entry>的属性定义，简单常量使用key和value来定义；bean引用通过key-ref和val-ref属性定义。\r\n使用<props>定义java.util.Properties，该标签使用多个<prop>座位子标签，每个子标签必须定义key属性。\r\n \r\n使用P命名空间\r\n为了简化XML文件的配置，越来越多的XML文件采用属性而非子元素配置信息\r\nSpring从2.5版本开始引入了一个新的p命名空间，可以通过<bean>元素属性的方式配置bean的属性。\r\n使用p命名空间后，基于XML的配置方式将进一步简化。\r\n \r\nXML配置里的bean自动装配\r\nSpring IOC容器可以自动装配bean，需要做的仅仅是在<bean>的autowire属性里指定自动装配的模式：byName byType\r\nbyType（根据类型自动装配）：若IOC容器中有多个与目标bean类型一致的bean，则在这种抢矿下，spring将无法判断bean哪个bean最适合该属性，所以不能执行自动装配。\r\nbyName（根据名称自动装配）：必须将目标bean的名称和属性设置的完全相同。\r\nConstructor（通过构造器自动装配）：当bean中存在多个构造器时，此种自动装配方式将会很复杂，不推荐使用。\r\n \r\nXML配置里的bean自动装配缺点\r\n在bean配置文件里设置autowire属性进行自动装配将会装配bean的所有属性，然而，如果希望装配个别属性时，autowire属性就不够灵活了。\r\nAutowire属性要么根据类型自动装配，要么根据名称自动装配，不能两者兼容。\r\n一般情况下，在实际项目中很少使用自动装配的功能，因为和自动装配功能所带来的好处相比起来，明确清晰的配置文档更有说服力一些。\r\n \r\n \r\n基于注解的方式配置bean\r\n组件扫面（component scanning）：Spring能够从classpath下自动扫描，侦测和实例化具有特定注解的组件。\r\n特定组件包括：\r\n         -@Component：基于注解，标识了一个受Spring管理的组件\r\n         -@Respository：标识持久层组件\r\n         -@Service：标识服务层（业务层）组件\r\n         -@Controller：标识表现层组件\r\n         对于扫描到的组件，Spring有默认的命名策略：使用非限定类名，第一个字母小写，也可以在注解中通过value书信值标识组件的名称。\r\n \r\n当在组件类上使用了特定的注解之后，还需要在Spring的配置文件中声明<context：component-scan>\r\n         -base-package属性指定一个需要扫描的基类包，Spring容器将会扫描这个基类包及其子包中的所有类。\r\n-但需要扫描多个包时，可以使用逗号分隔。\r\n-如果仅希望扫描特定的类而非基包下的所有类，可以使用resource-pattern属性过滤特定的类，示例：\r\n        <context:component-scan base-package=\"cn.demo.bean.annotation\" resource-pattern=\"service/*.*\"/>\r\n-<context:include-filter>子节点表示要包含的目标类\r\n-<context:exclude-filter>子节点表示要排除在外的目标类\r\n-<context:component-scan>下可以拥有若干个<context:include-filter>和<context:exclude-filter>子节点\r\n \r\n使用@Autowired自动装配bean\r\n@AutoWired注解自动装配具有兼容类型的单个bean属性\r\n         -构造器，普通字段（即使是非public），一切具有参数的方法都可以应用@Autowired注解。\r\n         -默认情况下，所有使用@Autowired注解的属性都需要被设置，当Spring找不到匹配的bean装配属性时，会抛出异常，若某一个属性允许不被设置，可以设置@Autowired注解的required属性为false；\r\n         -默认情况下，单IOC容器中存在多个类型兼容的bean时，通过类型的自动装配将无法工作，此时可以在@Quailfier已制定注入bean的名称。\r\n         -@Autowired注解也可以应用在数组类型的属性上，此时Spring将会吧所有匹配的bean进行自动装配。\r\n         -@Autowired注解可以应用在集合属性上，此时Spring读取该集合的类型信息，然后自动装配所有与之兼容的bean。\r\n         -@Autowired注解用在java.util.Map上时，若该Map的键值为String，那么Spring将自动装配与之Map值类型兼容的bean，此时bean的名称作为键。\r\n \r\nAOP简介\r\nAspectJ：Java社区你最完整最流行的AOP框架，在Spring2.0以上版本中，可以使用基于AspectJ注解或者基于XML配置的AOP\r\nAOP（Aspect-Object Programming，面向切面编程）：是一种新的方法论，是对传统的OOP（Object-Oriented Programming，面向对象编程）的补充。\r\nAOP的主要编程对象是切面（aspect），而切面模块化横切关注点。\r\n在应用AOP编程时，仍然需要定义公共功能，但可以明确的在定义这个功能在哪里，以什么方式应用，并且不必修改受影响的类，这样一来，横切关注点就被模块化到特殊的对象（切面）里。\r\nAOP的好处：\r\n每个事物逻辑位于一个位置，代码不分散，便于维护和升级\r\n业务模块更简洁，值包含核心业务代码\r\n用AspectJ注解声明切面\r\n要在Spring中声明AspectJ切面，只需要在IOC容器中将切声明为bean实例，当Spring IOC容器中初始化AspectJ切面之后，Spring IOC容器就会为哪些与AspectJ切面相匹配的bean创建代理。\r\n在AspectJ注解中，切面只有一个带有@AspectJ注解的Java类。\r\n通知是标注有某种注解的简单的java方法。\r\nAspectJ支持5种类型的通知注解：\r\n@Before：前置通知，在方法调用之前执行。\r\n@After：后置通知，在方法调用之后执行。\r\n@AfterRunning：返回通知，在方法返回结果之后调用\r\n@AfterThrowing：异常通知，在方法抛出异常之后执行\r\n@Around：环绕通知，围绕着方法执行\r\n \r\n利用方法签名编写AspectJ切入点表达式\r\n最典型的切入点表达式根据方法的签名来匹配各种方法：\r\n-execution * com.spring.demo.LoggingAspect.*(..):匹配LoggingAspect中声明的所有方法，第一个*代表任意修饰符以及任意返回值，第二个*表示任意方法，..匹配任意数量的参数。若目标类与接口与该切面在同一个保重，可以省略包名。\r\n-execution public * LoggingAspect.*(..):匹配LoggingAspect接口的所有公共方法\r\n-execution public int LoggingAspect*(..):匹配LoggingAspect接口中所有返回类型为int的方法\r\n-execution public int LoggingAspect.*(int ,..):匹配第一个参数为int类型的所有方法\r\n-execution public int LoggingAspect.*(int,double):匹配第一个参数类型为int，第二个为double的所有方法\r\n \r\n让通知访问当前连接点的细节\r\n可以在通知方法中声明一个类型为JoinPoint的参数，然后就能访问连接点的细节，例如方法名称和参数值等。\r\n@Before(\"execution(public int cn.demo.aop.impl.CalculatorImpl.*(int,int))\")\r\npublic void beforeMethod2(JoinPoint joinPoint){\r\n    String methodName = joinPoint.getSignature().getName();\r\n    List<Object> args = Arrays.asList(joinPoint.getArgs());\r\n    System.out.println(\"before method2 ......\");\r\n    System.out.println(\"the method \" + methodName + \" start with args \" + args);\r\n}\r\n \r\n基于XML的配置声明切面\r\n除了使用AspectJ注解方式声明切面以外，Spring也支持在Bean配置文件中声明切面的方式。这种声明通过aop schema中的特定元素标签来完成。\r\n正常情况下，基于注解的声明要优先于基于XML的声明，通过AspectJ注解，切面可以兼容AspectJ，而基于Xml的配置则是Spring专有的。由于AspectJ得到越来越多的AOP框架支持，所以注解风格编写的切面将会有更多的重用机会。\r\n以下为XML配置举例：\r\n\r\n\r\n\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<beansxmlns=\"http://www.springframework.org/schema/beans\"\r\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"xmlns:aop=\"http://www.springframework.org/schema/aop\"\r\nxsi:schemaLocation=\"http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/aophttp\r\n    ://www.springframework.org/schema/aop/spring-aop.xsd\">\r\n<!--配置bean-->\r\n<beanid=\"calculatorImpl\"class=\"cn.demo.aop.impl.xml.CalculatorImpl\"></bean>\r\n<!--配置切面bean-->\r\n<beanid=\"logginAspect\"class=\"cn.demo.aop.impl.xml.LogginAspect\"></bean>\r\n<beanid=\"validationAspect\"class=\"cn.demo.aop.impl.xml.ValidationAspect\"></bean>\r\n<!--配置AOP-->\r\n<aop:config>\r\n<!--配置切点表达式-->\r\n<aop:pointcutid=\"pointcut\"expression=\"execution(publicintcn.demo.aop.impl.xml.CalculatorImpl.*(int,int))\"></aop:pointcut>\r\n<!--配置切面及通知-->\r\n<!--1.配置验证通知-->\r\n<aop:aspectorder=\"1\"ref=\"validationAspect\">\r\n<aop:beforemethod=\"validateMethod\"pointcut-ref=\"pointcut\"></aop:before>\r\n</aop:aspect>\r\n<!--2.配置日志通知-->\r\n<aop:aspectorder=\"2\"ref=\"logginAspect\">\r\n<!--前置通知-->\r\n<aop:beforemethod=\"beforeMethod\"pointcut-ref=\"pointcut\"></aop:before>\r\n<!--后置通知-->\r\n<aop:aftermethod=\"afterMethod\"pointcut-ref=\"pointcut\"></aop:after>\r\n<!--返回通知-->\r\n<aop:after-returningmethod=\"AfterReturningMethod\"pointcut-ref=\"pointcut\"returning=\"result\"></aop:after-returning>\r\n<!--异常通知-->\r\n<aop:after-throwingmethod=\"afterThrowingMethod\"pointcut-ref=\"pointcut\"throwing=\"ex\"></aop:after-throwing>\r\n<!--环绕通知-->\r\n<aop:aroundmethod=\"aroundMethod\"pointcut-ref=\"pointcut\"></aop:around>\r\n</aop:aspect>\r\n</aop:config>\r\n</beans>\r\n \r\n ','',5,NULL,2,'yc','2019-03-09',NULL,NULL,'Spring是一个开源框架\r\nSpring为简化企开发而生，使用spring可以简化javabean的实现和管理\r\nSpring是一个IOC控制反转/DI依赖注入和AOP容器框架\r\n ',NULL,NULL,NULL,NULL,NULL),(82,'老干部','','','IDEA下创建基于Spring的Hello World','images/8.jpg','前言：使用eclipse的同学对eclipse中的工作空间（workspace）比较熟悉，但是在idea中没有workspace的概念，idea中首先需要创建project，此处的project相当于eclipse中的workspace，在project下可以创建Module，Module相当于eclipse中的project工程。理解了这个概念，请项下继续看！\r\n\r\n创建一个maven简单quickstart工程，以便于组织依赖包导入。\r\n右键project -> New ->Module -> Maven 勾选Create from archetype\r\n选择maven-atchetype-quickstart\r\n\r\n填写maven工程相关参数名称\r\n\r\n \r\n这里选择的是与maven相关的配置，maven必须提前已经安装配置完成并且整合到idea中，具体安装maven步骤请参考（Apache Maven 3.6.0安装配置）。\r\n添加spring需要的最小单元依赖jar包到pom.xml文件中，以下为最小依赖单元：\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\nspring-core\r\nspring-context\r\nspring-beans\r\ncommons-logging\r\n \r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n<dependency>\r\n<groupId>org.springframework</groupId>\r\n<artifactId>spring-core</artifactId>\r\n<version>4.3.17.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n<groupId>org.springframework</groupId>\r\n<artifactId>spring-context</artifactId>\r\n<version>4.3.17.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n<groupId>org.springframework</groupId>\r\n<artifactId>spring-beans</artifactId>\r\n<version>4.3.17.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n<groupId>commons-logging</groupId>\r\n<artifactId>commons-logging</artifactId>\r\n<version>1.2</version>\r\n</dependency>\r\n 创建文件夹目录：resource，并转换为资源文件夹根目录；\r\n\r\n\r\n创建User类\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\npackagecn.demo.spring;\r\npublicclassUser{\r\npublicStringgetName(){\r\nreturnname;\r\n}\r\npublicvoidsetName(Stringname){\r\nthis.name=name;\r\n}\r\nprivateStringname;\r\npublicUser(Stringname){\r\nthis.name=name;\r\n}\r\n@Override\r\npublicStringtoString(){\r\nreturn\"Hello\"+this.name;\r\n}\r\n}\r\n创建Spring配置文件spring.xml，内容如下：\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<beansxmlns=\"http://www.springframework.org/schema/beans\"\r\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\nxsi:schemaLocation=\"http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n<beanid=\"user\"class=\"cn.demo.spring.User\">\r\n<constructor-argname=\"name\"value=\"Spring\"/>\r\n</bean>\r\n</beans>\r\n创建测试类Main\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\npackagecn.demo.spring;\r\nimportorg.springframework.context.ApplicationContext;\r\nimportorg.springframework.context.support.ClassPathXmlApplicationContext;\r\npublicclassMain{\r\npublicstaticvoidmain(String[]args){\r\nApplicationContextctx=newClassPathXmlApplicationContext(\"spring.xml\");\r\nUseru=(User)ctx.getBean(\"user\");\r\nSystem.out.println(u);\r\n}\r\n}\r\n启动测试类，得到如下结果：\r\n\r\n工程结构如下：\r\n\r\n至此，基于Spring的Hello World已经创建完成。','',5,NULL,2,'yc','2019-03-09',NULL,NULL,'前言：使用eclipse的同学对eclipse中的工作空间（workspace）比较熟悉，但是在idea中没有workspace的概念，idea中首先需要创建project，此处的project相当于eclipse中的workspace，在project下可以创建Module，Module相当于eclipse中的project工程。理解了这个概念，请项下继续看！',NULL,NULL,NULL,NULL,NULL),(83,'老干部','','','恢复回收站删除的文件','images/1.jpg','回收站删除了怎么恢复\r\n步骤/方法\r\n \r\n在cmd中运行“regedit”\r\n\r\n进入注册表，找到“HKEY_LOCAL_MACHINE”，请依据下图指示，点击红色框内，箭头所示的文件夹前的三角按钮\r\n\r\n在展开的文件夹中，找到“SOFTWARE”点击红色框内，箭头所示的文件夹前的三角按钮\r\n\r\n在展开的文件夹中，找到“Microsoft”点击红色框内，箭头所示的文件夹前的三角按钮\r\n\r\n展开的文件夹中，找到“Windows”点击红色框内，箭头所示的文件夹前的三角按钮\r\n\r\n在展开的文件夹中，找到“CurrentVersion”点击红色框内，箭头所示的文件夹前的三角按钮\r\n\r\n在展开的文件夹中，找到“Explorer”点击红色框内，箭头所示的文件夹前的三角按钮\r\n\r\n在展开的文件夹中，找到“DeskTop”点击红色框内，箭头所示的文件夹前的三角按钮\r\n点击红色框内的“NameSpace”文件夹，右边出现“默认”等\r\n\r\n在右边空白区域，点击右键，新建“项”\r\n\r\n点击新建项后，出现如下界面，将新出现的项的名字（红色框框内显示）重命名为“{645FFO40-5081-101B-9F08-00AA002F954E}”------------请注意，要把大括号也带入\r\n\r\n点击新建的项，右边会出现默认等显示，右键点击“默认”二字，点击修改，出现如下界面\r\n \r\n点击修改后，出现如下界面，请在数值名称一项中，将“{默认}”修改为“{回收站}”点击确定\r\n \r\n重新启动电脑即可！','#操作系统#',5,NULL,4,'zz','2019-03-09',NULL,NULL,'回收站删除了怎么恢复步骤/方法\r\n在cmd中运行“regedit”\r\n进入注册表，找到“HKEY_LOCAL_MACHINE”，请依据下图指示，点击红色框内，箭头所示的文件夹前的三角按钮',NULL,NULL,NULL,NULL,NULL),(84,'老干部','','','Windows7下配置java环境变量','images/1.jpg','windows下java环境变量配置方法\r\n\r\n   windows7下java环境变量配置方法：\r\n   1.用鼠标右击“我的电脑”->属性   \r\n\r\n   选择左边导航的“高级系统设置”选项，然后这回熟悉了吧？\r\n\r\n   继续选择右下角的“环境变量”选项\r\n\r\n   2.进行win7下Java环境变量配置\r\n   \r\n   在\"系统变量\"下进行如下配置：\r\n  (1)新建->变量名：JAVA_HOME 变量值：D:/Java/jdk1.6.0_12(这只是我的JDK安装路径)\r\n  (2)编辑->变量名：Path 在变量值的最前面加上：%JAVA_HOME%/bin;%JAVA_HOME%/jre/bin\r\n  (3)新建->变量名：CLASSPATH 变量值：.;%JAVA_HOME%/lib;%JAVA_HOME%/lib/dt.jar;%JAVA_HOME%/lib/tools.jar\r\n   注意：当设置的变量在末尾时，不要加上“；”。\r\n\r\n  3.测试下环境变量是否设置成功\r\n    在左下角的搜索框中键入\r\n    cmd\r\n    或者按下“WIN+R”键,“WIN”键就是\"CTRL\"和“ALT””中间那个微软图标那个键；\r\n   分别输入java，javac，java -version 命令\r\n   如果出现如下信息：\r\n\r\n   \r\n   4.你的Java环境变量配置成功！\r\n   注意:\r\n   若出现\r\n   \'javac\' 不是内部或外部命令，也不是可运行的程序\r\n   或批处理文件。\r\n   说明此次Java环境变量配置出错了，仔细检查下吧！','#windows#',3,NULL,5,'yc','2019-03-09',NULL,NULL,'windows7下java环境变量配置方法：\r\n   1.用鼠标右击“我的电脑”->属性   \r\n   选择左边导航的“高级系统设置”选项，然后这回熟悉了吧？\r\n   继续选择右下角的“环境变量”选项\r\n   2.进行win7下Java环境变量配置\r\n   在\"系统变量\"下进行如下配置：\r\n  (1)新建->变量名：JAVA_HOME 变量值：D:/Java/jdk1.6.0_12(这只是我的JDK安装路径)\r\n  (2)编辑->变量名：Path 在变量值的最前面加上：%JAVA_HOME%/bin;%JAVA_HOME%/jre/bin\r\n  (3)新建->变量名：CLASSPATH 变量值：.;%JAVA_HOME%/lib;%JAVA_HOME%/lib/dt.jar;%JAVA_HOME%/lib/tools.jar\r\n   注意：当设置的变量在末尾时，不要加上“；”。',NULL,NULL,NULL,NULL,NULL),(85,'老干部','','','IDEA下创建git项目','images/5.jpg','在IDEA中已经为我们集成了git相关的插件，我们只需要配置相应的内容即可使用Git提供给我们的功能。在这之前需要我们电脑中已经安装并配置了Git，具体安装配置请参见《Git安装和使用》。\r\n1.IDEA配置Git\r\n配置git\r\n选择git命令所在路径，点击Test，出现如下界面。\r\n\r\n添加GitHub账户\r\n\r\n\r\n2.在服务器中创建git项目仓库\r\n\r\n3在idea中新建project\r\n \r\n \r\n\r\n此时我们可以看到文件夹下多了一个.git文件夹，说明git项目已经创建完成。\r\n\r\n4.创建Module工程\r\n我们在idea下新建一个JAVA工程demoGit\r\n\r\n国际惯例，添加HelloWorld程序进行测试。\r\n项目结构如下图：\r\n\r\n5.将新建的module工程转换为git项目\r\n进入D:\\01_Work\\demoProject目录，打开Git Bash，执行git init\r\ngit remote add origin git@github.com:*********/demoProject.git\r\n\r\n此时我们可以看到文件夹下多了一个.git文件夹，说明git项目已经创建完成。\r\n\r\n \r\n6.提交到服务器\r\n现在我们需要将helloGit项目提交到github下。\r\n右键helloGit项目 -> 选择Git ->Commit Directory\r\n添加提交注释，Commit and Push\r\n\r\n再次登录github查看\r\n\r\n新建的工程已经被提交，操作完成。\r\n ','#idea#/#Git#',2,NULL,3,'yc','2019-03-09',NULL,NULL,'在IDEA中已经为我们集成了git相关的插件，我们只需要配置相应的内容即可使用Git提供给我们的功能。在这之前需要我们电脑中已经安装并配置了Git，具体安装配置请参见《Git安装和使用》。',NULL,NULL,NULL,NULL,NULL),(86,'老干部','','','Apache Maven 3.6.0安装配置','images/1.jpg','第一步：下载maven安装包\r\n下载地址：http://maven.apache.org/download.cgi  注意下载bin文件 src为源码\r\n\r\n \r\n第二步：解压下载文件\r\n将下载的压缩包解压，例如：D:\\Program Files\\apache-maven-3.6.0\r\n\r\n第三步：配置maven环境变量\r\n新建环境变量MAVEN_HOME 并添加路径值D:\\Program Files\\apache-maven-3.6.0\r\n\r\n编辑环境变量Path，添加%MAVEN_HOME%\\bin\\\r\n\r\n进入cmd 输入mvn -v查看maven是否正确安装\r\n\r\n \r\n配置Maven本地仓库\r\n打开文件D:\\Program Files\\apache-maven-3.6.0\\conf\\setting.xml\r\n找到如下代码：<localRepository>/path/to/local/repo</localRepository>\r\n我们可以看到，此段代码已经被注释了，需要取消注释，同时将值修改为本地路径，我这里选择D:\\Program Files\\apache-maven-3.6.0\\repo为本地maven仓库路径。\r\n（配置本地仓库的目的是为了能够更加快速的查找我们在程序开发的过程中需要用到的依赖包，如果本地仓库存在，则直接从仓库中获取，如果不存在，则会去远程仓库下载并保存到本地仓库）\r\n修改前\r\n\r\n修改后\r\n\r\n \r\n配置阿里云镜像仓库\r\n在settings.xml文件中的mirrors下添加mirror标签\r\n<mirror>\r\n<id>alimaven</id>\r\n<name>aliyun maven</name>\r\n<url>http://maven.aliyun.com/nexus/content/groups/public/</url>\r\n<mirrorOf>central</mirrorOf>\r\n</mirror>\r\n\r\n验证之前配置是否生效，命令窗口输入：mvn help:system\r\n \r\n可以发现，maven已经从阿里云镜像中下载了部分相关文件到本地配置路径下\r\n\r\n至此，Maven的安装和配置都已经完成，','',2,NULL,2,'yc','2019-03-09',NULL,NULL,'第一步：下载maven安装包下载地址：http://maven.apache.org/download.cgi  注意下载bin文件 src为源码',NULL,NULL,NULL,NULL,NULL),(87,'老干部','','','Git安装和使用','images/7.jpg','Git安装和使用\r\n \r\n1.Git（分布式版本管理）简述\r\n我们在项目开发的过程中通常是团队协作完成的，在这个过程中，我们会用到版本控制管理工具，例如：SVN Git CVS等。\r\nSVN托管网站需要我们拥有一个（版本库）中央仓库，并且需要每一个工作站与中央仓库网络互通才能进行访问。而Git中没有一个中央仓库的概念，每一个工作站拥有一个本地版本库(分支)，用户将修改后的代码存放到本地版本库中，开发过程中不需要依赖网络环境，只是在最终合并的时候将工作站中的所有版本库进行推送合并到服务器版本库（master）。\r\n2.Git工作原理：\r\n本地工作目录提交到暂存区，当代码达到一定量后最终提交到服务器版本库。\r\n本地工作目录 -> 暂存区：git add\r\n暂存区 -> 版本库：git commit\r\n本地计算机工作目录 推送到 其他计算机工作目录：git push\r\n其他计算机工作目录 拉取到 本地计算机工作目录：git pull\r\n \r\n3.Git的安装\r\n下载地址：msysgit.github.io 会根据自己当前用户的操作系统类型重定向到相应的下载页面\r\n\r\n\r\n下载完成后打开，选择默认配置进行安装。\r\n安装完成后进入cmd下确认输入：git --version 查看是否已经将git添加到环境变量中（2.19默认自动将git添加到环境变量中），如果没有添加，则需要在path中添加git命令执行路径，例如：D:\\Program Files\\Git\\cmd\r\n\r\n \r\n4.Git的本地配置\r\n打开git bash，配置用户名和邮箱,用户名和邮箱相当于SVN中的用户名密码，是区分用户的唯一标识符，输入如下命令：\r\ngit config --global user.name \"example\"\r\ngit config --global user.email \'example@163.com\'\r\n添加完成后可以使用：git config --list 来查看配置是否生效，也可以在本地用户目录下查看.gitconfig文件中的内容与配置是否一致。\r\n\r\n5.配置远程仓库\r\n登录https://github.com，新建仓库\r\n\r\n添加仓库名称：demo 添加描述：初始化demo版本\r\n\r\n对应的https地址：https://github.com/hairuizone/demo.git\r\n对应的ssh地址：git@github.com:hairuizone/demo.git\r\n此时远程仓库已经配置完成。\r\n6.配置本地免密登录服务器仓库\r\n目的：本地计算机与远程服务器之间进行通信关联\r\n本地打开git bash，输入：ssh-keygen -t rsa -C example@163.com\r\n将密钥创建到本地用户目录下\r\n\r\n将本地公钥添加到服务器：\r\n    使用记事本打开id_rsa.pub，并将内容拷贝。\r\n    打开github服务器，选择Settings，并选择如图操作创建新的SSH key\r\n\r\nTitle：任意名称\r\nKey：将刚才拷贝的密钥粘贴进来，并将最后的回车删除\r\n\r\n此时，已经将本地的ssh公钥添加到服务器端，可以使用如下命令验证免密钥登录是否成功：\r\nssh -T git@github.com 提示输入：yes 出现如下界面说明免密登录已经配置完成。同时本地用户目录文件下可以看到一个known_hosts的文件。\r\n\r\n \r\n7.创建Git案例项目\r\n    在本地创建git项目\r\nD盘新建文件夹：gitdemo\r\n在此文件夹下创建文件helloGit.txt \r\nhelloGit.txt内容如下：hello this is git\r\n    在项目根目录（gitdemo文件夹内）右键 Git Bash Here\r\n    输入git init，完成后可以看到当前目录下出现了.git文件夹 则说明git本地项目创建成功。\r\n    \r\n    \r\n8.本地项目与远程资源库进行关联\r\ngit remote add origin https://github.com/hairuizone/demo.git\r\n或者使用ssh唯一标识符进行关联\r\ngit remote add origin git@github.com:hairuizone/demo.git\r\n\r\n \r\n9.Git常见命令的使用\r\n第一次发布项目\r\n将本地项目发布到服务器\r\n将本地项目提交到暂存区：git add .\r\n暂存区推到本地分支：git commit -m \"注释内容\"\r\n第一次将本地分支提交到远程仓库：git push -u origin master\r\n\r\n登录服务器查看查看刚才提交的内容如下：\r\n\r\n第一次下载项目\r\n    远程下载到本地：git clone https://github.com/hairuizone/demo.git\r\n \r\n提交项目\r\n    我们将hellGit.txt中的文件进行修改：hello this is git 1234，然后进行提交。\r\ngit add .\r\ngit commit -m \"注释\"\r\ngit push origin master\r\n\r\n\r\n \r\n更新项目\r\n远程更新到本地\r\ngit pull\r\n ','',2,NULL,3,'yc','2019-03-09',NULL,NULL,'我们在项目开发的过程中通常是团队协作完成的，在这个过程中，我们会用到版本控制管理工具，例如：SVN Git CVS等。\r\nSVN托管网站需要我们拥有一个（版本库）中央仓库，并且需要每一个工作站与中央仓库网络互通才能进行访问。而Git中没有一个中央仓库的概念，每一个工作站拥有一个本地版本库(分支)，用户将修改后的代码存放到本地版本库中，开发过程中不需要依赖网络环境，只是在最终合并的时候将工作站中的所有版本库进行推送合并到服务器版本库（master）。',NULL,NULL,NULL,NULL,NULL),(88,'老干部','','','DB2常见命令','images/5.jpg','DAS服务启动：db2admin start\r\nDB2启动命令：db2start\r\nDB2停止命令：db2stop / db2stop force\r\n停止所有连接：db2 force application all\r\n连接到指定数据库：db2 connect to dbname user username using password\r\n \r\nBD2数据库导出orcl库中的所有表结构\r\ndb2look -d orcl -e -a -l -o /home/cmis/orcl.ddl\r\n导出指定用户的表结构\r\ndb2look -d orcl -z user1-e -o aa.sql\r\n \r\nDB2数据库导入表结构\r\ndb2 -tvf /home/cmis/orcl.ddl\r\n \r\n导出orcl下的所有数据\r\ndb2move orcl export -sn *\r\n \r\n导出orcl数据库下指定schema下的数据\r\ndb2move orcl export -sn schemaname\r\n \r\n使用db2move导入数据（替换原数据）\r\ndb2move orcl load -lo replace\r\n\r\n更新某张表的某个字段（扩容）\r\nalter table tablename alter columnname set data type CLOB(2048);\r\nalter table tablename alter columnname set data type VARCHAR(20);\r\n \r\n导出某一张表\r\ndb2 export to a.del of del select * from schema.tablename\r\n插入某张表数据\r\ndb2 import from a.del of del insert into schema.tablename\r\n替换某张表数据\r\ndb2 import from a.del of del replace into schema.tablename\r\n \r\n数据库清理日志\r\ndb2 list history archive log all for orcl\r\ndb2 prune history 20161118091620（最新的时间戳）\r\ndb2 list history backup all for orcl\r\ndb2 prune history 20161116160313 with force option and delete\r\ndb2 backup db orck online to /dev/null\r\n \r\n赋予某个用户操作数据库权限\r\ndb2 \"grant dbadm,createtab,bindadd,connect,create_not_fenced_routine,implicit_schema,load,create_external_routine,quiesce_connect,secadm on database  to user usename\"\r\n \r\n \r\n \r\n \r\nselect INDSCHEMA,indname from syscat.indexes where tabname=\'CUSTINFO\'\r\ndb2expln -d testdb -u easycore easycore -t -g -q \"SELECT USERPK,DEPTPK FROM easymis.s_userduty WHERE 9=9 and USERPK=\'admin\'\"\r\nDB2中的转意符为 \'\r\nUser exit for logging enabled (USEREXIT) = OFF\r\n如果等于ON则, 日志慢了, 要备份, 且会引发 table space 无法访问的问题\r\ndb2 list tables for schema easymis\r\n\r\ndb2 \"import from xxx.txt of del modified by coldel| insert into szjxx\"\r\n这个命令可以在DB2V8下load |分隔的文本。\r\n\r\ndb2 connect to easydb user easymis using easymis\r\ndb2 \"import from easymis.xxx.ixf of ixf insert into xxx\"\r\ncreate table student \r\n( \r\nno integer, \r\nname varchar(30), \r\nage integer, \r\nsex integer, \r\ncountry varchar(20), \r\ncity char(10) \r\n); \r\ncreate unique index ix_stu on student (no asc) include(name);\r\n\r\n测试管理系统SQL性能的过程中发现, 有些大的数据表在过渡完后,没有执行runstats on table ..., 这导致在大表关联查询或者其它复杂查询时性能差异极大,例如:\r\nSELECT A.CUSTNO,CUSTNAME,CERTTYPE,CERTNO,CUSTMGR,CUSTTERM,SEX,BIRTHDAY,CARDORGAN,ORGANDISTNO,MOBILETEL,OFFICETEL,HOMETEL,HOSTHOLDADDR,HOMEADDRESS,UNIT,MANAGEUNTNAME,UNTADDR,MANAGEUNTADDR,KHSFLB FROM EASYPUB.PRICUSTINF A,EASYPUB.CUSTINFO B WHERE (A.CUSTNO = B.CUSTNO ) AND ( CUSTNAME = ? )\r\nrunstats: 0.09秒\r\n未runstats: 1m20s\r\n注意在数据过渡后,对大表都加上runstats处理,加在数据过渡的脚本上\r\n \r\ndb2相关端口\r\n449\r\n8471\r\n8476\r\n#查看本instance下有哪些database \r\ndb2 LIST DATABASE DIRECTORY [ on /home/db2inst1 ] \r\n#启动数据库 \r\ndb2start\r\n#停止数据库\r\ndb2stop\r\n#连接数据库\r\ndb2 connect to database_name user db2 using pwd \r\n#中断数据库连接 \r\ndb2 disconnect database_name\r\n#查看及更改数据库实例的配置 \r\ndb2 get dbm cfg \r\ndb2 update dbm cfg for database_name using 参数名 参数\r\n4.10.1 打开对锁定情况的监控。 \r\ndb2 update dbm cfg using dft_mon_lock on \r\n4.10.2 更改诊断错误捕捉级别 \r\ndb2 update dbm cfg using diaglevel 3 \r\n0 为不记录信息 \r\n1 为仅记录错误 \r\n2 记录服务和非服务错误 \r\n缺省是3，记录db2的错误和警告 \r\n4 是记录全部信息，包括成功执行的信息 \r\n一般情况下，请不要用4，会造成db2的运行速度非常慢。 \r\n#查看数据库的配制\r\ndb2 get db cfg for database_name \r\n#写数据库管理程序配置\r\ndb2 update db cfg for database_name using 参数名 参数?\r\n4.9.1 改排序堆的大小 \r\ndb2 update db cfg for head using SORTHEAP 2048 \r\n将排序堆的大小改为2048个页面，查询比较多的应用最好将该值设置比较大一些。 \r\n4.9.2 改事物日志的大小 \r\ndb2 update db cfg for head using logfilsiz 40000 \r\n该项内容的大小要和数据库的事物处理相适应，如果事物比较大，应该要将该值改大一点。否则很容易处理日志文件满的错误。 \r\n4.9.3 出现程序堆内存不足时修改程序堆内存大小 \r\ndb2 update db cfg for head using applheapsz 40000 \r\n该值不能太小,否则会没有足够的内存来运行应用程序。\r\n#关闭所有应用连接\r\ndb2 force application all\r\n#查看应用连接\r\ndb2 list application for db database_name show detail\r\n授权标识 | 应用程序名 | 应用程序句柄 | 应用程序标识 | 序号# | 代理程序 | 协调程序 | 状态 | 状态更改时间 | DB 名 |DB 路径| | 节点号 | pid／线程\r\n其中：1、应用程序标识的第一部分是应用程序的IP地址，不过是已16进制表示的。 \r\n2、pid/线程即是在unix下看到的线程号。 \r\n停止应用程序： \r\ndb2 \"force application(236)\" \r\ndb2 \"force application all\"\r\n该236是查看中的应用程序句柄\r\n#整理表\r\ndb2 reorg table table_name \r\ndb2 runstats on table table_name with distribution and indexes all \r\n#导出表\r\ndb2 export to table_name.txt of del select * from table_name \r\ndb2 export to table_name.ixf of ixf select * from table_name \r\n#导入数据,自增字段不出现在txt里,insert values时自增字段用default\r\ndb2 import from table_name.txt of del insert into table_name\r\ndb2 \"insert into test.test values(\'姓名\',28,default)\"\r\n#执行一个批处理文件\r\ndb2 -tf 批处理文件名(命令结束;\\n)\r\ndb2 -f 批处理文件名(命令结束\\n)\r\n#从系统表中取所有表名\r\ndb2 \"select tabname,tabschema,type from syscat.tables\"\r\n#生成所有建库语句\r\ndb2look -d easydb -e -o ddd2.txt\r\ndb2look -d easydb -u ht -e -p\r\ndb2look -d easydb -u ht -w -asd -a -e\r\n#赋予user表权限\r\ndb2 \"grant all on table_name to user_name\"\r\ndb2 \"grant select/insert/update on table_name to user_name\"\r\ndb2 \"grant select on table_name to public\"\r\n#回收表权限\r\ndb2 \"revoke all on table_name from user user_name\"\r\ndb2 \"revoke select/insert/update on table_name from user user_name\"\r\ndb2 \"revoke all on table_name from public\"\r\n#取前3条记录\r\nselect * from table_name fetch first 3 rows only\r\n#显示当前用户所有表 \r\ndb2 list tables\r\n#显示所有系统表\r\ndb2 list tables for system \r\n#显示所有表\r\ndb2 list tables for all \r\n#显示指定模式所有表\r\ndb2 list tables for schema SCHEMA_NAME\r\n#确定表空间的状态\r\ndb2 list tablespaces show detail\r\n#显示当前活动数据库 ??\r\n#显示当前表结构\r\ndb2 \"describe select * from table_name\"\r\ndb2 \"describe table test.test\"\r\n#查看索引\r\ndb2 \"describe indexes for table test.test show detail\"\r\n#在db2中如何知道表的锁情况\r\n#在你执行你的存储过程之前，执行命令打开锁的监视开光\r\ndb2 update monitor switches using lock on\r\n#然后执行你的存储过程，在执行存储过程期间的时候使用命令\r\ndb2 get snapshot for locks on database_name\r\n#查看数据库表的死锁\r\n再用命令中心查询数据时要注意,如果用了交互式查询数据,命令中心将会给所查的记录加了s锁.这时如果要update记录,由于update要使用x锁,排它锁,将会处于锁等待.\r\n首先,将监视开关打开 \r\ndb2 update dbm cfg using dft_mon_lock on \r\n快照 \r\ndb2 get snapshot for Locks on cleardb >snap.log \r\ntables \r\nbufferpools \r\ntablespaces \r\ndatabase \r\n然后再看snap.log中的内容即可。 \r\n对Lock可根据Application handle（应用程序句柄）看每个应用程序的锁的情况。 \r\n监视完毕后，不要忘了将监视器关闭 \r\ndb2 update dbm cfg using dft_mon_lock off\r\n#可以看正在运行的程序有没有处于锁等待状态的\r\nlist applications for db database_name show detail\r\n#DB2的log sqllib/db2dump/db2diag.log\r\n#查看版本\r\ndb2level\r\ndb2 \"select * from sysibm.sysversions\"\r\n#设置当前schema\r\nSET SCHEMA=SCHEMA_NAME\r\n#查看能在配置文件注册表中设置的所有变量的列表\r\ndb2set -lr\r\n#修改注册项的值\r\n设定当前实例的一个参数\r\nDB2SET PARAMETER=VALUE\r\n设定一个全局级的参数\r\nDB2SET PARAMETER=VALUE -g (小写)\r\n#在DB2 CLP中执行操作系统命令\r\ndb2 => !command\r\n#如何获得DB2的命令的语法相关信息\r\nDB2 ? 显示所有DB2命令 \r\nDB2 ? COMMAND 显示命令信息\r\nDB2 ? SQLnnnn 显示这个SQLCODE的解释信息\r\nDB2 ? DB2nnnn 显示这个DB2错误的解释信息\r\n#如何查看当前CLP的设置\r\ndb2 LIST COMMAND OPTIONS\r\n#如何更新当前CLP会话的特定项设置\r\nDB2 UPDATE COMMAND OPTIONS USING OPTIONS ...\r\n#如何查看系统数据库目录\r\ndb2 LIST DB DIRECTORY\r\n#表空间\r\ndb2 list tablespaces\r\n#表容器空间\r\nLIST TABLESPACE CONTAINERS FOR 1\r\n#如何知道一个用户有多少表\r\nSELECT * FROM SYSIBM.SYSTABLES WHERE CREATOR=\'USER\'\r\n#如何知道用户下的函数\r\ndb2 \"select NAME from sysibm.SYSFUNCTIONS\"\r\n#如何知道用户下的VIEW数\r\ndb2 \"select NAME from sysibm.sysviews WHERE CREATOR=\'USER\'\"\r\n#如何知道用户下的TRIGGER数\r\nselect * from sysibm.SYSTRIGGERS WHERE SCHEMA=\'USER\'\r\n#如何知道TABLESPACE的状况\r\nselect * from sysibm.SYSTABLESPACES\r\n#如何知道SCHEMA的状况\r\ndb2 \"select NAME from sysibm.SYSSCHEMATA\"\r\n#如何知道INDEX的状况\r\nselect * from sysibm.SYSINDEXES\r\n#如何知道表的字段的状况\r\nselect * from sysibm.SYSCOLUMNS WHERE TBNAME=\'TABLE_NAME\'\r\n#如何知道DB2的数据类型\r\nselect * from sysibm.SYSDATATYPES\r\n#如何知道BUFFERPOOLS状况\r\nselect * from sysibm.SYSBUFFERPOOLS\r\n#DB2表的字段的修改限制\r\nalter table只能修改VARCHAR类型的并且只能增加不能减少\r\nalter table yhdab ALTER kh SET DATA TYPE varchar(13)\r\n#一次给一个表增加多个字段 \r\ndb2 \"alter table table_name add column t1 char(1) add column t2 char(2) add column t3 int\" \r\n#如何快速清除一个大表\r\nALTER TABLE TABLE_NAME ACTIVE NOT LOGGED INITALLY WITH EMPTY TABLE\r\n#如何查看数据库的包\r\ndb2 \"select * from sysCAT.PACKAGES\"\r\n#如何查看数据库的存储过程\r\nSELECT * FROM SYSCAT.PROCEDURES\r\nSELECT SUBSTR(PROCSCHEMA,1,15),SUBSTR(PROCNAME,1,15) FROM SYSCAT.PROCEDURES\r\n#如何查看表的约束\r\nSELECT * FROM SYSCAT.CHECKS WHERE TABNAME=\'TABLE_NAME\'\r\n#如何查看表的引用完整约束\r\nSELECT * FROM SYSCAT.REFERENCES WHERE TABNAME=\'TABLE_NAME\'\r\n#别名的使用\r\ndb2 \"create alias test.column for syscat.columns\"\r\ndb2 \"drop alias test.column\"\r\n#复制表结构建表\r\ncreate table new_table as (select * from old_table) definition only; \r\n#插入数据\r\ninsert into new_table select * from old_table; \r\n#建立VIEW\r\ndb2 \"create view test.v_test as select name from test.test\"\r\n#查看view,VIEWNAME要大写\r\ndb2 \"select viewname from syscat.views where viewname=\'V_TEST\'\"\r\n#建立唯一索引\r\ndb2 \"create unique index test.ix_test on test.test(name)\"\r\n#查看索引\r\ndb2 \"select indname from syscat.indexes\"\r\n#SUBSTR\r\ndb2 \"select substr(name,1,2) from test.test\"\r\n#数据类型转换,name为CHARACTER\r\ndb2 \"select cast(name as integer)+12 from test.test\"\r\n#LOCK\r\nlock table test in exclusive mode\r\nlock table test in share mode\r\n#用户权限\r\ndb2 GET AUTHORIZATIONS\r\n#模式特权\r\nGRANT CREATEIN ON SCHEMA SCHEMA-name TO USER USER_NAME\r\nGRANT ALTERIN ON SCHEMA SCHEMA-name TO USER USER_NAME\r\nGRANT DROPIN ON SCHEMA SCHEMA-name TO USER USER_NAME\r\nrevoke CREATEIN ON SCHEMA SCHEMA-name TO USER USER_NAME\r\nrevoke ALTERIN ON SCHEMA SCHEMA-name TO USER USER_NAME\r\nrevoke DROPIN ON SCHEMA SCHEMA-name TO USER USER_NAME\r\n#数据库特权 \r\ndb2 \"grant connect,createtab,dbadm on database to user user_name\"\r\ndb2 \"revoke connect,createtab,dbadm on database from user user_name\"\r\n#索引特权\r\ndb2 \"grant control on index test.ix_test to user_name\"\r\n#检索具有特权的所有授权名\r\n　　SELECT DISTINCT GRANTEE, GRANTEETYPE, \'DATABASE\' FROM SYSCAT.DBAUTH \r\n　　UNION \r\n　　SELECT DISTINCT GRANTEE, GRANTEETYPE, \'TABLE \' FROM SYSCAT.TABAUTH \r\n　　UNION \r\n　　SELECT DISTINCT GRANTEE, GRANTEETYPE, \'PACKAGE \' FROM SYSCAT.PACKAGEAUTH \r\n　　UNION \r\n　　SELECT DISTINCT GRANTEE, GRANTEETYPE, \'INDEX \' FROM SYSCAT.INDEXAUTH \r\n　　UNION \r\n　　SELECT DISTINCT GRANTEE, GRANTEETYPE, \'COLUMN \' FROM SYSCAT.COLAUTH \r\n　　UNION \r\n　　SELECT DISTINCT GRANTEE, GRANTEETYPE, \'SCHEMA \' FROM SYSCAT.SCHEMAAUTH \r\n　　UNION \r\n　　SELECT DISTINCT GRANTEE, GRANTEETYPE, \'SERVER \' FROM SYSCAT.PASSTHRUAUTH \r\n　　ORDER BY GRANTEE, GRANTEETYPE, 3\r\n#创建含identity值(即自动生成的ID)的表\r\ncreate table test2 ( name char(20) not null, age integer not null, number integer not null GENERATED ALWAYS AS IDENTITY (START WITH 500, INCREMENT BY 1)); \r\n#BEFORE CREATE DATABASE\r\ndb2set DB2CODEPAGE -null\r\n\r\ndb2 connect to boc user boc using boc\r\nlist applications for db boc show detail\r\ndb2 get snapshot for locks on boc\r\nlock table L_G_dksqdj in share mode\r\n \r\n\r\n^B^×^Adb2 get monitor switches\r\ndb2 update monitor switches STATEMENT on\r\nset -o vi\r\ndb2 update monitor switches using STATEMENT on\r\ndb2 update monitor switches using SORT on\r\ndb2 update monitor switches using BUFFERPOOL on\r\ndb2 reset monitor\r\ndb2 \\?\r\ndb2 RESET MONITOR\r\ndb2 \\? RESET MONITOR\r\ndb2 RESET MONITOR for tzcbmis\r\ndb2 RESET MONITOR for database tzcbmis\r\ndb2 \\? get snapshot\r\ndb2 get snapshot bufferpools\r\ndb2 get snapshot for bufferpools\r\ndb2 get snapshot for bufferpools on tzcbmis\r\ndb2 RESET MONITOR for tzcbmis\r\ndb2 RESET MONITOR for database tzcbmis\r\ndb2 get snapshot for application on tzcbmis\r\ndb2 get snapshot for all application\r\ndb2 get snapshot for application\r\ndb2 get snapshot for applications\r\ndb2 get snapshot for tables on dbnm\r\ndb2 get snapshot for all on dbnm\r\ndb2 update monitor switches using STATEMENT on\r\n \r\n\r\n对表进行任何操作都不被允许，提示SQLSTATE=57016 SQLCODE=-668 ，原因码 \"7\"的错误：SQL0668N Operation not allowed for reason code \"7\" on table XXX.\r\n首先查一下:\r\ndb2 ? 57016\r\nSQLSTATE 57016: 因为表不活动，所以不能对其进行访问。\r\n解决方法为：执行命令：reorg table XXX；即可。\r\n\r\nrunstats on table administrator.test;\r\nreorg table administrator.test;\r\n\r\nDB2事务隔离级别\r\n1、 RR 可重复读\r\n在SQL执行期间，所有执行些语句扫描过的纪录都会被加上相应的锁，它保证了SQL语句在看到数据之前，所有返回数据都保持不变\r\n2、 RS 读稳定性\r\n些隔离级别下，会锁定所有符合条件的记录\r\n3、 CS 游标稳定性\r\n只锁定游标所在位置以下的行，担是，如果改变了某一行数据，则挂起锁定该行，直到数据库落实\r\n4、 UR 未落实的读\r\n此级别允许访问其他事务未落实的更改，除非其他事务尝试删除或改变表\r\n例子\r\nselect * from db2uat.test for read only with ur\r\nselect * from db2uat.test with ur\r\n\r\n修改OS中 文件型内存占比\r\nvmo -o maxclient%=20\r\nvmo -o maxperm%=20\r\nsvmon -G\r\nvmo -o strict_maxperm=1\r\nSELECT BPNAME FROM SYSCAT.BUFFERPOOLS\r\nCREATE BUFFERPOOL <buffer pool name> PAGESIZE 4096\r\ndb2 list tablespace containers for 6 -- 其中6为表空间标识 用 db2 list tablespace可以看到\r\nselect * from sysibmadm.snapappl\r\ndb2diag -rc 0xFFFF889 --可以看db2dialog.log文件中的ZRC错误码\r\ndb2pd -agents -db sample --查看所有agent （pid client进程之间的关系）\r\ndb2pd -edu --查看edu线程\r\ndb2mtrk -i -d -v --查看DB2内存情况\r\n\r\ndb2 list applications --看当前联链的应用 apphandl=48\r\ndb2pd -db sample -app 48 --看apphandl=48 程序详细情况 查L-AnchID的值 233\r\ndb2pd -db sample -dyn 查看AnchID为233的SQL(用grep过滤) , 上述步骤可以倒序执行：\r\n首先找到文件对应的表，然后db2pd -db dbname –dyn找到操作这个表的sql，通过AnchID在db2pd -app -db dbname 找到AppHandl，通过db2pd -agent就可以找到agent\r\n\r\ndb2pd -db sample -tcbstats 可以查出进行过全表查询的表，和查询次数\r\n\r\nsqlcode：-805 sqlstate：51002 程序没有释放Statemt、 result会导致\r\n/home/db2inst1/sqllib/db2dump/db2diag.log\r\n\r\nINTRA_PARALLEL参数：\r\n该参数指定数据库管理器是否可以使用内部分区并行性(intra-partition parallelism)。默认值 NO 对于并发连接较多的情况(主要是OLTP)最好，而 YES 对于并发连接较少的情况以及复杂 SQL (OLAP/DSS)来说最好。混合的工作负载通常可以得益于NO。\r\n当启用该参数时，就会导致从共享内存中分配排序内存。此外，如果并发程度显著增加，那么还可能导致过多的系统开销。如果系统是非OLTP的，则CPU数与分区数的比例是 4:1，而CPU负载运行的平均百分比是50%，INTRA_PARA LLEL很可能会提高性能\r\n\r\ndb2 -v get snapshot for dbm\r\n\r\ndb2的log file是否可以创建在raw设备上？\r\nIt\'s possible, but as of DB2 V9.1, the use of raw devices for database logging is deprecated. As an alternative to using raw logs, you can use either direct input/output (DIO) or concurrent input/output (CIO).\r\nCheck registry variable DB2_LOGGER_NON_BUFFERED_IO.\r\nDB2? database products support the use of non-buffered I/O (also known as Direct I/O or DIO) when managing database recovery logs on AIX? JFS and JFS2 file systems. To disable file system caching for the file system that contains the database recovery logs, specify the AIX dio or cio (Concurrent I/O) mount options.\r\nNote: Do not use the dio or cio mount options on file systems that contain other DB2 files or directories, such as the sqllib directory.\r\nIf the file system will also contain non-DB2 files, consult your operating system documentation before disabling file system caching. Some AIX operating systems have requirements such as serialization of read and write access. DB2 database manager adheres to these requirements.\r\nTo configure database logging without file system caching:\r\n1.Mount the file system, specifying the AIX dio or cio mount options. \r\nConcurrent I/O (CIO) is an enhanced version of Direct I/O and is supported only on JFS2 file systems. Consult your operating system documentation for more information.\r\n2.Create a directory on the file system for the database recovery logs. For example: \r\nmkdir /new_filesystem/db2logs where new_filesystem is the mount point for the file system.\r\n3.Update the database log path. For example: \r\ndb2 update db cfg for sample using newlogpath /new_filesystem/db2logswhere SAMPLE is the database name. The new setting does not become the value for the logpath database configuration parameter until both of the following occur: \r\n?The database is in a consistent state, as indicated by the database_consistent database configuration parameter. \r\n?All users are disconnected from the database.\r\nThis configuration eliminates any overhead incurred by the operating system as a result of caching database recovery logs. However, the lack of file caching might degrade the performance of log archiving and rollback operations. This performance degradation can be addressed by ensuring that you use an appropriate number of disk spindles and by tuning the log buffer size database configuration parameter (logbufsz).\r\nDB2 database products also support non-buffered I/O for table spaces. Refer to Creating table spaces without file system caching\r\n--------------------------------------\r\ngrant某个schema下所有表的select权限\r\n如何给一个用户grant某个schema下所有表的select权限？\r\n可以用下面语句建立一个批处理文件：\r\nselect \'grant select on \'||rtrim(tabschema)||\'.\'||tabname||\' to user xlhe ;\' from syscat.tables where type=\'T\' and tabschema =\'某个shcema名称\'\r\n---------------------\r\n\r\nDB2日志是以文件的形式存放在文件系统中，分为两种模式：循环日志和归档日志。当创建新数据库时，日志的缺省模式是循环日志。在这种模式下，只能实现数据库的脱机备份和恢复。如果要实现联机备份和恢复，必须设为归档日志模式。在 DB2 UDB 中，脱机备份也是最简单的备份。脱机备份要求采取完全数据库备份，显然，在备份的过程中，数据库是脱机的。换言之，当执行脱机备份时，用户无法访问数据库。如果您正在使用循环日志记录，脱机备份是惟一受支持的备份类型。当首先创建一个数据库的时候，这是默认的日志记录方法。对于循环日志记录，log retain for recovery status 和 user exit for logging status 都被设为 NO。LOGRETAIN 和 USEREXIT 两个参数都被设为 OFF。\r\n目前在综合业务系统中，设置的均是归档日志模式；其它系统（如事后监督、经营决策、中间业务等）一般都设置为循环日志模式。至于采用何种模式，可以通过修改数据库配置参数（LOGRETAIN）来实现： 归档日志模式：db2 update db cfg for using logretain on 注：改为on后，查看数据库配置参数logretain的值时，实际显示的是recovery。改变此参数后，再次连接数据库会显示数据库处于备份暂挂（BACKUP PENDING）状态。这时，需要做一次对数据库的脱机备份（db2 backup db ），才能使数据库状态变为正常。\r\n \r\n----------------\r\n创建死锁事件监控器\r\ndb2 \"create event monitor dlockevm for deadlocks with details history write to file \'/home/cmsinst/deadlocks\'\"\r\ndb2 set event monitor dlockevm state=1\r\n查看事件输出\r\ndb2evmon -db cmsdb -evm dlockevm\r\n关闭并输出结果至文件\r\ndb2 flush event monitor dlockevm\r\ndb2 set event monitor dlockevm state=0\r\ndb2evmon -path /home/cmsinst/deadlocks > deadlock.txt\r\n删除监控器\r\ndb2 \"drop event monitor dlockevm\"\r\n-----------------\r\n当处理程序逻辑为对同一张表 select - update - select 时，有可能在并发操作时出现死锁，若该逻辑在循环中，则出现死锁的概率更大。\r\n\r\n树型数据查询\r\nwith T(usr_id,usr_super) as (select usr_id,usr_super from s_usr where usr_id=\'xxx\'\r\nunion all select s.usr_id,s.usr_super from s_usr S,T where s.usr_super=t.usr_id )\r\nselect usr_id,usr_super from T;\r\n\r\n当查询多条数据1000+时返回列数50+过多时性能会急剧下降\r\n\r\nLOB INLINE 方式可以将较小的LOB数据与普通数据存放在一起，因此可以用BUFFERPOOL，可以被压缩\r\ncreate table xxxt ( yyycoln clob inline length 1000 ); -- 小于1000的大数据，将与普通数据共同存储\r\n由于BLOB没有字符转换，因此推荐用BLOB\r\n复合索引中的第一个字段的数据区分度对索引性能影响大，区分度高的尽量放在第一个字段\r\nINSERT时慢，发生在PCTFREE较高且行记录较大时，频繁地寻找新空闲数据块，对于批量INSERT可以将表的参数设置APPEND ON，在INSERT结束时再改回APPEND OFF。\r\nUPDATE时慢，可以调整表的PCTFREE参数，防止出现行的溢出\r\n对于DISTINCT、ORDER BY、MAX也需要建索引\r\n \r\n--删除某个schema下所有的表\r\nselect \'DROP TABLE \' || tabname ||\' ;\' from syscat.tables where tabschema=\'tabschema\'\r\n \r\n \r\n \r\n \r\nSQLCODE: -443, SQLSTATE: 38553\r\n解决方法：\r\n打开db2命令行，切换到本机db2的/bnd”目录下，\r\n1、db2 connect to 数据库名 user 用户名 using 密码\r\n2、执行db2 bind db2schema.bnd blocking all grant public\r\n \r\nDB2 rbind报错处理\r\nExplicitly rebind packages by performing the below commands.\r\n\r\ndb2 connect to SAMPLE\r\n\r\ndb2 -x \"select \'REBIND PACKAGE \' || rtrim(pkgschema) || \'.\' || rtrim(pkgname) || \';\' as command from syscat.packages\" > rebind.sql\r\n\r\ndb2 -tvf rebind.sql\r\n \r\n如果显示需要先绑定NULLID.***  请先执行 REBIND PACKAGENULLID.***\r\n \r\n \r\n \r\n \r\n','#学习#',2,NULL,5,'yc','2019-03-09',NULL,NULL,'DB2常见命令',NULL,NULL,NULL,NULL,NULL),(89,'老干部','','','Oracle数据库常用操作','images/7.jpg','登录oracle数据库\r\nsqlplus / as sysdba\r\n创建用户\r\ncreate user username identified by password;\r\n给用户赋dba权限\r\ngrant dba to username;\r\n \r\n创建表空间TBS_CIIS2ND_DATA\r\n\r\n\r\n1\r\ncreatetablespaceTBS_CIIS2ND_DATAdatafile\'D:\\app\\thinkpad\\oradata\\cmis\\TBS_CIIS2ND_DATA.DBF\'size256Mautoextendonnext100M\r\n \r\n使用exp导出dmp文件\r\nexp username/password@orcl file=/home/user/orcl-exp.dmp log=/home/user/orcl-exp.log owner=username\r\n使用imp导入dmp文件\r\nimp username/password file=/home/user/orcl-exp.dmp touser=username full=y ignore=y;\r\n \r\n查看oracle directory目录\r\nselect * from dba_directories;\r\n \r\n用expdp导出数据\r\n1)导出用户\r\nexpdp scott/tiger@orcl schemas=scott dumpfile=expdp.dmp directory=dump_dir;\r\n2)导出表\r\nexpdp scott/tiger@orcl tables=emp,dept dumpfile=expdp.dmp directory=dump_dir;\r\n3)按查询条件导\r\nexpdp scott/tiger@orcl directory=dump_dir dumpfile=expdp.dmp tables=empquery=\'where deptno=20\';\r\n4)按表空间导\r\nexpdp system/manager@orcl directory=dump_dir dumpfile=tablespace.dmptablespaces=temp,example;\r\n5)导整个数据库\r\nexpdp system/manager@orcl directory=dump_dir dumpfile=full.dmp full=y;\r\n \r\n用impdp导入数据\r\n1)导入用户（从用户scott导入到用户scott）\r\nimpdp scott/tiger@orcl directory=dump_dir dumpfile=expdp.dmp schemas=scott;\r\n2)导入表（从scott用户中把表dept和emp导入到system用户中）\r\nimpdp system/manager@orcl directory=dump_dir dumpfile=expdp.dmptables=scott.dept,scott.emp remap_schema=scott:system;\r\n3)导入表空间\r\nimpdp system/manager@orcl directory=dump_dir dumpfile=tablespace.dmp tablespaces=example;\r\n4)导入数据库\r\nimpdb system/manager@orcl directory=dump_dir dumpfile=full.dmp full=y;\r\n5)追加数据\r\nimpdp system/manager@orcl directory=dump_dir dumpfile=expdp.dmp schemas=systemtable_exists_action','#分布式#',2,NULL,4,'yc','2019-03-09',NULL,NULL,'Oracle数据库常用操作',NULL,NULL,NULL,NULL,NULL),(90,'老干部','','','你的微服务敢独立交付么？ ','images/3.jpg','最近经常在项目或是社区里听到大家谈论微服务架构，但谈论的焦点更多集中在微服务拆分，分布式架构，微服务门槛，DevOps配套设施等话题上。\r\n\r\n但是在我眼里，真正能称之为微服务架构的少之又少。原因也很简单，我所见到的很多所谓的微服务架构项目，大多都没有做到微服务架构的一个基本要求：服务的独立部署（交付）。\r\n\r\n这里的独立部署和自动化部署还不是一个概念，服务的自动化部署相对简单，已有大量的工具可以帮助我们做到。但是这里所谈的独立部署，我认为关键和难点并不在于“部署”，而在于“独立”。\r\n\r\n如果失去了服务独立部署（交付）的能力，一个微服务架构的威力将大打折扣，我们的系统虽然在物理上被拆分成了多个小的服务，但是如果从最终交付的角度来看，仍然是以一个整体存在的，就像单体应用一样，存在诸多的问题。\r\n为什么服务的独立交付并不简单？\r\n\r\n那为什么不能让每一个服务都独立部署到产品环境呢？问题的答案是：不是不能，而是不敢！\r\n\r\n为了表达清楚，让我们来看个例子吧。\r\n\r\n像下图一样，我现在就是那个程序员帅哥（本色出演），突然有一天心血来潮，动手开发了一个网上商城。代码Push到Github并通过CI构建持续交付流水线，最终自动化部署到云端产品环境，供用户访问使用。\r\n\r\n随着用户和访问量的增加，需求和功能也越来越多，系统也变得越发复杂。\r\n\r\n从网上了解到最近有个叫微服务的架构非常火爆，我也赶了回时髦，当然也觉得这种架构确实可以帮助我解决现在的一些问题。\r\n\r\n经过对系统的分析，我将商城的后台部分拆分出了3个服务，为了简单我们就称之为ABC三个服务。\r\n\r\n\r\n我们假设一个比较极端的情况，三个服务相互调用（先不考虑这样是否合理），每个服务通过自己的持续交付流水线独立部署到产品环境。当前产品环境的各个服务的版本是：A：1.0、B：2.0、C：3.0\r\n\r\n一切都非常完美是不是？看！我们已经做到了服务的独立部署！So easy~\r\n\r\n当然，事情肯定不会那么简单。\r\n\r\n问题出现在当我对A服务做了一次新的提交之后，A服务的最新版本升级到了1.1。不幸的是，这个新的版本意外的破坏了A与B之间的契约，错误的调用了B的接口，导致出现了错误。\r\n\r\n虽然我的A服务和B服务都有比较完备的UT（单元测试），但因为UT无法发现服务之间的集成是否被破坏，所以只有UT作为质量保障的A服务持续交付流水线也自然没有能力发现AB服务集成被破坏的这个问题。最终导致存在问题的A1.1版本被部署到了产品环境，产品环境出现了严重的Bug。\r\n\r\n请问在座的同学，碰到这样的情况，你会如何处理？\r\n\r\n“加集成测试啊！”\r\n\r\n这位同学说的极是，我这么聪明自然也想到了这一点，不就是要测集成吗？UT干不了就加集成测试不就成了。\r\n\r\n为了统一语言，毕竟对于各种测试的叫法太容易引起混淆，参考Martin Fowler在《微服务测试策略》中的定义，我们在本文中将这种测试多服务集成的测试统一称作端到端测试（End-to-End tests，简称E2E测试）。\r\n\r\n添加了E2E测试之后，我的交付流水线就变成了下面这个样子。\r\n\r\n因为有了E2E测试的存在，问题迎刃而解，当A服务的新版本破坏了与B服务的集成时，E2E测试就会及时诊断出来，并阻止A服务的最新版本向产品环境流动，保证产品环境不被破坏。\r\n\r\n这样看似没有什么问题，通过添加E2E测试，解决了服务间集成的验证问题，但在不知不觉中，我们也失去了微服务架构的那个重要的特性：“服务的独立交付”。\r\n\r\n怎么讲？别急，我们再往下看。\r\n\r\n假设A服务的修复过程中，B和C服务也提交了新的代码，我们假设这两个提交是没有问题的，但因为A服务的1.1版本导致E2E测试挂掉的问题还没有被修复，所以B和C的新版本也被E2E测试拦了下来，此时的E2E测试就像是一个亮起红灯的路口，阻塞了所有服务通往产品环境的通道。\r\n\r\n所以说，随着集中E2E测试的添加，质量被保障的同时，我们的“微服务架构”也已悄然失去了服务独立交付的能力，杀敌一千自损八百，损失惨重！\r\n\r\n这并不是我假想的场景，在我自己经历的几个真实项目中，这个问题都在一直困扰着我们。带来了各种各样的衍生问题，例如E2E测试长时间失败，无人修复，修复难度大，服务交付堵塞，为了保持交付通路畅通还不得不引入同样存在很大副作用的CodeFrezze机制和提交Token机制等。\r\n\r\n可以看到，虽然我们能够在代码库，在部署结构上，甚至在组织上进行服务化拆分，但就因为这最后一个交付的十里路口，最后这一个红绿灯，让所有的服务又纠缠在了一起，所有的服务化拆分形同虚设，最终我们得到的也只是一个看起来像微服务架构的单体应用而已。\r\n拆除红绿灯，各行其道，收复失地！\r\n\r\n那，如何才能将这个“红绿灯”拆除，让服务可以在有质量保障的前提下还可以做到独立交付呢？这就是本文要解决的问题，让我们继续往下看。\r\n\r\n我的解决方法其实也很简单：Inline E2E tests。\r\n\r\n即并不添加新的集中的Pipeline做E2E测试，而是为每一个服务的Pipeline都添加一个相同的E2E测试的Stage，就相当于将E2E测试Inline到每个服务各自的部署流水线中，如下图所示。\r\n\r\n其实Inline E2E测试还不是最关键的，最关键的变化点就是假设A服务有了新的提交，运行到A服务自己Pipeline的E2E测试的时候，此时的E2E测试并不是像之前一样获取B和C服务的最新代码库版本做集成验证，而获取当前产品环境上的B和C服务的已部署当前版本做集成验证。\r\n\r\n例如，如图所示A服务的版本从1.0升级到了1.1，当前产品环境的B和C的版本是2.0和3.0。在执行A服务Pipeline上的E2E测试时，验证出A1.1和B2.0集成存在问题，测试变红，Pipeline挂掉，从而阻断了A服务的1.1版本部署到产品环境，保证了产品环境不会被A的1.1版本破坏。\r\n\r\n同样，假设A还没有被修复之前，B也有了新的提交，产生了一个新的版本B2.1，这时在B服务Pipeline上的E2E测试并不获取当前A服务的代码库最新版本1.1做集成测试，而是获取产品环境上的当前版本A1.0版本做集成测试。我们假设B2.1和A1.0之间的集成没有问题，测试通过，所以B的2.1版本就被成功的交付到了产品环境，而此时产品环境的A服务的版本仍是1.0。\r\n\r\n看！服务之间的阻塞被神奇的解决了，服务再也不会被堵在一个统一的十字路口，而是各行其道，A的车道出了事故，是A的问题，应该由A来承担后果和解决问题，不应该影响到其他服务，其他服务依然可以持续的交付到产品环境。\r\n向前看是持续集成，向后看是持续交付！\r\n\r\n看到这里可能有些小伙伴会感到有些失望。咋呼半天，不就是将E2E测试整到每个服务的Pipeline里，再把获取版本从最新代码改成产品环境么？有啥厉害的。\r\n\r\n但是，在我看来，这个看似简单的变化，意义却是重大的：它揭示了“持续集成”和“持续交付”的一个主要区别。\r\n\r\n“持续集成”和”持续交付”，这两个概念相信大家一定都不陌生，在软件领域也被提了不少年头了，不算什么新概念新技术。但对于这两个概念，我们经常一起提及，也经常混淆，搞不清楚两者的区别到底是什么，可能认为持续交付只不过是持续集成的演进版，新瓶装旧酒而已。\r\n\r\n但其实它们却有着本质的区别。\r\n\r\n“持续集成”关注的是各个集成单元之前最新版本的集成问题，即是不是某个集成单元的最新版本破坏了系统整体的集成，我管这种视角叫：向“前”看。\r\n\r\n而“持续交付”关注的应该不是集成单元最新版本之间的集成问题，而是某个集成单元的最新版本是否可以（能和敢）部署到产品环境。换句话说就是维持产品环境的其他服务不变，只将当前集成单元的最新版本部署到产品环境，产品是否依然可用，不被破坏。所以在“持续交付”的视角下，应该关注的是当前集成单元与产品环境上的其他服务的版本是否兼容，我管这种视角叫：向“后”看。\r\n\r\n向前看是持续集成，向后看才是持续交付，如果前后都不看那就是在裸奔。\r\n\r\n但是肯定早有同学在心里疑惑，将E2E测试下放到每一个服务自己的Pipeline中，靠谱么？是不是太重了？根据测试金字塔，E2E测试应该是属于靠近金字塔顶端的测试种类，无论从数量和覆盖范围应该也都不会太多，怎么能靠它来保障服务之间的所有集成点和契约呢？\r\n主角登场-契约测试\r\n\r\n细心的同学肯定已经发现上面最后一张图中，我已经悄悄的把E2E测试变为了CT，即Contract Test，契约测试。\r\n\r\n契约测试也是这两年伴随微服务架构的兴起，经常被提及的一种比较新的测试类型。在测试金字塔中，他的位置介于E2E和Component Tests（可以理解成单个服务的API测试）之间。\r\n\r\n简单的理解，契约测试就是一种可以用类似于单元测试的技术验证两两服务之间集成的测试技术。它相比于更低层次的单元测试的优势是可以测集成（两两服务之间），相比于更高层次的E2E测试的优势是实现方式上又类似于单元测试，更轻量，跑的更快，覆盖的范围也自然可以更广更细。\r\n\r\n使用契约测试替换掉E2E测试之后，整个架构也会变得更复杂一些，目前契约测试的框架也有很多，如大家常常提到的Pact或是SpringContracts等等。这里我先以Pact为例予以说明，其他框架实现上可能有些差别，但是思路是一致的。\r\n\r\nA服务调用B服务的一个API，我们就称为A和B之间存在了一个契约，即B应该按照这个契约提供一个满足契约要求的API，而A也应该按照这个契约约定的方式来调用B的这个API。在这个过程中A作为调用方，我们称之为Consumer端。B作为被调用方，我们称之为Provider端。\r\n\r\n如果A和B都履行契约，按照契约定义的约定调用和被调用，我们就可以认为集成不会有问题。但无论是B擅自修改了API破坏了契约，还是A擅自修改了调用API的方式破坏了契约，都会导致契约被破坏，反应到测试上就是契约测试会失败，反应到产品上就是功能被破坏，出现Bug。\r\n\r\n每个契约，例如A->B，都会有Consumer端和Provider端生成的两个产出物：分别是a-b.consumer.json.1.1(由Consumer端生成的契约文件，所以版本也是Consumer端A的版本号)和a-b.provider.jar.2.0（由Provider端生成的契约验证测试包，他由Provider端生成，所以版本是B的版本）。这个jar包其实就是一组测试，他的输入是a-b.consumer.json，产出则是测试的结果，也就是契约的验证结果：成功或是失败。\r\n\r\n可以把A服务产出的契约文件a-b.consumer.json.1.1想象成一把钥匙，把B服务产出的Provider端的测试a-b.provider.jar.2.0想象成一把锁。那契约测试的执行过程就像是用这把钥匙试着去打开这把锁：如果可以打开，我们认为这A1.1->B2.0的契约是满足的，反之契约就是被破坏了。\r\n\r\n值得注意的一点就是，契约测试不像E2E测试，它是有方向的，所以我们看到a-b和b-a是两个不同的契约。\r\n\r\n所以，只有当A1.1->B2.0和B2.0->A1.1双向的契约都被验证通过后，我们才能认为A1.1版本和B2.0版本的集成是没有问题的。\r\n用契约测试替换E2E测试\r\n\r\n回到前面的例子上，假设我们已经构建了ABC三个服务两两之间的契约测试。此时，A服务有了新的提交升级到了1.1版本，那我们如何才能通过契约测试来验证A1.1版本能否交付到产品环境呢？\r\n\r\n答案就是只要通过A的1.1版本的最新代码，生成所有A作为Consumer端的契约文件（a-b.consumer.json.1.1和a-c.consumer.json.1.1），用这两把“钥匙”去试着开（作为输入执行Provider端测试）产品环境对应的两把“锁”（a-b.provider.jar.2.0和a-c.provider.jar.3.0）。\r\n\r\n如果都可以打开（测试通过）的话，就证明A的新版本1.1作为Consumer端与产品环境的B和C服务是兼容的。\r\n\r\n等等，别着急，还没完……\r\n\r\n因为我们还需要考虑A作为Provider的情况，做法还是通过A的1.1版本的最新代码生成A版本作为Provider端的契约测试（b-a.provider.jar.1.1和c-a.provider.jar.1.1），拿着这两把“新锁”，然后试着用产品环境上的两把“钥匙”（b-a.consumer.json.2.0和c-a.consumer.json3.0）去开。\r\n\r\n如果也都可以打开（测试通过）的话，就证明A的新版本1.1作为Provider端与产品环境的B和C服务也是兼容的。\r\n\r\n至此，当验证了A的新版本1.1无论是作为调用端还是被调用端都与产品环境上的其他服务契约满足后，我们就认为A1.1与B2.0和C3.0集成是没有问题的，也就代表A1.1可以被放心地部署到产品环境中，替代现在的1.0版本。\r\n最后，敲黑板划重点\r\n\r\n    微服务架构下的独立部署（交付）很重要，但往往容易被忽视，没有被引起足够重视。\r\n    为了实现微服务的独立持续交付，我们要向“后”看，不要向“前”看，即关注当前变更服务与部署环境中其他服务的兼容性而不是关注当前变更服务与其他服务最新版本的兼容性。\r\n    用契约测试来替代E2E测试，降低测试成本，提高测试覆盖，尽早测试。并通过不断地完善契约管理，保障微服务架构质量和避免微服务架构腐化僵化。\r\n','#微服务#/#cloud#/#架构师#/#部署#',3,NULL,3,'yc','2019-03-09',NULL,NULL,'最近经常在项目或是社区里听到大家谈论微服务架构，但谈论的焦点更多集中在微服务拆分，分布式架构，微服务门槛，DevOps配套设施等话题上。\r\n\r\n但是在我眼里，真正能称之为微服务架构的少之又少。原因也很简单，我所见到的很多所谓的微服务架构项目，大多都没有做到微服务架构的一个基本要求：服务的独立部署（交付）。',NULL,NULL,NULL,NULL,NULL),(91,'老干部','','','使用Consul做服务发现的若干姿势 ','images/7.jpg','从2016年起就开始接触Consul，使用的主要目的就是做服务发现，后来逐步应用于生产环境，并总结了少许使用经验。最开始使用Consul的人不多，为了方便交流创建了一个QQ群（群号在最后），这两年微服务越来越火，使用Consul的人也越来越多，目前群里已有400多人，经常有人问一些问题，比如：\r\n\r\n    服务注册到节点后，其他节点为什么没有同步？\r\n    Client是干什么的？（Client有什么作用？）\r\n    能不能直接注册到Server？（是否只有Server节点就够了？）\r\n    服务信息是保存在哪里的？\r\n    如果节点挂了健康检查能不能转移到别的节点？\r\n\r\n有些人可能对服务注册和发现还没有概念，有些人可能使用过其它服务发现的工具，比如zookeeper，etcd，会有一些先入为主的经验。这篇文章将结合Consul的官方文档和自己的实际经验，谈一下Consul做服务发现的方式，文中尽量不依赖具体的框架和开发语言，从原理上进行说明，希望能够讲清楚上边的几个问题。\r\n为什么使用服务发现\r\n\r\n防止硬编码、容灾、水平扩缩容、提高运维效率等等，只要你想使用服务发现总能找到合适的理由。\r\n\r\n一般的说法是因为使用微服务架构。传统的单体架构不够灵活不能很好的适应变化，从而向微服务架构进行转换，而伴随着大量服务的出现，管理运维十分不便，于是开始搞一些自动化的策略，服务发现应运而生。所以如果需要使用服务发现，你应该有一些对服务治理的痛点。\r\n\r\n但是引入服务发现就可能引入一些技术栈，增加系统总体的复杂度，如果你只有很少的几个服务，比如10个以下，并且业务不怎么变化，吞吐量预计也很稳定，可能就没有必要使用服务发现。\r\nConsul内部原理\r\n\r\n下面这张图来源于Consul官网，很好的解释了Consul的工作原理，先大致看一下。\r\n\r\n首先Consul支持多数据中心，在上图中有两个DataCenter，他们通过Internet互联，同时请注意为了提高通信效率，只有Server节点才加入跨数据中心的通信。\r\n\r\n在单个数据中心中，Consul分为Client和Server两种节点（所有的节点也被称为Agent），Server节点保存数据，Client负责健康检查及转发数据请求到Server；Server节点有一个Leader和多个Follower，Leader节点会将数据同步到Follower，Server的数量推荐是3个或者5个，在Leader挂掉的时候会启动选举机制产生一个新的Leader。\r\n\r\n集群内的Consul节点通过gossip协议（流言协议）维护成员关系，也就是说某个节点了解集群内现在还有哪些节点，这些节点是Client还是Server。单个数据中心的流言协议同时使用TCP和UDP通信，并且都使用8301端口。跨数据中心的流言协议也同时使用TCP和UDP通信，端口使用8302。\r\n\r\n集群内数据的读写请求既可以直接发到Server，也可以通过Client使用RPC转发到Server，请求最终会到达Leader节点，在允许数据轻微陈旧的情况下，读请求也可以在普通的Server节点完成，集群内数据的读写和复制都是通过TCP的8300端口完成。\r\nConsul服务发现原理\r\n\r\n下面这张图是自己画的，基本描述了服务发现的完整流程，先大致看一下。\r\n\r\n首先需要有一个正常的Consul集群，有Server，有Leader。这里在服务器Server1、Server2、Server3上分别部署了Consul Server，假设他们选举了Server2上的Consul Server节点为Leader。这些服务器上最好只部署Consul程序，以尽量维护Consul Server的稳定。\r\n\r\n然后在服务器Server4和Server5上通过Consul Client分别注册Service A、B、C，这里每个Service分别部署在了两个服务器上，这样可以避免Service的单点问题。服务注册到Consul可以通过HTTP API（8500端口）的方式，也可以通过Consul配置文件的方式。Consul Client可以认为是无状态的，它将注册信息通过RPC转发到Consul Server，服务信息保存在Server的各个节点中，并且通过Raft实现了强一致性。\r\n\r\n最后在服务器Server6中Program D需要访问Service B，这时候Program D首先访问本机Consul Client提供的HTTP API，本机Client会将请求转发到Consul Server，Consul Server查询到Service B当前的信息返回，最终Program D拿到了Service B的所有部署的IP和端口，然后就可以选择Service B的其中一个部署并向其发起请求了。如果服务发现采用的是DNS方式，则Program D中直接使用Service B的服务发现域名，域名解析请求首先到达本机DNS代理，然后转发到本机Consul Client，本机Client会将请求转发到Consul Server，Consul Server查询到Service B当前的信息返回，最终Program D拿到了Service B的某个部署的IP和端口。\r\n\r\n图中描述的部署架构笔者认为是最普适最简单的方案，从某些默认配置或设计上看也是官方希望使用者采用的方案，比如8500端口默认监听127.0.0.1，当然有些同学不赞同，后边会提到其他方案。\r\nConsul实际使用\r\n\r\n为了更快的熟悉Consul的原理及其使用方式，最好还是自己实际测试下。\r\n\r\nConsul安装十分简单，但是在一台机器上不方便搭建集群进行测试，使用虚拟机比较重，所以这里选择了docker。这里用了Windows 10，需要是专业版，因为Windows上的Docker依赖Hyper-V，而这个需要专业版才能支持。这里对于Docker的使用不会做过多的描述，如果遇到相关问题请搜索一下。\r\n安装Docker\r\n\r\n通过这个地址下载安装：\r\n\r\nhttps://store.docker.com/editions/community/docker-ce-desktop-windows\r\n\r\n安装完成后打开 Windows PowerShell，输入docker –version，如果正常输出docker版本就可以了。\r\n启动Consul集群\r\n\r\n在 Windows PowerShell中执行命令拉取最新版本的Consul镜像：\r\n\r\ndocker pull consul\r\n\r\n然后就可以启动集群了，这里启动4个Consul Agent，3个Server（会选举出一个leader），1个Client。\r\n\r\n#启动第1个Server节点，集群要求要有3个Server，将容器8500端口映射到主机8900端口，同时开启管理界面\r\ndocker run -d --name=consul1 -p 8900:8500 -e CONSUL_BIND_INTERFACE=eth0 consul agent --server=true --bootstrap-expect=3 --client=0.0.0.0 -ui\r\n \r\n#启动第2个Server节点，并加入集群\r\ndocker run -d --name=consul2 -e CONSUL_BIND_INTERFACE=eth0 consul agent --server=true --client=0.0.0.0 --join 172.17.0.2\r\n \r\n#启动第3个Server节点，并加入集群\r\ndocker run -d --name=consul3 -e CONSUL_BIND_INTERFACE=eth0 consul agent --server=true --client=0.0.0.0 --join 172.17.0.2\r\n \r\n#启动第4个Client节点，并加入集群\r\ndocker run -d --name=consul4 -e CONSUL_BIND_INTERFACE=eth0 consul agent --server=false --client=0.0.0.0 --join 172.17.0.2\r\n\r\n第1个启动容器的IP一般是172.17.0.2，后边启动的几个容器IP会排着来：172.17.0.3、172.17.0.4、172.17.0.5。\r\n\r\n这些Consul节点在Docker的容器内是互通的，他们通过桥接的模式通信。但是如果主机要访问容器内的网络，需要做端口映射。在启动第一个容器时，将Consul的8500端口映射到了主机的8900端口，这样就可以方便的通过主机的浏览器查看集群信息。\r\n\r\n进入容器consul1：\r\n\r\ndocker exec -it consul1 /bin/sh\r\n \r\n#执行ls后可以看到consul就在根目录\r\nls\r\n\r\n输入exit可以跳出容器。\r\n服务注册\r\n\r\n自己写一个web服务，用最熟悉的开发语言就好了，不过需要在容器中能够跑起来，可能需要安装运行环境，比如python、java、.net core等的sdk及web服务器，需要注意的是Consul的docker镜像基于alpine系统，具体运行环境的安装请搜索一下。\r\n\r\n这里写了一个hello服务，通过配置文件的方式注册到Consul，服务的相关信息：\r\n\r\n    name：hello，服务名称，需要能够区分不同的业务服务，可以部署多份并使用相同的name注册。\r\n    id：hello1，服务id，在每个节点上需要唯一，如果有重复会被覆盖。\r\n    address：172.17.0.5，服务所在机器的地址。\r\n    port：5000，服务的端口。\r\n    健康检查地址：http://localhost:5000/，如果返回HTTP状态码为200就代表服务健康，每10秒Consul请求一次，请求超时时间为1秒。\r\n\r\n请将下面的内容保存成文件services.json，并上传到容器的/consul/config目录中。\r\n\r\n{\r\n  \"services\": [\r\n    {\r\n      \"id\": \"hello1\",\r\n      \"name\": \"hello\",\r\n      \"tags\": [\r\n        \"primary\"\r\n      ],\r\n      \"address\": \"172.17.0.5\",\r\n      \"port\": 5000,\r\n      \"checks\": [\r\n        {\r\n        \"http\": \"http://localhost:5000/\",\r\n        \"tls_skip_verify\": false,\r\n        \"method\": \"Get\",\r\n        \"interval\": \"10s\",\r\n        \"timeout\": \"1s\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n\r\n复制到consul config目录：\r\n\r\ndocker cp {这里请替换成services.json的本地路径} consul4:/consul/config\r\n\r\n重新加载consul配置：\r\n\r\nconsul reload\r\n\r\n然后这个服务就注册成功了。可以将这个服务部署到多个节点，比如部署到consul1和consul4，并同时运行。\r\n\r\n服务发现\r\n\r\n服务注册成功以后，调用方获取相应服务地址的过程就是服务发现。Consul提供了多种方式。\r\n\r\nHTTP API方式：\r\n\r\ncurl http://127.0.0.1:8500/v1/health/service/hello?passing=false\r\n\r\n返回的信息包括注册的Consul节点信息、服务信息及服务的健康检查信息。这里用了一个参数passing=false，会自动过滤掉不健康的服务，包括本身不健康的服务和不健康的Consul节点上的服务，从这个设计上可以看出Consul将服务的状态绑定到了节点的状态。\r\n\r\n如果服务有多个部署，会返回服务的多条信息，调用方需要决定使用哪个部署，常见的可以随机或者轮询。为了提高服务吞吐量，以及减轻Consul的压力，还可以缓存获取到的服务节点信息，不过要做好容错的方案，因为缓存服务部署可能会变得不可用。具体是否缓存需要结合自己的访问量及容错规则来确定。\r\n\r\n上边的参数passing默认为false，也就是说不健康的节点也会返回，结合获取节点全部服务的方法，这里可以做到获取全部服务的实时健康状态，并对不健康的服务进行报警处理。\r\n\r\nDNS方式：\r\n\r\nhello服务的域名是：hello.service.dc1.consul，后边的service代表服务，固定；dc1是数据中心的名字，可以配置；最后的consul也可以配置。\r\n\r\n官方在介绍DNS方式时经常使用dig命令进行测试，但是alpine系统中没有dig命令，也没有相关的包可以安装，但是有人实现了，下载下来解压到bin目录就可以了。\r\n\r\ncurl -L https://github.com/sequenceiq/docker-alpine-dig/releases/download/v9.10.2/dig.tgz\\|tar -xzv -C /usr/local/bin\r\n\r\n然后执行dig命令：\r\n\r\ndig @127.0.0.1 -p 8600 hello.service.dc1.consul. ANY\r\n\r\n如果报错：parse of /etc/resolv.conf failed ，请将resolv.conf中的search那行删掉。\r\n\r\n正常的话可以看到返回了服务部署的IP信息，如果有多个部署会看到多个，如果某个部署不健康了会自动剔除（包括部署所在节点不健康的情况）。需要注意这种方式不会返回服务的端口信息。\r\n\r\n使用DNS的方式可以在程序中集成一个DNS解析库，也可以自定义本地的DNS Server。自定义本地DNS Server是指将.consul域的请求全部转发到Consul Agent，Windows上有DNS Agent，Linux上有Dnsmasq；对于非Consul提供的服务则继续请求原DNS；使用DNS Server时Consul会随机返回具体服务的多个部署中的一个，仅能提供简单的负载均衡。\r\n\r\nDNS缓存问题：DNS缓存一般存在于应用程序的网络库、本地DNS客户端或者代理，Consul Sever本身可以认为是没有缓存的（为了提高集群DNS吞吐量，可以设置使用普通Server上的陈旧数据，但影响一般不大），DNS缓存可以减轻Consul Server的访问压力，但是也会导致访问到不可用的服务。使用时需要根据实际访问量和容错能力确定DNS缓存方案。\r\n\r\nConsul Template\r\n\r\nConsul Template是Consul官方提供的一个工具，严格的来说不是标准的服务发现方式。这个工具会通过Consul监听数据变化然后替换模板中使用的标签，并发布替换后的文件到指定的目录。在nginx等web服务器做反向代理和负载均衡时特别有用。\r\n\r\nConsul的docker镜像中没有集成这个工具，需要自己安装，比较简单：\r\n\r\ncurl -L https://releases.hashicorp.com/consul-template/0.19.5/consul-template_0.19.5_linux_amd64.tgz\\|tar -xzv -C /usr/local/bin\r\n\r\n然后创建一个文件：in.tpl，内容为：\r\n\r\n{{ range service \"hello\" }}\r\nserver {{ .Name }}{{ .Address }}:{{ .Port }}{{ end }}\r\n\r\n这个标签会遍历hello服务的所有部署，并按照指定的格式输出。在此文件目录下执行：\r\n\r\nnohup consul-template -template \"in.tpl:out.txt\" &\r\n\r\n现在你可以cat out.txt查看根据模板生产的内容，新增或者关闭服务，文件内容会自动更新。\r\n\r\n此工具我没有用在生产环境，详细使用请访问：https://github.com/hashicorp/consul-template\r\n节点和服务注销\r\n\r\n节点和服务的注销可以使用HTTP API:\r\n\r\n    注销任意节点和服务：/catalog/deregister\r\n    注销当前节点的服务：/agent/service/deregister/:service_id\r\n\r\n注意：\r\n\r\n如果注销的服务还在运行，则会再次同步到catalog中，因此应该只在agent不可用时才使用catalog的注销API。\r\n\r\n节点在宕机时状态会变为failed，默认情况下72小时后会被从集群移除。\r\n\r\n如果某个节点不继续使用了，也可以在本机使用consul leave命令，或者在其它节点使用consul force-leave 节点Id，则节点上的服务和健康检查全部注销。\r\nConsul的健康检查\r\n\r\nConsul做服务发现是专业的，健康检查是其中一项必不可少的功能，其提供Script/TCP/HTTP+Interval，以及TTL等多种方式。服务的健康检查由服务注册到的Agent来处理，这个Agent既可以是Client也可以是Server。\r\n\r\n很多同学都使用ZooKeeper或者etcd做服务发现，使用Consul时发现节点挂掉后服务的状态变为不可用了，所以有同学问服务为什么不在各个节点之间同步？这个根本原因是服务发现的实现原理不同。\r\n\r\nConsul与ZooKeeper、etcd的区别\r\n\r\n后边这两个工具是通过键值存储来实现服务的注册与发现。\r\n\r\n    ZooKeeper利用临时节点的机制，业务服务启动时创建临时节点，节点在服务就在，节点不存在服务就不存在。\r\n    etcd利用TTL机制，业务服务启动时创建键值对，定时更新ttl，ttl过期则服务不可用。\r\n\r\nZooKeeper和etcd的键值存储都是强一致性的，也就是说键值对会自动同步到多个节点，只要在某个节点上存在就可以认为对应的业务服务是可用的。\r\n\r\nConsul的数据同步也是强一致性的，服务的注册信息会在Server节点之间同步，相比ZK、etcd，服务的信息还是持久化保存的，即使服务部署不可用了，仍旧可以查询到这个服务部署。但是业务服务的可用状态是由注册到的Agent来维护的，Agent如果不能正常工作了，则无法确定服务的真实状态，并且Consul是相当稳定了，Agent挂掉的情况下大概率服务器的状态也可能是不好的，此时屏蔽掉此节点上的服务是合理的。Consul也确实是这样设计的，DNS接口会自动屏蔽挂掉节点上的服务，HTTP API也认为挂掉节点上的服务不是passing的。\r\n\r\n鉴于Consul健康检查的这种机制，同时避免单点故障，所有的业务服务应该部署多份，并注册到不同的Consul节点。部署多份可能会给你的设计带来一些挑战，因为调用方同时访问多个服务实例可能会由于会话不共享导致状态不一致，这个有许多成熟的解决方案，可以去查询，这里不做说明。\r\n\r\n健康检查能不能支持故障转移？\r\n\r\n上边提到健康检查是由服务注册到的Agent来处理的，那么如果这个Agent挂掉了，会不会有别的Agent来接管健康检查呢？答案是否定的。\r\n\r\n从问题产生的原因来看，在应用于生产环境之前，肯定需要对各种场景进行测试，没有问题才会上线，所以显而易见的问题可以屏蔽掉；如果是新版本Consul的BUG导致的，此时需要降级；如果这个BUG是偶发的，那么只需要将Consul重新拉起来就可以了，这样比较简单；如果是硬件、网络或者操作系统故障，那么节点上服务的可用性也很难保障，不需要别的Agent接管健康检查。\r\n\r\n从实现上看，选择哪个节点是个问题，这需要实时或准实时同步各个节点的负载状态，而且由于业务服务运行状态多变，即使当时选择出了负载比较轻松的节点，无法保证某个时段任务又变得繁重，可能造成新的更大范围的崩溃。如果原来的节点还要启动起来，那么接管的健康检查是否还要撤销，如果要，需要记录服务们最初注册的节点，然后有一个监听机制来触发，如果不要，通过服务发现就会获取到很多冗余的信息，并且随着时间推移，这种数据会越来越多，系统变的无序。\r\n\r\n从实际应用看，节点上的服务可能既要被发现，又要发现别的服务，如果节点挂掉了，仅提供被发现的功能实际上服务还是不可用的。当然发现别的服务也可以不使用本机节点，可以通过访问一个Nginx实现的若干Consul节点的负载均衡来实现，这无疑又引入了新的技术栈。\r\n\r\n如果不是上边提到的问题，或者你可以通过一些方式解决这些问题，健康检查接管的实现也必然是比较复杂的，因为分布式系统的状态同步是比较复杂的。同时不要忘了服务部署了多份，挂掉一个不应该影响系统的快速恢复，所以没必要去做这个接管。\r\nConsul的其它部署架构\r\n\r\n如果你实在不想在每个主机部署Consul Client，还有一个多路注册的方案可供选择，这是交流群中获得的思路。\r\n\r\n如图所示，在专门的服务器上部署Consul Client，然后每个服务都注册到多个Client，这里为了避免服务单点问题还是每个服务部署多份，需要服务发现时，程序向一个提供负载均衡的程序发起请求，该程序将请求转发到某个Consul Client。这种方案需要注意将Consul的8500端口绑定到私网IP上，默认只有127.0.0.1。\r\n\r\n这个架构的优势：\r\n\r\n    Consul节点服务器与应用服务器隔离，互相干扰少；\r\n    不用每台主机都部署Consul，方便Consul的集中管理；\r\n    某个Consul Client挂掉的情况下，注册到其上的服务仍有机会被访问到；\r\n\r\n但也需要注意其缺点：\r\n\r\n    引入更多技术栈：负载均衡的实现，不仅要考虑Consul Client的负载均衡，还要考虑负载均衡本身的单点问题。\r\n    Client的节点数量：单个Client如果注册的服务太多，负载较重，需要有个算法（比如hash一致）合理分配每个Client上的服务数量，以及确定Client的总体数量。\r\n    服务发现要过滤掉重复的注册，因为注册到了多个节点会认为是多个部署（DNS接口不会有这个问题）。\r\n\r\n这个方案其实还可以优化，服务发现使用的负载均衡可以直接代理Server节点，因为相关请求还是会转发到Server节点，不如直接就发到Server。\r\n\r\n是否可以只有Server？\r\n\r\n这个问题的答案还是有关服务数量的问题，首先Server的节点数量不是越多越好，3个或者5个是推荐的数量，数量越多数据同步的处理越慢（强一致性）；然后每个节点可以注册的服务数量是有上限的，这个受限于软硬件的处理能力。所以如果你的服务只有10个左右，只有Server问题是不大的，但是这时候有没有必要使用Consul呢？因此正常使用Consul的时候还是要有Client才好，这也符合Consul的反熵设计。\r\n\r\n大家可以将这个部署架构与前文提到的普适架构对比下，看看哪个更适合自己，或者你有更好的方案欢迎分享出来。','#产业结构#',2,NULL,3,'yc','2019-03-09',NULL,NULL,'从2016年起就开始接触Consul，使用的主要目的就是做服务发现，后来逐步应用于生产环境，并总结了少许使用经验。最开始使用Consul的人不多，为了方便交流创建了一个QQ群（群号在最后），这两年微服务越来越火，使用Consul的人也越来越多，目前群里已有400多人，经常有人问一些问题，比如：\r\n\r\n    服务注册到节点后，其他节点为什么没有同步？\r\n    Client是干什么的？（Client有什么作用？）\r\n    能不能直接注册到Server？（是否只有Server节点就够了？）\r\n    服务信息是保存在哪里的？\r\n    如果节点挂了健康检查能不能转移到别的节点？\r\n',NULL,NULL,NULL,NULL,NULL),(92,'老干部',' 翟永超','http://blog.didispace.com/spring-cloud-alibaba-version/','Spring Cloud Alibaba与Spring Boot、Spring Cloud之间不得不说的版本关系 ','images/7.jpg','这篇博文是临时增加出来的内容，主要是由于最近连载《Spring Cloud Alibaba基础教程》系列的时候，碰到读者咨询的大量问题中存在一个比较普遍的问题：版本的选择。其实这类问题，在之前写Spring Cloud基础教程的时候，就已经发过一篇《聊聊Spring Cloud版本的那些事儿》，来说明Spring Boot和Spring Cloud版本之间的关系。\r\nSpring Cloud Alibaba现阶段版本的特殊性\r\n\r\n现在的Spring Cloud Alibaba由于没有纳入到Spring Cloud的主版本管理中，所以我们需要自己去引入其版本信息，比如之前教程中的例子：\r\n\r\n<dependencyManagement>\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.cloud</groupId>\r\n            <artifactId>spring-cloud-dependencies</artifactId>\r\n            <version>Finchley.SR1</version>\r\n            <type>pom</type>\r\n            <scope>import</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.cloud</groupId>\r\n            <artifactId>spring-cloud-alibaba-dependencies</artifactId>\r\n            <version>0.2.1.RELEASE</version>\r\n            <type>pom</type>\r\n            <scope>import</scope>\r\n        </dependency>\r\n    </dependencies>\r\n</dependencyManagement>\r\n\r\n而不是像以往使用Spring Cloud的时候，直接引入Spring Cloud的主版本（Dalston、Edgware、Finchley、Greenwich这些）就可以的。我们需要像上面的例子那样，单独的引入spring-cloud-alibaba-dependencies来管理Spring Cloud Alibaba下的组件版本。\r\n\r\n由于Spring Cloud基于Spring Boot构建，而Spring Cloud Alibaba又基于Spring Cloud Common的规范实现，所以当我们使用Spring Cloud Alibaba来构建微服务应用的时候，需要知道这三者之间的版本关系。\r\n\r\n下表整理了目前Spring Cloud Alibaba的版本与Spring Boot、Spring Cloud版本的兼容关系：\r\nSpring Boot 	Spring Cloud 	Spring Cloud Alibaba\r\n2.1.x 	Greenwich 	0.2.2（还未RELEASE）\r\n2.0.x 	Finchley 	0.2.1\r\n1.5.x 	Edgware 	0.1.1\r\n1.5.x 	Dalston 	0.1.1\r\n\r\n所以，不论您是在读我的《Spring Boot基础教程》、《Spring Cloud基础教程》还是正在连载的《Spring Cloud Alibaba系列教程》。当您照着博子的顺序，一步步做下来，但是没有调试成功的时候，强烈建议检查一下，您使用的版本是否符合上表的关系。\r\n推荐：Spring Cloud Alibaba基础教程\r\n\r\n    《Spring Cloud Alibaba基础教程：使用Nacos实现服务注册与发现》\r\n    《Spring Cloud Alibaba基础教程：支持的几种服务消费方式》\r\n    《Spring Cloud Alibaba基础教程：使用Nacos作为配置中心》\r\n    《Spring Cloud Alibaba基础教程：Nacos配置的加载规则详解》\r\n    《Spring Cloud Alibaba基础教程：Nacos配置的多环境管理》\r\n    《Spring Cloud Alibaba基础教程：Nacos配置的多文件加载与共享配置》\r\n    《Spring Cloud Alibaba基础教程：Nacos的数据持久化》\r\n    《Spring Cloud Alibaba基础教程：Nacos的集群部署》\r\n\r\n该系列教程的代码示例：\r\n\r\n    Github：https://github.com/dyc87112/SpringCloud-Learning/\r\n    Gitee：https://gitee.com/didispace/SpringCloud-Learning/\r\n','',4,NULL,2,'zz','2019-03-09',NULL,NULL,'这篇博文是临时增加出来的内容，主要是由于最近连载《Spring Cloud Alibaba基础教程》系列的时候，碰到读者咨询的大量问题中存在一个比较普遍的问题：版本的选择。其实这类问题，在之前写Spring Cloud基础教程的时候，就已经发过一篇《聊聊Spring Cloud版本的那些事儿》，来说明Spring Boot和Spring Cloud版本之间的关系。\r\nSpring Cloud Alibaba现阶段版本的特殊性\r\n\r\n',NULL,NULL,NULL,NULL,NULL),(93,'老干部','','',' 网易首页 > 网易科技 > 互联网 > 正文 特斯拉是要闹哪样？将冻结此前的关店和裁员计划 ','images/2.jpg','**从上周开始，特斯拉大幅削减了零售员工的薪酬，并开始关闭第一批门店。知情人士透露，特斯拉目前已经关闭了美国和加拿大首批29家门店。据估计，数百名员工已被解雇，并获得了遣散费。**\r\n\r\n特斯拉销售管理部门今天早些时候与地区管理部门举行了电话会议，他们告诉零售员工，特斯拉将冻结此前的关店和裁员计划，直到本月底再行通知。\r\n\r\n有些没有关闭的门店上周被告知，将停止预订试驾。但它们今天被告知，一切业务恢复正常，但零售员工没有佣金和奖金，这导致他们只能获得更低的薪酬。\r\n\r\n据消息人士称，许多零售经理将这种冻结转型描述为“证明自己的机会”。尽管如此，由于大幅减薪，许多员工正在离职。有些员工表示，他们怀疑特斯拉正在延长过渡期，并削减他们的工资，以便把他们赶出去，这样他们就不用支付遣散费。\r\n\r\n当被问及这一情况时，特斯拉拒绝置评，并重提了此前发布的、关于转向在线销售的博文。马斯克在博文中写道，特斯拉将需要“几个月”的时间才能将大部分销售活动转移到网上。','#科技#/#未来#',4,NULL,4,'yc','2019-03-09',NULL,NULL,'原标题：Tesla temporarily freezes store closures and layoffs in chaotic sales strategy change）网易科技讯3月9日消息，据Electrek报道，电动汽车制造商特斯拉正在进行一场混乱的销售战略转型。现在员工们被告知，该公司将冻结目前的门店关闭和裁员计划，至少要到本月底才会采取新的行动。',NULL,NULL,NULL,NULL,NULL),(94,'老干部','心柔','http://www.duwenzhang.com/wenzhang/renshengzheli/ganwu/20181019/395166.html','余生，请善待自己的父母','images/8.jpg','> 生命来来往往，来日并不方长。时光如水流逝，岁月无声催老。每一天，都过得忙忙碌碌，每一天，都有不同的精彩。春花秋月，夏雨冬雪，走过了一程又一程，蓦然回首，便已是上有老下有小的年纪。\r\n\r\n###### 曾经年少，不解父母辛劳，一路成长，一路依靠。所谓养儿方知父母恩，为人父母之后，自己如何操劳，如何不易，唯有经历过后，才知其中艰辛。这世上，从来就没有什么感同身受，唯有亲身经历，才能深解其味。\r\n\r\n###### 　　人生，就是一场轮回，年轻的时候，谁不为子女奔波劳累，待到子女羽翼已丰，不再需要护佑之时，自己已是夕阳暮景。而那些曾经的子女，也会成为新的父母，一如自己的父母那般，勤勤恳恳，为自己的子女操劳负累，待到子女再次长成，自己便也老去。\r\n\r\n###### 　　谁都有年迈之时。幼时，父母耐心教导，周全照料，待到父母暮年，我们是否也能如同曾经他们对待我们那般，不嫌不怪，周全仔细，用心侍奉。\r\n**人生，总是吃过生活的苦，才知道幸福有多甜蜜；走过太多弯路，才明白自己要怎么活。衡量幸福的标准，不是你得到了多少，而是要看你当下拥有多少，并且，要懂得珍视。**\r\n\r\n　　在这个世界上，父母，是唯一尽心付出却不求回报的人，也是最不愿意给我们添麻烦的人。都说，做父母是有有效期的，其实，做儿女又何尝不是？子欲养而亲尚待，绝对是上天给予的最大恩赐。趁父母还年轻，趁父母还健在，多陪陪他们吧。不要整天只知道在朋友圈说什么父母在，人生尚有来处，父母去，人生只剩归途。多拿出些实际行动，去做，去实现。\r\n\r\n　　不要总说自己没时间，真正没时间的不是我们，而是那一天比一天更加老去的父母。他们内心的孤独，对子女的渴盼，以及在那岁月深处，面对迟暮的恐慌，才是最需要我们抓紧时间去慰藉的。\r\n\r\n　　老人的那一代，远不及我们现在条件好，但不论怎样，他们依旧护我们健康茁壮的成长。而今，他们逐渐年纪大了，不要觉得反正也老了，凡事就给他们凑合。正因为老了，来日并不方长了，所以才更应该尽自己所能，给他们创造一些好的生活质量。\r\n\r\n　　少一些玩手机的时间，多给父母买一件像样的衣服；少一次聚会的时间，多陪父母说说话。他们想要吃什么，就给他们买点什么，不要舍不得，不要怕花钱，只要老人健康，不生病，光他们那点吃喝穿戴，又能花得了多少钱。有空的时候，也给父母安排一次说走就走的旅行，去他们想去的地方，看他们想看的风景，完成他们未完成的心愿，满足他们一直想要的渴求。\r\n\r\n　　不要觉得父母还有健康的体魄，闲暇的时间，就觉得他们还应该为我们做些什么。带孩子，收拾家，麻烦这些事情我们自己来做，老人已经辛劳了大半辈子了，熬盼了多久，才能熬到如今子女已长成，工作也已功成身退的光景。他们也需要一点时间为自己而活，他们也需要好好的享受一下自己生命的光彩，不论成与败，他们将我们抚育成人，就是最大的成就。\r\n\r\n　　很多事情，都是拥有的时候，不疼不痒毫不在意，失去了以后才知道珍惜，追悔莫及。当白发换走青丝，当皱纹刻于脸颊，才突然惊觉，原来父母，已然老去。幸好，已经发现，一切还算来得及。\r\n\r\n　　不要计较父母曾经偏爱了谁，做错了什么，付出了多少。尽孝这件事，不需要任何条件和理由，只管做自己就好。善待老人，就是善待明天的自己。多少年以后你就会发现，善待老人，不光是一种报恩，更是对自己内心的成全。\r\n\r\n　　完美人生，不是要得到别人的喝彩，而是要活出自己的精彩。不是要成就多少，而是要不留遗憾。余生，请活好自己，更请善待老人，你便此生无憾。\r\n\r\n\r\n','#人生感悟#',1,NULL,6,'zz','2019-03-09',NULL,NULL,'生命来来往往，来日并不方长。时光如水流逝，岁月无声催老。每一天，都过得忙忙碌碌，每一天，都有不同的精彩。春花秋月，夏雨冬雪，走过了一程又一程，蓦然回首，便已是上有老下有小的年纪。',NULL,NULL,NULL,NULL,NULL),(95,'老干部','心若雨汐 ','http://www.duwenzhang.com/wenzhang/aiqingwenzhang/ganwu/20180918/394279.html','不想结婚的姑娘 最后大多嫁给了爱情','images/5.jpg','# 一、我应该嫁给爱情么？还是嫁给现实\r\n曾有个密友问我，她说：“亲爱的，女生到底是应该嫁给爱情，还是嫁给现实呢？嫁给现实，无非就是自己少奋斗几年。而后用10数年的时间去后悔。不过这么说也算牵强，身边不乏些嫁给现实的朋友，在柴米油盐的生活中不仅慢慢习惯上了对方的存在，那种习惯略带些依赖的味道，并在长此以往的依赖中得了一种病，药石无医-懒癌晚期。”\r\n\r\n　　她说自己最近认识了一个男生，对方有车有房有存款，只是自己对他不曾看对眼。\r\n\r\n　　我说；“既然你不喜欢他，那为何要纠结呢。你有没有想过另一半是陪伴你走完一生的人。不喜欢不如直接回绝了人家，两不耽误，各自再找。而你又有赚钱的能力，嘴上总是挂着靠人不如靠己的字眼，既然不靠对方经济补给，那结果自然明了。后来我听说，她之所以苦恼，全因母亲的一席话。\r\n\r\n　　“什么都比不上有个属于自己的家不是么？感情都是可以慢慢培养的。在我们那个年代基本上都是亲朋好友给介绍，见见面走个过场便走在一起水到渠成。哪有那么多矫情，见怪不怪的。甚至我的上一辈还是受父母之命呢，爱情有用么，穷苦夫妻百事哀。就算你们之间的爱情浓烈到坚贞不渝也终会为现实所败，巧妇难为无米之炊。你看你你表姐跟着另一半满世界的旅行，你不眼气么？”为人父母，大都喜欢这样教育子女。父母不是你感情经历的亲身体验者，因此他们有时候抛出的观点，直观理性但又武断片面。“不听老人言，吃亏在眼前。“然而，对于爱情我从来都是借鉴些我认为对的地方，并不会全盘吸纳。\r\n\r\n　　有房又如何？房子没法给我这种人安全感。现实世界中我很理性，我清楚自己要的什么。然而当我遇上喜欢的人，我是很感性的。没有爱作为精神纽带的婚姻我觉得索然无味。人活一世不过3万多天，人生苦短，不容后悔。\r\n\r\n　　如果你是个“圣斗士”或许你的家人即便知道你心不属他，可仍旧会强撮合，只因这个对象他们看着还不错，又怕你错失了他“你找不着怎么办”。但我想劝叔叔阿姨一句：“古话说的好，强扭的瓜不甜。”我想对那些如闺蜜般夹杂其中，不停苦恼的女孩说一声：“你有追求幸福的权力，选择权只在你自己手里，别人的话只能是参考，如果你并不认为那是对的，让他如云烟般路过就好。别人不是你，不会有你的感同身受。当事人以外的人的话语多少带有些片面的意味。”\r\n\r\n　　说到这，我同那位朋友的观点默契的达成一致，好的感情，你是我的，我是你的。而我们又都是属于自己的。感情在于沟通，沟通的首要前提便是有话聊，你们可以有不同的爱好，但尊重、接受便好。你们之间的交流是否可以由浅入深，是否带有营养。并在某种程度上达成统一，这才是关键。三观不同的人同处同一屋檐，你们对周遭审度不同，再好的感情基础也是白费。更何况你们也不具有共同的感情经历。好的感情是彼此间的信任、是我们之间有同进步共患难的决心，而不是空有一个能够躲雨的巢穴，心与心之间毫无交流。即使你终究败给现实，想象一下当你每天对着一个无话聊的人，那种尴尬叫做无奈。\r\n\r\n　　有温度的才叫家，没温度的叫住所。说的难听些，你走后就连这个住所中的一砖一瓦都带不走，还跟我谈什么曾经拥有。\r\n\r\n　　你是嫁给爱情，还是嫁给临时住所呢？对相爱的人来说婚姻是神圣的殿堂，而不爱的，那叫坟墓。\r\n\r\n\r\n# 二、我爱你，更爱与你在一起时我的样子\r\n我曾在网上看到这样一个案例， 通读过后，我为男女主人公间的爱深深折服。这是一对恋人，他们结婚的时候没有车、房，吝啬的就连仪式、亲朋间的祝福都没有。然而女孩并没有后悔，她说：“年轻的时候反而不懂爱情，只是想简单找个对自己好的人。他对我好，所以我嫁了。\r\n\r\n　　“刚刚恋爱的那段时间，他们住在廉价的出租房，挤狭小的卫生间，拿着微薄的工资，过着青黄不接的日子。她说：”最难熬的日子，我们都一起度过了。“结婚十年，她事业稳定，她老公的事业也蒸蒸日上。两个人不光在市区买了房子，男人得到了女人家里的认可。其实幸福从来都来得好不容易，两个人在一起十多年，早就把两个人的生活过成了一个人。\r\n\r\n　　女人说：“自己动手，丰衣足食。”男人却说：“为了心爱的人再苦再累都无所谓，每天拖着疲惫的身子看着她系着围裙站在厨房面带微笑的做着晚餐，那一刻我觉得自己是世界上最幸福的人。“男人时常觉着自己欠妻子一个仪式，于是偷偷的在十周年那天精心布置了一场迟来的求婚仪式。\r\n\r\n　　她未曾想这场惊喜这么突然，虽然这一天在她意料之中，结果还是被感动得一塌糊涂。然好事刚过。坏事便接踵而来，婚后不久她经历了一场严重车祸，这次车祸给她造成了片段式的失忆是永久性的。包括她的父母，朋友，这些张熟悉的面孔一一从她的世界彻底删除。那些天只要她清醒过来，便不断向身边人求助，“我要找我老公”本能的情感依赖，其实就是一种深爱。\r\n\r\n　　这份深爱是我忘却了世界，唯独忘不了你。你看我即使忘记了我们的一二事，我还是绝对信任你啊。他说：“只要她能醒过来，忘记就忘记吧，不管她变成什么样子，我依然爱她。大不了，我们重新开始，从我叫什么开始。\r\n\r\n　　只要她还活着，我们还有大把的时间足够我们再好好爱一回。“那之后，他日夜守在医院里陪伴她，这期间他的朋友不是没出过劝他再找的主意，他狠狠的说：”再说这样的话，绝交。世上好女孩万万千，我爱的只有这一人。“\r\n\r\n　　好的爱情大抵就是这个样子，不论你变成什么样子，我都欣然接受，依然爱你。夫妻本是同林鸟，大难临头各自飞。在好的爱情面前这条定理并不受用。\r\n\r\n\r\n# 三、阿娇结婚：谢谢你出现，我还以为遇不到你了\r\n好的爱情会迟到，但它从不曾缺席。在不爱你的人面前我懂得了生活艰辛、学会了迎着风雨奔跑。在爱你的人面前，你明白了爱的真谛。可能爱情就是，有人曾深深地伤害过你还一笑而过。于是，你失望了，你觉得好像整个世家都抛弃了你，你觉得自己存在的本身就是天大的笑话。然而直到另一个人的出现，他用自己的行动告诉你他爱你，他不在意你有怎样的过去，就算你很糟糕，他爱的恰好就是此刻站在眼前那个最糟糕的女孩。你不用很好，我爱你便好。\r\n\r\n　　如果说生活曾带给你各种各样的亏欠，那么请相信总有一个人会弥补生活带给你的全部亏欠。\r\n\r\n　　即使世界荒芜了，也要相信总有一个人会是你的信徒。不论你是好是坏，也不管你是谁，你都是我的信仰。\r\n\r\n　　阿娇结婚了，穿着抹胸婚纱的她，光彩照人，那一天她是这个世上最美的女人。她也终于验证了自己歌里的那句话：最后变天后，变新娘，都是理想。\r\n\r\n　　想起阿娇曾经唱过的那首《下一站天后》，里面有一句话跟她的爱情观很契合：“其实心里最大的理想，跟他归家为他唱。“\r\n\r\n　　阿娇曾说，她要找一个很帅的男人结婚，艳照门事件后，她开始忽略颜值。阿娇曾失声痛哭的说，再没有人会娶我。在那段时间里，仍旧有人喜欢她、慢慢爱上她。只是，从未有人想过给那个看似坚强而内心深处总是敏感而受伤的女孩一个未来。\r\n\r\n　　对于一个相信爱的女孩来说：我可以接受你的不完美，我可以接受把我仅有的面包分一半给你。但我最怕的是无论我付出多少，怎样付出。都打动不了你。你描绘的那个未来很美，只是多余一个我。\r\n\r\n　　时间兜兜转转，27到37，一个女人最好的黄金年龄已然过去，如果换作意志不坚定的女孩或许早就不等了，可这个人偏偏是阿娇，我曾看过一期阿娇的专访，30多岁的她谈及那场遭人唾弃的爱恋，她的眼圈还是会泛红。泪水的含义或许更多的还是放不下吧。\r\n\r\n　　我给了你一颗心，一颗纯粹赤诚的爱你的心，后来你走了，我发现我的心空荡荡的。好像少了点什么。\r\n\r\n　　今年五月，阿娇结婚的消息一度上了热搜。阿娇找到了一个很帅的男人，没有复杂的情史，也不会计较她的过去。只是单纯的想和她走完一生。他给了她一场浪漫的婚礼，让她如愿做上最美的新娘。婚礼上，致词讲到：“走到今天好不容易…”时，阿娇哭得很厉害，然最先流泪的不是阿娇，而是那个很爱她的男人。\r\n\r\n　　他笑着告诉她，娶到你真好。终于等到你，还好我没有放弃。\r\n\r\n　　爱是什么，爱就是在对的时间遇到对的人，而错误的时间里，你付出爱的那个人终究是浮云自眼前一过。幸好，你即使遍体鳞伤也也依然愿意相信爱。\r\n# 四、好的爱情，是你可以做自己，简单而美好\r\n我觉得一段感情好不好，在女孩子身上就能体现的出来。一个女孩子自信幽默，举止落落大方，那她的身后肯定有一个愿意宠她、疼她的人。这个人用自己的行动去保护她本脆弱的自尊心。所以她说话做事的时候才不会畏手畏脚，踌躇不前，更不会为了一件事像一个神经病一样患得患失。\r\n\r\n　　其实世界上好的爱情就是这样的，对错不重要，只要有爱，就会有偏袒去宠着。爱给你一个支点，让你宽容温和的去面对这个并不完美的世界。\r\n\r\n　　就如张小娴说的那样：你要等对的人的时候，自己可能也不知道怎样才是对的人，只有当那个人出现，你才会知道，他应该就是那个对的人，他在你生命中出现，也是为了满足你，也让你去完善自己。\r\n\r\n　　嫁给爱情的女孩大多在接受爱的同时，学会了奉献爱，她们懂得付出和包容，并设身处地的为另一半未雨绸缪。她们往往戒掉了本身自带的小脾气，变得温和从容、平易近人。如果你发现一个女人如泼妇般骂街，哪怕一件微不足道的小事都要斤斤计较，锱铢必较。我想或许是她过得不够好吧。\r\n\r\n　　也许会晚点遇见你，无论你是二十岁还是三十岁，但我仍坚信，那个爱我、懂我、惜我的人会穿越人海，只为给我一个爱的港湾。在这之前，你要做的就是善待自己，让自己试着独立、拥有一个不依赖旁人的独立人格，答应我，好吗？\r\n\r\n　　心若雨汐：你还相信爱吗？不过，我是一如既往的相信着，等待着。\r\n','#爱情故事#',1,NULL,6,'zz','2019-03-09',NULL,NULL,'曾有个密友问我，她说：“亲爱的，女生到底是应该嫁给爱情，还是嫁给现实呢？嫁给现实，无非就是自己少奋斗几年。而后用10数年的时间去后悔。不过这么说也算牵强，身边不乏些嫁给现实的朋友，在柴米油盐的生活中不仅慢慢习惯上了对方的存在，那种习惯略带些依赖的味道，并在长此以往的依赖中得了一种病，药石无医-懒癌晚期。”',NULL,NULL,NULL,NULL,NULL),(96,'老干部','笔砚先生  ','http://www.duwenzhang.com/wenzhang/youqingwenzhang/20180213/385395.html','如果我死了·若是有来生','images/3.jpg','> 很久都不曾写过文章了，上一篇文章还是四个月之前的。以此去命题，并非有什么轻生的念头，只是有感而发，勿念。其实我很想做个自私的人，因为这会让你吃尽苦头又吃足了甜头。而你却依然活的天真活的开心——序。\r\n\r\n如果我死了\r\n\r\n　　如果我死了，那些愧对我的人会很开心：终于不用还钱了，哎呀，不然真不知道怎么办那，不敢见他，吓得我朋友圈都不敢发了！不对，我这样的人怕他干嘛？反正也不能把我怎么样。我每天活的多潇洒，灯红酒绿左拥右抱的。怕他干嘛，我是没错的，我怎么能委屈自己那？我要活的开心就不能在乎那么多，人这一辈子就是有舍有得，凭自己本事借的钱为什么要还？——不用还。\r\n\r\n　　如果我死了，那些我曾追求的人会很开心：每天烦我，我怎么知道喜不喜欢他？可能喜欢吧，可能不喜欢？无所谓了反正他都死了。哎呀，他一死去，就没人对我嘘寒问暖请我吃饭了，没人每天担心我了！算了，毕竟我这么漂亮，比不上明星也有自己的亮点，还会有下一个傻子不顾一切追求我的。可下一个人什么时候出现那？这么想来我还是亏本的啊，我怎么能做亏本的买卖——不能！他要是不死去多好，还能多一个追求者！我不喜欢他，我只是喜欢他追我无条件对我好，我这么做是有道理的，哪个人是不渴望被人爱的孩子那？我还是个孩子啊，我渴望人爱我追求我不图回报的对我好，我接受他的好有错吗？我是没错的？——恩。\r\n\r\n　　如果我死了，那些高谈阔论肆无忌惮吹牛逼的人会心头一震：他怎么死了？他不能死啊，他一死没人听我吹嘘了。我那些“丰功伟绩”辉煌历史，我那些绝地反击的故事跟谁炫耀啊？我曾经多么励志，我曾经多么孝顺，我曾经多么受人尊敬我曾经多么爱家人爱工作啊！他不能死，他死了谁听我吹嘘？不行，我还得再找个人！他死了，唉，他死了我英雄无用武之地，他死了我怎么展现给大家一个“君子好汉”的形象啊？不行，多亏他死了！他不死真求到我怎么办，那我是不是要兑现我说的力所能及尽力而为？我只是随口一说啊，虽然我这么完美，可他不该当真的啊——不该当真的。\r\n\r\n　　如果我死了，那些争夺我遗产的人会很兴奋：什么？他死了，他真的死了？他真的死了！哈哈！他死了！他真的死了！我想想，这样我就可以买个车，换个大点的房子，还能吃点不舍得吃的，去些平时消费不起的场所，早点死多好，何必等到现在那，人终有一死。不如成全我了，毕竟他这么无私，祝他上天堂哈哈！我谢谢他。不，我该恨他，怎么不早点死？愿他下地狱！我只是为了自己过得好一点，我每月赚几万块多吗？油价这么贵，海鲜这么贵，还得平时喝个酒旅个游，我还会有孩子，哪里不是开销的地方，我活的这么悲惨只是为了让自己过得好一点，我没有错，谁不想让自己过得好一点！他会尊重我的自私？——恩，他一定会的。\r\n\r\n　　如果我死了，那些垂涎于我爱人的会很激动：妈的，终于死了！这王八蛋！盼星星盼月亮终于死了。早点死啊，他那老婆可馋死我了，那身材，那大白腿，想想都过瘾！这下子我就不用害怕了，妈的，他活着我也不怕！这下子我就不用偷偷摸摸的了，妈的，他活着我也不怕！这下子我就不用跟他称兄道弟了，妈的，他活着我也不想跟他称兄道弟！占着茅坑不拉屎，凭什么那么漂亮的女人要跟他受罪？他那活的还算个人了？哪里比得上我，能让这女人吃香的喝辣的，马桶都是镀金边的！为什么不是金边的？金边的得多少钱，有那个钱找什么样的没有，我还用得上盼着他死？他这一死我也算做点好事，不然这么年轻守了寡还得改嫁，万一改嫁的是奔着她那张脸那个身材的人那。我这算是做点好事，给自己积德了，他应该谢谢我的！为什么我这么无私奉献那——妈的，老子一直就这么无私啊！\r\n\r\n　　如果我死了，那些我能帮助的人会很伤心：他怎么能死那？他怎么能死那！他死了谁帮我工作，他死了谁帮我做那些别人不愿做的事？他不能死他不能死！算了，死了就死了，我抓紧找下一个人吧。唉！他死了谁体现我的社会价值啊，他死了我怎么奔赴我的需求我的追求！他这就死了，我很伤心。曾经有那么个人可以帮我买东西的时候省钱，可以帮我去打架，可以难过的时候陪我喝酒，开导我听我倾诉，他怎么可以死！我恨他，我是不是该恨他？没错，我应该恨他，不说一声就死了。我恨他——这么不负责的人我恨他！\r\n\r\n　　如果我死了，那些朋友圈的高大上会埋怨我：他死了？那谁给我评论，谁给我点赞！我那些修过的照片，丰盛又廉价的美食小视频，盗的风景艺术图片谁给我评论，谁来展现我的品位我的生活。他怎么可以死，那谁来当我的仰慕者，谁来做围观群众，谁来发出一声哇塞！死了！算了，死了就死了吧。别问为什么——我这么高大上的人在乎个市井小民干嘛。\r\n\r\n　　 若是有来生\r\n\r\n　　若是有来生，我要做一个聋子。\r\n\r\n　　做一个聋子。我不想听那些废话，不想听失恋后的抱怨：我分手了，好难受，她那么漂亮，我想睡她！她那么善解人意，我想跟她过一辈子，可我没钱！努力，算了，太累了。\r\n\r\n　　做一个聋子。我不想听那些废话，不想听贫穷时的恳求：你帮帮我，我真的可怜，我真的走投无路！你不能不帮我，我们是朋友，我是什么样的人你知道的！还钱？算了，我缺钱你是朋友怎么能逼我！你知道我是什么样的人，有钱会不还你？——抱歉，我真的不知道你是什么样的人！\r\n\r\n　　做一个聋子。我不想听那些废话，不想听冠冕堂皇的仁义：你对我不仁我不能对你不义，虽然你对我不仁，但你是我朋友你是我亲戚你是追我的人，你那么那么孝顺那么那么善良那么那么义气那么那么钟情！尽管你对我这般如此，如此这般。但我还是念你的好！所以我不能借你钱看你堕落，不能帮助你看你不自己努力，不能接受你看你开心，因为我怕你得意忘形啊！\r\n\r\n　　因为我是个聋子，所以别对我说废话。\r\n\r\n　　若是有来生，我要做一个哑巴。\r\n\r\n　　做一个哑巴。我不想说那些违心话，不想说：因为我们是兄弟，好吧！\r\n\r\n　　做一个哑巴。我不想说那些违心话，不想说：因为我爱你，好吧！\r\n\r\n　　做一个哑巴。我不想说那些违心话，不想说：因为你是领导，好吧！\r\n\r\n　　因为我是个哑巴，所以我说不出逆来顺受，但我懂得己所不欲，勿施于人。\r\n\r\n　　若是有来生，我要做一个瞎子。\r\n\r\n　　做一个瞎子。我不想看那些悲哀，不想看公交上：你就给老人让个座怎么了，年轻立壮凭什么不让座，你还是人吗，爹妈怎么教的！\r\n\r\n　　做一个瞎子。我不想看那些悲哀，不想看大街上：我和他只是朋友，我们什么都没有，你别多想我还是爱你的。我不爱钱我爱你！……？。\r\n\r\n　　做一个瞎子。我不想看那些悲哀，不想看工作上：张三你说，这地球是方的还是圆的？张三顶着黑眼圈穿着没洗的衬衫吃着剩饭来到单位奉上笑脸说“方的方的，嘿嘿肯定是方的”！\r\n\r\n　　做一个瞎子。我不想看那些悲哀，不想看马路上：行行好吧，给点钱，好人一生平安，差五元车费回家。唉，这现在傻子少了，五块钱都舍不得我这豪车怎么加油！\r\n\r\n　　做一个瞎子。我不想看那些悲哀，不想看马路上：行行好吧大哥：我孩子真的好几天没吃饭了，求求你了求求你了！滚！孩子睡吧，睡着了就不饿了。\r\n\r\n　　若是有来生，莫要虚度光阴。\r\n\r\n　　如果我死了，愿以警醒世人。\r\n\r\n　　昏黄的路灯洒落一片片昏黄，如果一个人自愿高楼坠下，算自杀吗？算吧。——自杀究竟是一个人杀了自己，还是所有人杀了他一个人而已？\r\n','#友情#/#生活#',1,NULL,6,'zz','2019-03-09',NULL,NULL,'很久都不曾写过文章了，上一篇文章还是四个月之前的。以此去命题，并非有什么轻生的念头，只是有感而发，勿念。其实我很想做个自私的人，因为这会让你吃尽苦头又吃足了甜头。而你却依然活的天真活的开心——序。',NULL,NULL,NULL,NULL,NULL),(97,'老干部','孟婷1234','http://www.duwenzhang.com/wenzhang/lizhiwenzhang/20180518/388882.html','三十多岁，如何打理尴尬年龄里的凌乱人生','images/6.jpg','> 三十岁是一个分水岭，一边是骄阳似火、山花烂漫的绚丽青春，一边是蝇营狗苟、满地鸡毛的凌乱人生，曾经的热血青年已经成为端着保温杯泡着枸杞的中年大叔。\r\n\r\n　　*三十岁是一扇门，门里面是此时的平淡安逸，门外面是未知的挑战与激情。看到众多招聘广告的年龄要求——三十五周岁以下，有一种莫名的恐慌，然后暗自庆幸自己还有一份工作。*\r\n\r\n　　三十岁是一道鸿沟，90后、00后的小孩们兴致勃勃地聊着跑男的情景恰似当年的我们对《流星花园》的执迷狂热，我们所说的责任、信念、三观等在他们看来不可思议。父辈们劝我们平安是福、知足常乐，而内心深处却住着一个倔强不屈、勇于挑战的自己。\r\n  三十岁是个岔路口，一边是安逸舒适的人生之路，就像温水中的青蛙，沉浸在一成不变、波澜不惊的生活中不能自拔，最终失了跳出去的斗志和勇气；另一边道路泥泞、弯曲、充满坎坷、前途未卜，机遇与挑战激励着我们不断成长进步，一路上感受着探索未知世界的乐趣。\r\n\r\n　　三十岁是人生中的一个转折，棱角分明、意气用事、口无遮拦、锋芒毕露被圆融世故、深思熟虑、谨言慎行、韬光养晦所代替；曾经追求生活品质热衷于名牌的我们觉得购买打折、促销商品有失风度，现在竟为秒杀到一件根本用不上的物品而欣喜不已；为维护自己的权益与商家据理力争，有时候也和买菜的小贩们调侃几句，发发牢骚，这就是所谓的中年油腻人生吗？ \r\n\r\n　　三十多岁，如何打理尴尬年龄里的凌乱人生？\r\n\r\n　　开始反思以前的生活，在反思中成长。\r\n\r\n　　三十多岁在工作、结婚、生子之后人生的雏形基本形成，当享受着日复一日的安逸闲适，突然发现年少时的学霸们已经在一个在众人不可企及的高度上继续攀爬，我开始怀疑人生了，比我们更优秀的人如此拼命，我们有什么理由故步自封、混沌度日呢？\r\n\r\n　　想起曾经年少无知虚度的光阴，想起在人生紧要关头错过的机遇，悲从中来。\r\n\r\n　　生活已经够安逸了，为什么还要在安逸中不思进取呢？在还可以努力的年龄里尽力拼一把，不要给人生留下遗憾。\r\n\r\n　　反思让我们清醒自己的现状，也让我看清以后要走的路，人格在反思中得以重构，思维在反思中明晰，个体在反思中脱胎换骨。\r\n\r\n　　《我的前半生》中为爱牺牲甘愿做家庭主妇的罗子君在遭遇婚变后，在痛定思痛的反思之后开启了崭新的人生。\r\n\r\n　　做人生的减法，根据自己的特长，选择那个最靠谱的目标。\r\n\r\n　　追求完美的我也曾给自己定了很多目标，总是在坚持了一段时间以后就放弃了，家里的跑步机成为晾衣服的最佳工具，买的书籍早已积上了厚厚的尘土……生命就一次次陷入这样的恶性循环：\r\n\r\n　　确立目标——斗志满满满 ——缺乏自制力、外在诱惑而放弃——痛下决心——再次确立目标\r\n\r\n　　树立太多的目标、兼顾太多反而会顾此失彼，三十多岁开始做人生的减法，在每个阶段确立一两项可行的、可发挥自己所长的目标然后坚持下来\r\n\r\n　　董明珠在35岁以后专注空调销售业务，以自己的死缠烂打和执着坚韧谱写了销售界的神话。\r\n\r\n　　持之以恒将一件事情做到极致的人是人生的赢家。\r\n\r\n　　那么确立目标之后怎样有效地坚持下来呢？半途而废源于缺乏强大的动力支持，朋友说她才开始跑步的那几天，每天跑完五公里后肌肉酸痛、身心疲惫，是什么让她支撑下来的呢？每次快要放弃的时候，像勾践卧薪尝胆，她默默地问自己：“你忘了曾经被当众嘲笑肥胖的耻辱吗？”，“一雪前耻”是她坚持的动力，多少次在别人的酣梦中她离开温暖的被窝，两年多的坚持带给她意想不到的人生收获。\r\n\r\n　　坚持总会伴随着突然的改变带来的阵痛与不适，这是正常现象，给自己找一个坚持下去的动力，回忆自己曾经因为坚持获得成功或者因为半途而废而错失良机的经历，或者给自己树立一个积极向上的榜样。就像母亲痛苦的分娩换来的是新生命的诞生，挺过生命状态改变之初这段最难熬的日子，坚持就成为了一种习惯，当习惯成为生活的常态，我们将会收获不一样的人生。\r\n\r\n　　缓解压力，学习一些缓解不良情绪的方法。\r\n\r\n　　我们努力在资历深厚的前辈和势头正猛的90后之间争得一席之地，孩子的教育、父母日渐衰老的身体需要我们承担起应有的责任来，看到别人家的孩子在周末努力学习着各种本领，感受着逢年过节相聚时充斥着的攀比、炫耀，品尝着生活的酸甜苦辣，我们眉头紧锁、焦虑不安，这些无形的压力正在考验着我们敏感脆弱的内心，不由地感慨：人到中年百事哀。\r\n\r\n　　三十多岁，要学会正确宣泄自己的不良情绪，在运动、音乐、冥想中让自己紧绷的神经得以放松，身心做一番休憩之后再继续上路。\r\n\r\n　　抛掉不切实际的幻想，为可以触摸到的现实而努力。\r\n\r\n　　我们喂马、劈柴，为粮食、蔬菜担心，用心经营着工作、生活，但不会冲动之下为诗和远方远走他乡，我们深知自己肩负的各种责任，而这些责任让我们的人生变得深刻。\r\n\r\n　　把工作当成提升历练自己的平台，30岁以后，要开始积累经验、能力、知识、人脉之类的东西，远离七嘴八舌、说长道短，在单位里每个员工身上都有值得学习的闪光点，做到博采众长不断完善自己，为实实在在可触摸到的东西努力才是值得的。\r\n\r\n　　珍惜和家人在一起的时光，放下手机，带老人孩子出去散心，哪怕是不咸不淡的聊天，不要用口头的承诺代替实际的陪伴，因为岁月匆匆，经不起太多的等待。\r\n\r\n　　利用好自己的业余时间，抛掉无用的社交。\r\n\r\n　　在这个世界上，无论你多么优秀，总有人喜欢你，也有人不喜欢你，所以不必讨好每一个人。三十岁之前为了保持合群的状态，我们总是削尖脑袋钻进那一堆聊天、嗑瓜子的人群之中，现在我们即使游离在众人之外却并不感到落寞。\r\n\r\n　　与其让生命的能量在虚情假意地应付无关痛痒的社交中慢慢流失，不如去拿起专业书籍提升自己的业务能力，或者是在知识的海洋汲取人生的精华，感悟生命的真谛。\r\n\r\n　　业余时间可以造就一个人，也可以毁掉一个人。\r\n\r\n　　工作之余把别人用来刷屏、谈论八卦的时间用于学习会收到意想不到的效果：手机里存上一本书籍，在等待孩子上兴趣班的时间可以看一看；如果时间允许可以步行上下班，锻炼身体的同时顺便对当天的生活做一番规划或者总结；抽空查看一下最近的消费明细，做到心中有数，减掉不必要的支出，学习一些实用的理财技巧让财富增值，利用好碎片化的时间人生会有意想不到的收获。\r\n\r\n　　三十多岁，把握机会、用心经营、努力付出的你会收获不一样的精彩人生。\r\n\r\n','#励志#/#感悟#',1,NULL,6,'zz','2019-03-09',NULL,NULL,'三十岁是一个分水岭，一边是骄阳似火、山花烂漫的绚丽青春，一边是蝇营狗苟、满地鸡毛的凌乱人生，曾经的热血青年已经成为端着保温杯泡着枸杞的中年大叔。三十岁是一扇门，门里面是此时的平淡安逸，门外面是未知的挑战与激情。看到众多招聘广告的年龄要求——三十五周岁以下，有一种莫名的恐慌，然后暗自庆幸自己还有一份工作。\r\n',NULL,NULL,NULL,NULL,NULL),(98,'老干部','yyyy0101','http://www.duwenzhang.com/wenzhang/yuanchuang/20190224/399816.html','野心勃勃而又不去行动的人才会有更多的担心','images/9.jpg','> 杞人忧天的故事很多人都知道，说的是古时杞国有一个人会有各种各样的担心，比如担心会自己生病，担心自己会穷困，有一天甚至担心天会塌下来。别人都笑话他，说他的担忧是多余的，整天哪有果多的担心，人岂不是很悲催痛苦，后来有一成语来形容他，就是杞人忧天。\r\n\r\n在现实生活中，我发现有更多的人做着杞人忧天的提心。比方说，有人担心自己孩子输在起跑线上，就拼命给孩子报各种补习班，后来又担心孩子考不上好的大学，成年后，又担心没房没车没找不到好人家的姑娘，再后来结婚了，又担心孙子是不是健康，做着各种各样的检查……\r\n\r\n　　我们发现有一些人一生当中始终处于担忧里，这是很痛苦的，他们从来没有享受过生活，一生在担忧里小心谨慎的生活着，生活的美好他们体会不到，他们就高速运转的机器，哪来的闲功夫见看花开花落，松涛阵阵。\r\n\r\n　　那么，问题来了，这是怎么样形成的性格，有必于搞的这样紧张吗？一生这样无趣，还不如四五岁的孩童，天真烂漫无忧无虑的生活着。\r\n\r\n　　我们发现这些人都是不甘示弱的人，都是天生有着优越感的人，自认为自己就应该比别人过得好，他们也的确是生活的强者，但是却并非都是智者，不懂得享受生活。\r\n\r\n　　他们内心会有各种各样的欲望攀比，永无止境的奋斗目标，为此，这些想法让他们寝食难安，他们每天都会难受，因为内心的奋斗目标在召唤，他们对现实的生存环境是不满意的，甚至是反感的，于是痛苦产生了。接下来，就会有两种情况产生。\r\n\r\n　　一种是没有觉知，不知道自己痛苦的根源，过着得过且过的生活，因为他们生活并没有触及内心的根源，或者说没有产生直接的行动，他们会越来越担忧，严重了就会胡思乱想，就像那个杞国人一样担心天会塌下来。\r\n\r\n　　另一种是觉知，知道自己内心痛苦的根源，并积极朝着内心的目标奋进，做一个知行合一的人，这种人往往是野心勃勃的，并有积极的行动，因此，他们并不会胡思乱想，也不会害怕恐惧，这样的人如果持之以恒的专攻某一领域，往往能取得成功。\r\n\r\n　　所以第一种人应该向第二种人学习，如果认为自己非等闲之辈，就应该积极的行动，而不会各种担忧和恐惧，因为行动是战胜魔鬼最有效的武器，当你认为自己对前面临的是一座山时，走一步是一步，终究有一天会走完，当你认为面前拦路虎是一个魔鬼时，那么就亮出宝剑，勇敢战斗，那么你才有赢得胜利的机会，如果不去亮剑，不去行动，就永远没有成功的机会。\r\n\r\n　　当然了，生活也并非完全那么急促湍急，它也有柳暗花明花红叶绿云淡风轻的时刻，当你在为着自己理想和目标奋斗时，也要抽出一点时间来享受美好的生活，不要无趣的只知道奋斗。\r\n\r\n　　如果认为自己天生并非俗辈，那么就做个勇敢的人。欲望越大，烦恼越多，这是成正比的，所以担忧恐惧也会少不了的，如果想跨越这个坎，那么就再加上勇敢积极的行动吧，他们战胜一切负面情绪最有效的法定。\r\n','#故事#',1,NULL,6,'zz','2019-03-09',NULL,NULL,'杞人忧天的故事很多人都知道，说的是古时杞国有一个人会有各种各样的担心，比如担心会自己生病，担心自己会穷困，有一天甚至担心天会塌下来。别人都笑话他，说他的担忧是多余的，整天哪有果多的担心，人岂不是很悲催痛苦，后来有一成语来形容他，就是杞人忧天。',NULL,NULL,NULL,NULL,NULL),(99,'老干部','心若雨汐','http://www.duwenzhang.com/wenzhang/renshengzheli/ganwu/20181002/394682.html','有一种心态叫放下，有一种境界叫舍得','images/2.jpg','> 心像是个口袋，什么都不装的叫心灵，装一点的叫心眼，装多了的的叫心计，装更多的叫心机，装得太多了最后那些负累就只能被当作心事了。人活在世往往过于在意近在咫尺的功名利禄，我们的生活是否如与朋友说起时一般绚烂夺目，现实生活中亦有很多人深陷进没有结果的爱情里，明知是错的，还要迂回前进。那些口口声声说着为了生活的衣食无忧、为了孩子不得不继续维持的婚姻。很多人拿不起又放不下，任由空白的生活在自己的眼中周而复始、慢慢的这种负累侵蚀的我们身心不堪重负。试着放下吧，放下你的疲惫、放下那些没有结果的执念、清醒时看到的你和他的未来若是并不理想，不如劝自己趁早放下，长痛不如短痛。再试着看开些，有钱就会拥有快乐么？就像你耗尽心力换得了工作场上的升职机会，而就在你即将上任时被查出了重症，钱能换回健康么？再多的钱能换回你的生命，换回勃勃生机的青春么？钱固然重要，可是与生命、与亲情、爱情比起来，钱真的没有那么重要。有形的财富无法与无价的情感、生命相提并论，何来取舍一说呢。\r\n\r\n#### 人一定要想清三个问题，第一你有什么，第二你要什么，第三你能放弃什么。对于多数人而言：有什么，我们往往很轻易的就评价出自己的现状；那要什么，大多数人内心也有明确的想法；那么问题来了，现在你告诉我你能放弃什么，几乎没有人可以做到不放弃就轻易获得了全部你想要的东西。人生不会每一件事都会让自己称心如意，常言道：人为财死，鸟为食亡。但有多少人为了事业有成，最后倒在了工作岗位上，那些口耳相传的过劳案例并非偶然意外、就像疾病的发展也是有一个循序渐进的过程。外在的过劳加上心里的过度忧思，外因内因从不分离。那些远赴千里外的地方工作的子女，其家中病重老母为不让远方的儿过于掂念，不忍心在孩子耳边传递生病讯息，弥留之际也未能见上最后一面。我并不赞成那些抛家舍业的一颗心思完全放在工作上的做法，工作一时的，即便离开这，你仍有再次获得的机会。而家庭、健康却要陪伴你很久，且一旦失去就是永远。或许你是为财而死，但是不值得。\r\n\r\n#### 　　生活中很多人喜欢就一件事左右摇摆，举棋不定。轻易落子怕输了，一子不落怕错过。于是他们一直纠结于细微得不值得一提的小事，让自己始终活在紧张的泥潭不能自拔。在自己短暂的一生中，谨小慎微，防微杜渐，也许别人的一句话，一个眼神，一个表情，都会不断揣摩，别人随口一说的话却始终放在心里耿耿于怀，凡事有一点端倪便以偏概全，杞人忧天。所以这些人总是活得很累，舒心二字与他们完全绝缘。其实人生有一种心态叫放下，。不必凡事都争个明白，我们生活的这个社会本就很复杂，然而很多人把这个本来就复杂的社会弄得更加复杂，复杂的无章可循。贪婪的人容易受到打击。欲望越少，生活越幸福。','#哲理#',1,NULL,6,'zz','2019-03-09',NULL,NULL,'心像是个口袋，什么都不装的叫心灵，装一点的叫心眼，装多了的的叫心计，装更多的叫心机，装得太多了最后那些负累就只能被当作心事了。人活在世往往过于在意近在咫尺的功名利禄，我们的生活是否如与朋友说起时一般绚烂夺目，现实生活中亦有很多人深陷进没有结果的爱情里，明知是错的，还要迂回前进。那些口口声声说着为了生活的衣食无忧、为了孩子不得不继续维持的婚姻。很多人拿不起又放不下，任由空白的生活在自己的眼中周而复始、慢慢的这种负累侵蚀的我们身心不堪重负。试着放下吧，放下你的疲惫、放下那些没有结果的执念、清醒时看到的你和他的未来若是并不理想，不如劝自己趁早放下，长痛不如短痛。再试着看开些，有钱就会拥有快乐么？就像你耗尽心力换得了工作场上的升职机会，而就在你即将上任时被查出了重症，钱能换回健康么？再多的钱能换回你的生命，换回勃勃生机的青春么？钱固然重要，可是与生命、与亲情、爱情比起来，钱真的没有那么重要。有形的财富无法与无价的情感、生命相提并论，何来取舍一说呢。',NULL,NULL,NULL,NULL,NULL),(100,'老干部','','','web项目常见错误汇总','images/7.jpg','java.lang.IllegalStateException: Web app root system property already set to different value: \'webapp.root\' = [....\\tmp1\\wtpwebapps\\workreport\\] instead of [.....\\wtpwebapps\\ApprovalFront\\] \r\n- Choose unique values for the \'webAppRootKey\' context-param in your web.xml files!\r\n \r\n错误原因：Tomcat发布多个项目时抛的webAppRootKey错误,  原因是部署在同一容器中的Web项目，定义了相同的webAppRootKey或者都没有定义\r\n解决办法：需要为每个web都定义一个webAppRootKey\r\n<!--app1中的web.xml-->\r\n<context-param>\r\n    <param-name>webAppRootKey</param-name>\r\n    <param-value>app1name</param-value>\r\n</context-param>\r\n \r\n<!--app2中的web.xml-->\r\n<context-param>\r\n    <param-name>webAppRootKey</param-name>\r\n    <param-value>app2name</param-value>\r\n</context-param>','',2,NULL,1,'yc','2019-03-09',NULL,NULL,'Tomcat发布多个项目时抛的webAppRootKey错原因是部署在同一容器中的Web项目，定义了相同的webAppRootKey或者都没有定义\r\n解决办法：需要为每个web都定义一个webAppRootKey',NULL,NULL,NULL,NULL,NULL),(101,'老干部','','','如何在Maven下搭建SSM框架','images/6.jpg','如何在Maven下搭建SSM框架\r\n1.Eclipse配置\r\n \r\n这里提供两种开发工具\r\nSSM框架项目可以使用Eclipse进行开发为了能简化开发流程，首先需要在Eclipse中安装SpringIDE插件，详细安装步骤请参考：\r\nhttps://blog.csdn.net/zhen_6137/article/details/79383941\r\n或者使用Spring官方提供的STS工具进行开发，下载地址：\r\nhttps://spring.io/tools/sts/legacy\r\n2.构建Maven环境\r\nMaven下载配置\r\nMaven下载地址：http://maven.apache.org/download.cgi\r\n\r\n下载完成后解压到：D:\\Program Files\\apache-maven-3.5.3下\r\n\r\n在环境变量中，新增\r\n系统变量名：MAVEN_HOME\r\n变量值：D:\\Program Files\\apache-maven-3.5.3\r\n在Path中追加：%MAVEN_HOME%\\bin;\r\n在命令行窗口中输入：mvn –v 显示如下信息，这说明Maven安装成功；\r\n\r\nMaven仓库设置\r\n由于Maven提供的公共仓库的访问速度十分缓慢，所以这里修改使用阿里的Maven仓库镜像，编辑conf/setting.xml文件，在mirrors节点下，新增如下内容，这样从仓库中下载jar包速度上会快很多。\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n<mirror>\r\n<id>nexus-aliyun</id>\r\n<mirrorOf>*</mirrorOf>\r\n<name>Nexusaliyun</name>\r\n<url>http://maven.aliyun.com/nexus/content/groups/public</url>\r\n</mirror>\r\n同时需要将maven下载的jar包存放路径进行设置，编辑conf/setting.xml文件，配置本地仓库路径：\r\n\r\n\r\n1\r\n<localRepository>D:/ProgramFiles/apache-maven-3.5.3/repo</localRepository>\r\n3.Eclipse（STS）与Maven整合\r\n设置自带maven整合工具，在Preferences中找到Maven节点，将User Settings项的设置配置为自己maven所在路径然后更新设置（Update Settings Reindex）\r\n\r\n点击Installations节点，添加maven runtime，具体如图所示：\r\n\r\n4.创建maven项目时设置JDK\r\n问题描述：eclipse创建maven项目时，显示的JDK默认版本为1.5，实际使用的JDK为1.8，如何修改？\r\n解决方案：编辑conf/settings.xml文件，在profiles节点下配置\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n<id>jdk-1.8</id>\r\n<activation>\r\n<activeByDefault>true</activeByDefault>\r\n<jdk>1.8</jdk>\r\n</activation>\r\n<properties>\r\n<maven.compiler.source>1.8</maven.compiler.source>\r\n<maven.compiler.target>1.8</maven.compiler.target>\r\n<maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion>\r\n</properties>\r\n5.使用maven创建项目\r\n新建项目，类型选择：Maven Project，点击Next\r\n\r\n选择默认工作空间，点击Next\r\n\r\n选择maven-archetype-webapp，点击Next\r\n\r\nGroup Id：com.ssm 表示应用的包名称\r\nArtifact Id：demossm 表示工程名称\r\n\r\n6.新建的项目问题处理\r\n创建完成后会出现如图所示报错：\r\n\r\n报错原因：\r\n\r\n解决办法：添加Tomcat Server 并选择JRE为本地安装的JDK的jre\r\n\r\n选择项目，右键编辑Build Path -> Configure Build Path\r\n\r\n将JRE System修改为自己本地安装的JDK下的jre，并添加Tomcat到编译环境中：\r\n\r\n此时项目已经不再报错\r\n\r\n创建后的工程需要完善目录信息，一般创建后需要存在4个目录（src/main/java  src/main/resources  src/test/java  src/test/resources）需要根据实际补充缺少的包；\r\n \r\n\r\n默认的Dynamic Web Module为2.3，使用Tomcat 8.0，需要修改为3.0\r\n这里如果直接修改是会报错并无法修改的，如下图所示：\r\n \r\n修改方法：\r\n \r\n① 编辑工程所在目录下.settrings文件夹中的org.eclipse.wst.common.project.facet.core.xml文件\r\n将\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<faceted-project>\r\n<fixedfacet=\"wst.jsdt.web\"/>\r\n<installedfacet=\"java\"version=\"1.5\"/>\r\n<installedfacet=\"jst.web\"version=\"2.3\"/>\r\n<installedfacet=\"wst.jsdt.web\"version=\"1.0\"/>\r\n</faceted-project>\r\n修改为：\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<faceted-project>\r\n<fixedfacet=\"wst.jsdt.web\"/>\r\n<installedfacet=\"java\"version=\"1.8\"/>\r\n<installedfacet=\"jst.web\"version=\"3.0\"/>\r\n<installedfacet=\"wst.jsdt.web\"version=\"1.0\"/>\r\n</faceted-project>\r\n \r\n修改项目web.xml文件为：\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<web-appxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\nxmlns=\"http://java.sun.com/xml/ns/javaee\"\r\nxsi:schemaLocation=\"http://java.sun.com/xml/ns/javaeehttp://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\r\nversion=\"3.0\">\r\n<display-name>ArchetypeCreatedWebApplication</display-name>\r\n</web-app>\r\n在pom.xml文件build节点中添加如下信息：\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n<plugins>\r\n<plugin>\r\n<groupId>org.apache.maven.plugins</groupId>\r\n<artifactId>maven-compiler-plugin</artifactId>\r\n<configuration>\r\n<source>1.8</source>\r\n<target>1.8</target>\r\n</configuration>\r\n</plugin>\r\n</plugins>\r\n \r\n修改后，在项目上右键，找到Maven属性下点击Update Project\r\n\r\n\r\n此时项目已经修改为Dynamic Web Module为3.0\r\n \r\n创建示例S_USER表：\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\nCREATETABLE\r\nS_USER\r\n(\r\nIDINT(4)NOTNULL,\r\nNAMEVARCHAR(80),\r\nACCOUNTVARCHAR(30),\r\nPASSWORDVARCHAR(128),\r\nPRIMARYKEY(ID)\r\n);\r\n7.添加基本配置文件\r\n添加以下配置文件\r\n\r\n \r\nPom.xml配置如下：\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n50\r\n51\r\n52\r\n53\r\n54\r\n55\r\n56\r\n57\r\n58\r\n59\r\n60\r\n61\r\n62\r\n63\r\n64\r\n65\r\n66\r\n67\r\n68\r\n69\r\n70\r\n71\r\n72\r\n73\r\n74\r\n75\r\n76\r\n77\r\n78\r\n79\r\n80\r\n81\r\n82\r\n83\r\n84\r\n85\r\n86\r\n87\r\n88\r\n89\r\n90\r\n91\r\n92\r\n93\r\n94\r\n95\r\n96\r\n97\r\n98\r\n99\r\n100\r\n101\r\n102\r\n103\r\n104\r\n105\r\n106\r\n107\r\n108\r\n109\r\n110\r\n111\r\n112\r\n113\r\n114\r\n115\r\n116\r\n117\r\n118\r\n119\r\n120\r\n121\r\n122\r\n123\r\n124\r\n125\r\n126\r\n127\r\n128\r\n129\r\n130\r\n131\r\n132\r\n133\r\n134\r\n135\r\n136\r\n137\r\n138\r\n139\r\n140\r\n141\r\n142\r\n143\r\n144\r\n145\r\n146\r\n147\r\n148\r\n149\r\n150\r\n151\r\n152\r\n153\r\n154\r\n155\r\n156\r\n157\r\n158\r\n159\r\n160\r\n161\r\n162\r\n163\r\n164\r\n165\r\n166\r\n167\r\n168\r\n169\r\n170\r\n171\r\n172\r\n173\r\n174\r\n175\r\n176\r\n177\r\n178\r\n179\r\n180\r\n181\r\n182\r\n183\r\n184\r\n185\r\n186\r\n187\r\n188\r\n189\r\n190\r\n191\r\n192\r\n193\r\n194\r\n195\r\n196\r\n197\r\n198\r\n199\r\n200\r\n201\r\n202\r\n203\r\n204\r\n205\r\n206\r\n207\r\n208\r\n209\r\n210\r\n211\r\n212\r\n213\r\n214\r\n215\r\n216\r\n217\r\n218\r\n219\r\n220\r\n221\r\n222\r\n223\r\n224\r\n225\r\n<projectxmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0http://maven.apache.org/maven-v4_0_0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <groupId>com.ssm</groupId>\r\n    <artifactId>demossm</artifactId>\r\n    <packaging>war</packaging>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <name>demossmMavenWebapp</name>\r\n    <url>http://maven.apache.org</url>\r\n    <properties>\r\n        <!--Spring版本号-->\r\n        <spring.version>4.3.8.RELEASE</spring.version>\r\n        <mybatis.version>3.3.0</mybatis.version>\r\n        <aspect.version>1.8.0</aspect.version>\r\n        <mysql.version>5.1.35</mysql.version>\r\n        <slf4j.version>1.7.12</slf4j.version>\r\n        <log4j.version>1.2.17</log4j.version>\r\n        <jackson.version>2.5.4</jackson.version>\r\n    </properties>\r\n    <dependencies>\r\n        <!--Spring相关包start-->\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-core</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-aop</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-web</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-webmvc</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-jdbc</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-tx</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <!--以下包看情况需要-->\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-test</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-oxm</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-context</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-context-support</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-expression</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-orm</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework</groupId>\r\n            <artifactId>spring-webmvc</artifactId>\r\n            <version>${spring.version}</version>\r\n        </dependency>\r\n        <!--spring框架包end-->\r\n        <!--AOP相关包SpringAOP会使用到以下两个包-->\r\n        <dependency>\r\n            <groupId>org.aspectj</groupId>\r\n            <artifactId>aspectjrt</artifactId>\r\n            <version>${aspect.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.aspectj</groupId>\r\n            <artifactId>aspectjweaver</artifactId>\r\n            <version>${aspect.version}</version>\r\n        </dependency>\r\n        <!--MyBatis相关包-->\r\n        <dependency>\r\n            <groupId>org.mybatis</groupId>\r\n            <artifactId>mybatis</artifactId>\r\n            <version>${mybatis.version}</version>\r\n        </dependency>\r\n        <!--Spring集成MyBatis-->\r\n        <dependency>\r\n            <groupId>org.mybatis</groupId>\r\n            <artifactId>mybatis-spring</artifactId>\r\n            <version>1.2.3</version>\r\n        </dependency>\r\n        <!--MySQL相关包-->\r\n        <dependency>\r\n            <groupId>mysql</groupId>\r\n            <artifactId>mysql-connector-java</artifactId>\r\n            <version>${mysql.version}</version>\r\n        </dependency>\r\n        <!--数据库连接池-->\r\n        <dependency>\r\n            <groupId>com.alibaba</groupId>\r\n            <artifactId>druid</artifactId>\r\n            <version>1.0.20</version>\r\n        </dependency>\r\n        <!--json数据格式支持-->\r\n        <dependency>\r\n            <groupId>net.sf.json-lib</groupId>\r\n            <artifactId>json-lib</artifactId>\r\n            <version>2.4</version>\r\n            <classifier>jdk15</classifier>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>com.fasterxml.jackson.core</groupId>\r\n            <artifactId>jackson-core</artifactId>\r\n            <version>${jackson.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>com.fasterxml.jackson.core</groupId>\r\n            <artifactId>jackson-databind</artifactId>\r\n            <version>${jackson.version}</version>\r\n        </dependency>\r\n        <!--jstl标签类-->\r\n        <dependency>\r\n            <groupId>jstl</groupId>\r\n            <artifactId>jstl</artifactId>\r\n            <version>1.2</version>\r\n        </dependency>\r\n        <!--Servlet-->\r\n        <dependency>\r\n            <groupId>javax.servlet</groupId>\r\n            <artifactId>servlet-api</artifactId>\r\n            <version>2.5</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>javax.servlet.jsp</groupId>\r\n            <artifactId>jsp-api</artifactId>\r\n            <version>2.1</version>\r\n        </dependency>\r\n        <!--上传组件包start-->\r\n        <dependency>\r\n            <groupId>commons-fileupload</groupId>\r\n            <artifactId>commons-fileupload</artifactId>\r\n            <version>1.3.1</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>commons-io</groupId>\r\n            <artifactId>commons-io</artifactId>\r\n            <version>2.4</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>commons-codec</groupId>\r\n            <artifactId>commons-codec</artifactId>\r\n            <version>1.10</version>\r\n        </dependency>\r\n        <!--上传组件包end-->\r\n        <!--logstart-->\r\n        <dependency>\r\n            <groupId>log4j</groupId>\r\n            <artifactId>log4j</artifactId>\r\n            <version>${log4j.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.slf4j</groupId>\r\n            <artifactId>slf4j-api</artifactId>\r\n            <version>${slf4j.version}</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.slf4j</groupId>\r\n            <artifactId>slf4j-log4j12</artifactId>\r\n            <version>${slf4j.version}</version>\r\n        </dependency>\r\n        <!--logEND-->\r\n        <!--Junit单元测试-->\r\n        <dependency>\r\n            <groupId>junit</groupId>\r\n            <artifactId>junit</artifactId>\r\n            <version>3.8.1</version>\r\n            <scope>test</scope>\r\n        </dependency>\r\n    </dependencies>\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.apache.maven.plugins</groupId>\r\n                <artifactId>maven-compiler-plugin</artifactId>\r\n                <configuration>\r\n                    <source>1.8</source>\r\n                    <target>1.8</target>\r\n                </configuration>\r\n            </plugin>\r\n        </plugins>\r\n        <finalName>demossm</finalName>\r\n    </build>\r\n</project>\r\n \r\njdbc.properties\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\ndriverClassName=com.mysql.jdbc.Driver\r\nurl=jdbc:mysql://localhost:3306/cpanydb\r\nusername=cpany\r\npassword=cpany\r\n#定义初始连接数\r\ninitialSize=1\r\n#定义最大连接数\r\nmaxActive=20\r\n#定义最大空闲\r\nmaxIdle=20\r\n#定义最小空闲\r\nminIdle=1\r\n#定义最长等待时间\r\nmaxWait=60000\r\n log4j.properties\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n#定义LOG输出级别\r\nlog4j.rootLogger=DEBUG,Console\r\n#定义日志输出目的地为控制台\r\nlog4j.appender.Console=org.apache.log4j.ConsoleAppender\r\nlog4j.appender.Console.Target=System.out\r\nlog4j.appender.Console.layout=org.apache.log4j.PatternLayout\r\nlog4j.appender.Console.layout.ConversionPattern=%d[%t]%-5p[%c]-%m%n\r\n#文件大小到达指定尺寸的时候产生一个新的文件\r\nlog4j.appender.File=org.apache.log4j.RollingFileAppender\r\n#指定输出目录\r\nlog4j.appender.File.File=C:/logs/demossm.log\r\n#定义文件最大大小\r\nlog4j.appender.File.MaxFileSize=10MB\r\n#输出所以日志，如果换成DEBUG表示输出DEBUG以上级别日志\r\nlog4j.appender.File.Threshold=ALL\r\nlog4j.appender.File.layout=org.apache.log4j.PatternLayout\r\nlog4j.appender.File.layout.ConversionPattern=[%p][%d{yyyy-MM-ddHH\\:mm\\:ss}][%c]%m%n\r\nlog4j.logger.java.sql.ResultSet=INFO\r\nlog4j.logger.org.apache=INFO\r\nlog4j.logger.java.sql.Connection=DEBUG\r\nlog4j.logger.java.sql.Statement=DEBUG\r\nlog4j.logger.java.sql.PreparedStatement=DEBUG\r\n mybatis-config.xml\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<!DOCTYPEconfiguration\r\nPUBLIC\"-//mybatis.org//DTDConfig3.0//EN\"\r\n\"http://mybatis.org/dtd/mybatis-3-config.dtd\">\r\n<configuration>\r\n<!--设置别名-->\r\n<typeAliases>\r\n<packagename=\"com.ssm.domain\"/>\r\n</typeAliases>\r\n</configuration>\r\nspring-mvc.xml\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<beansxmlns=\"http://www.springframework.org/schema/beans\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xmlns:context=\"http://www.springframework.org/schema/context\"\r\n    xmlns:mvc=\"http://www.springframework.org/schema/mvc\"\r\n    xsi:schemaLocation=\"\r\nhttp://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsd\r\nhttp://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context.xsd\r\nhttp://www.springframework.org/schema/mvchttp://www.springframework.org/schema/mvc/spring-mvc.xsd\">\r\n    <!--启动自动扫描-->\r\n    <context:component-scanbase-package=\"com.ssm.*\"/>\r\n    <!--注册MVC注解驱动-->\r\n    <mvc:annotation-driven>\r\n        <!--避免IE执行AJAX时,返回JSON出现下载文件-->\r\n        <mvc:message-converters>\r\n            <bean\r\n                class=\"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter\">\r\n                <propertyname=\"supportedMediaTypes\">\r\n                    <list>\r\n                        <value>text/html;charset=UTF-8</value>\r\n                        <value>text/json;charset=UTF-8</value>\r\n                        <value>application/json;charset=UTF-8</value>\r\n                    </list>\r\n                </property>\r\n            </bean>\r\n        </mvc:message-converters>\r\n    </mvc:annotation-driven>\r\n    <!--静态资源可访问的设置方式-->\r\n    <mvc:default-servlet-handler/>\r\n    <!--配置视图解析器，可以显式设置，也可以不设置，不设置会依据SpringMVC的默认设置-->\r\n    <beanid=\"viewResolver\"\r\n        class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\r\n        <propertyname=\"prefix\"value=\"/WEB-INF/views/\"/>\r\n        <propertyname=\"suffix\"value=\".jsp\"/>\r\n    </bean>\r\n</beans>\r\nspring-mybatis.xml\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<beansxmlns=\"http://www.springframework.org/schema/beans\"\r\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\nxsi:schemaLocation=\"\r\nhttp://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n<beanid=\"propertyConfigurer\"\r\nclass=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\r\n<propertyname=\"location\"value=\"classpath:jdbc.properties\"/>\r\n</bean>\r\n<!--定义数据源Bean-->\r\n<!--Druid-->\r\n<beanid=\"dataSource\"\r\nclass=\"com.alibaba.druid.pool.DruidDataSource\">\r\n<propertyname=\"driverClassName\"value=\"${driverClassName}\"/>\r\n<propertyname=\"url\"value=\"${url}\"/>\r\n<propertyname=\"username\"value=\"${username}\"/>\r\n<propertyname=\"password\"value=\"${password}\"/>\r\n<!--配置初始化大小、最小、最大连接数-->\r\n<propertyname=\"initialSize\"value=\"${initialSize}\"/>\r\n<propertyname=\"minIdle\"value=\"${minIdle}\"/>\r\n<propertyname=\"maxIdle\"value=\"${maxIdle}\"/>\r\n<propertyname=\"maxActive\"value=\"${maxActive}\"/>\r\n<!--配置获取连接等待超时的时间-->\r\n<propertyname=\"maxWait\"value=\"${maxWait}\"/>\r\n</bean>\r\n<!--注册SqlSessionFactoryBean-->\r\n<beanid=\"sqlSessionFactory\"\r\nclass=\"org.mybatis.spring.SqlSessionFactoryBean\">\r\n<propertyname=\"dataSource\"ref=\"dataSource\"/>\r\n<!--自动扫描mappers.xml文件-->\r\n<propertyname=\"mapperLocations\"\r\nvalue=\"classpath:mappers/*.xml\"/>\r\n<propertyname=\"configLocation\"\r\nvalue=\"classpath:mybatis-config.xml\"></property>\r\n</bean>\r\n<!--DAO接口所在包名，Spring会自动查找其下的类-->\r\n<beanclass=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\r\n<propertyname=\"basePackage\"value=\"com.ssm.dao\"/>\r\n<propertyname=\"sqlSessionFactoryBeanName\"\r\nvalue=\"sqlSessionFactory\"/>\r\n</bean>\r\n</beans>\r\nspring-tx.xml\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<beansxmlns=\"http://www.springframework.org/schema/beans\"\r\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\nxmlns:context=\"http://www.springframework.org/schema/context\"\r\nxmlns:aop=\"http://www.springframework.org/schema/aop\"\r\nxmlns:tx=\"http://www.springframework.org/schema/tx\"\r\nxsi:schemaLocation=\"\r\nhttp://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsd\r\nhttp://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context.xsd\r\nhttp://www.springframework.org/schema/aophttp://www.springframework.org/schema/aop/spring-aop.xsd\r\nhttp://www.springframework.org/schema/txhttp://www.springframework.org/schema/tx/spring-tx.xsd\">\r\n<!--开启AOP注解扫描-->\r\n<aop:aspectj-autoproxyproxy-target-class=\"true\"/>\r\n<!--事务管理器，依赖于数据源-->\r\n<beanid=\"txManager\"class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\r\n<propertyname=\"dataSource\"ref=\"dataSource\"/>\r\n</bean>\r\n<!--编写通知：对事务进行增强（通知），需要编写对切入点和具体执行事务细节-->\r\n<tx:adviceid=\"txAdvice\"transaction-manager=\"txManager\">\r\n<tx:attributes>\r\n<!--\r\n为切入点方法添加事务详情\r\nname：方法名，*表示任意方法名称\r\npropagation：设置传播行为\r\nisolation：设置隔离级别\r\nread-only：是否只读\r\n-->\r\n<tx:methodname=\"add*\"propagation=\"REQUIRED\"isolation=\"DEFAULT\"read-only=\"false\"rollback-for=\"Exception\"/>\r\n<tx:methodname=\"delete*\"propagation=\"REQUIRED\"isolation=\"DEFAULT\"read-only=\"false\"rollback-for=\"Exception\"/>\r\n<tx:methodname=\"update*\"propagation=\"REQUIRED\"isolation=\"DEFAULT\"read-only=\"false\"rollback-for=\"Exception\"/>\r\n</tx:attributes>\r\n</tx:advice>\r\n<!--设置AOP，让Spring自动对目标生成代理，需要使用AspectJ表达式-->\r\n<aop:configproxy-target-class=\"true\">\r\n<!--切面：整合切入点和通知-->\r\n<aop:advisoradvice-ref=\"txAdvice\"pointcut=\"within(com.ssm.controller.*)\"/>\r\n</aop:config>\r\n</beans>\r\n8.配置web.xml文件\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n50\r\n51\r\n52\r\n53\r\n54\r\n55\r\n56\r\n57\r\n58\r\n59\r\n60\r\n61\r\n62\r\n63\r\n64\r\n65\r\n66\r\n67\r\n68\r\n69\r\n70\r\n71\r\n72\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<-appxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xmlns=\"http://java.sun.com/xml/ns/javaee\"\r\n    xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaeehttp://java.sun.com/xml/ns/javaee/-app_3_0.xsd\"\r\n    version=\"3.0\">\r\n    <display-name>ArchetypeCreatedApplication</display-name>\r\n    <welcome-file-list>\r\n        <welcome-file>/index.jsp</welcome-file>\r\n    </welcome-file-list>\r\n    <!--加载springbean-->\r\n    <context-param>\r\n        <param-name>contextConfigLocation</param-name>\r\n        <param-value>classpath:applicationContext.xml</param-value>\r\n    </context-param>\r\n    <listener>\r\n        <listener-class>org.springframework..context.ContextLoaderListener</listener-class>\r\n    </listener>\r\n    <!--编码过滤器-->\r\n    <filter>\r\n        <filter-name>encodingFilter</filter-name>\r\n        <filter-class>org.springframework..filter.CharacterEncodingFilter</filter-class>\r\n        <init-param>\r\n            <param-name>encoding</param-name>\r\n            <param-value>UTF-8</param-value>\r\n        </init-param>\r\n    </filter>\r\n    <filter-mapping>\r\n        <filter-name>encodingFilter</filter-name>\r\n        <url-pattern>/*</url-pattern>\r\n    </filter-mapping>\r\n    <!--日志记录-->\r\n    <context-param>\r\n        <!--日志配置文件路径-->\r\n        <param-name>log4jConfigLocation</param-name>\r\n        <param-value>classpath:log4j.properties</param-value>\r\n    </context-param>\r\n    <context-param>\r\n        <!--日志页面的刷新间隔-->\r\n        <param-name>log4jRefreshInterval</param-name>\r\n        <param-value>6000</param-value>\r\n    </context-param>\r\n    <listener>\r\n        <listener-class>org.springframework..util.Log4jConfigListener</listener-class>\r\n    </listener>\r\n    <!--SpringMVCservlet-->\r\n    <servlet>\r\n        <servlet-name>SpringMVC</servlet-name>\r\n        <servlet-class>org.springframework..servlet.DispatcherServlet</servlet-class>\r\n        <init-param>\r\n            <param-name>contextConfigLocation</param-name>\r\n            <param-value>classpath:spring-mvc.xml</param-value>\r\n        </init-param>\r\n        <load-on-startup>1</load-on-startup>\r\n    </servlet>\r\n    <servlet-mapping>\r\n        <servlet-name>SpringMVC</servlet-name>\r\n        <url-pattern>/</url-pattern>\r\n    </servlet-mapping>\r\n    \r\n<servlet-mapping>\r\n<servlet-name>default</servlet-name>\r\n<url-pattern>*.js</url-pattern>\r\n</servlet-mapping>\r\n<servlet-mapping>\r\n<servlet-name>default</servlet-name>\r\n<url-pattern>*.css</url-pattern>\r\n</servlet-mapping>\r\n</-app>\r\n9.添加相关处理类\r\n在src/main/java下分别添加我们的dao包，domain包，service包，还有controller包。包里面添加相应的类，效果图如下：\r\n\r\n \r\nSUser.java\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\npackagecom.ssm.domain;\r\npublicclassSUser{\r\n//成员变量\r\nprivateIntegerid;\r\nprivateStringname;\r\nprivateStringaccount;\r\nprivateStringpassword;\r\n//构造函数\r\npublicSUser(){\r\nsuper();\r\n}\r\npublicSUser(Integerid,Stringname,Stringaccount,Stringpassword){\r\nsuper();\r\nthis.id=id;\r\nthis.name=name;\r\nthis.account=account;\r\nthis.password=password;\r\n}\r\n//成员方法\r\npublicIntegergetId(){\r\nreturnid;\r\n}\r\npublicvoidsetId(Integerid){\r\nthis.id=id;\r\n}\r\npublicStringgetName(){\r\nreturnname;\r\n}\r\npublicvoidsetName(Stringname){\r\nthis.name=name;\r\n}\r\npublicStringgetPassword(){\r\nreturnpassword;\r\n}\r\npublicvoidsetPassword(Stringpassword){\r\nthis.password=password;\r\n}\r\npublicStringgetAccount(){\r\nreturnaccount;\r\n}\r\npublicvoidsetAccount(Stringaccount){\r\nthis.account=account;\r\n}\r\n}\r\nSUserController.java\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n50\r\n51\r\n52\r\n53\r\n54\r\n55\r\n56\r\n57\r\n58\r\n59\r\n60\r\n61\r\n62\r\n63\r\n64\r\n65\r\n66\r\n67\r\n68\r\n69\r\n70\r\n71\r\n72\r\n73\r\n74\r\n75\r\n76\r\n77\r\n78\r\n79\r\n80\r\n81\r\n82\r\n83\r\n84\r\n85\r\n86\r\n87\r\n88\r\n89\r\n90\r\n91\r\n92\r\n93\r\n94\r\n95\r\n96\r\n97\r\n98\r\n99\r\n100\r\n101\r\n102\r\n103\r\n104\r\n105\r\n106\r\n107\r\n108\r\n109\r\n110\r\n111\r\n112\r\n113\r\n114\r\n115\r\n116\r\n117\r\n118\r\n119\r\n120\r\n121\r\n122\r\n123\r\n124\r\n125\r\n126\r\n127\r\n128\r\n129\r\n130\r\n131\r\n132\r\n133\r\n134\r\n135\r\n136\r\n137\r\n138\r\n139\r\n140\r\n141\r\n142\r\n143\r\n144\r\n145\r\n146\r\n147\r\n148\r\n149\r\n150\r\n151\r\n152\r\n153\r\n154\r\n155\r\n156\r\n157\r\n158\r\n159\r\n160\r\n161\r\n162\r\n163\r\n164\r\n165\r\n166\r\n167\r\npackagecom.ssm.controller;\r\nimportjava.util.List;\r\nimportjavax.annotation.Resource;\r\nimportjavax.servlet.http.HttpServletRequest;\r\nimportorg.springframework.stereotype.Controller;\r\nimportorg.springframework.ui.Model;\r\nimportorg.springframework.web.bind.annotation.RequestMapping;\r\nimportorg.springframework.web.bind.annotation.ResponseBody;\r\nimportcom.ssm.domain.SUser;\r\nimportcom.ssm.service.SUserService;\r\nimportnet.sf.json.JSONObject;\r\n@Controller\r\n@RequestMapping(\"/suser\")\r\npublicclassSUserController{\r\n    @Resource\r\n    privateSUserServicesUserService;\r\n    /**\r\n    *列表数据\r\n    *\r\n    *@parammodel\r\n    *@return\r\n    */\r\n    @ResponseBody\r\n    @RequestMapping(\"/listSUserData\")\r\n    publicList<SUser>listSUserData(Modelmodel){\r\n        List<SUser>sUserList=sUserService.listSUserData();\r\n        returnsUserList;\r\n    }\r\n    /**\r\n    *新增数据\r\n    *\r\n    *@paramrequest\r\n    *@paramsUser\r\n    *@return\r\n    */\r\n    @RequestMapping(\"/addSUserData\")\r\n    @ResponseBody\r\n    publicJSONObjectaddSUserData(HttpServletRequestrequest,SUsersUser){\r\n        JSONObjectjsonObject=newJSONObject();\r\n        try{\r\n            sUserService.addSUserData(sUser);\r\n            jsonObject.put(\"flag\",\"success\");\r\n            jsonObject.put(\"msg\",\"成功\");\r\n        }catch(Exceptione){\r\n            jsonObject.put(\"flag\",\"failed\");\r\n            jsonObject.put(\"msg\",\"失败\");\r\n        }\r\n        returnjsonObject;\r\n    }\r\n    /**\r\n    *修改数据\r\n    *\r\n    *@paramrequest\r\n    *@paramsUser\r\n    *@return\r\n    */\r\n    @RequestMapping(\"/modifySUserData\")\r\n    @ResponseBody\r\n    publicJSONObjectmodifySUserData(HttpServletRequestrequest,SUsersUser){\r\n        JSONObjectjsonObject=newJSONObject();\r\n        try{\r\n            sUserService.modifySUserData(sUser);\r\n            jsonObject.put(\"flag\",\"success\");\r\n            jsonObject.put(\"msg\",\"成功\");\r\n        }catch(Exceptione){\r\n            jsonObject.put(\"flag\",\"failed\");\r\n            jsonObject.put(\"msg\",\"失败\");\r\n        }\r\n        returnjsonObject;\r\n    }\r\n    /**\r\n    *获取数据\r\n    *\r\n    *@paramrequest\r\n    *@parammodel\r\n    *@return\r\n    */\r\n    @ResponseBody\r\n    @RequestMapping(\"/getSUserData\")\r\n    publicSUsergetSUserData(HttpServletRequestrequest,Modelmodel){\r\n        SUsersUser=null;\r\n        Stringparam=request.getParameter(\"id\");\r\n        sUser=sUserService.getSUserData(param);\r\n        returnsUser;\r\n    }\r\n    /**\r\n    *删除数据\r\n    *\r\n    *@paramrequest\r\n    *@paramsUser\r\n    *@return\r\n    */\r\n    @RequestMapping(\"/deleteSUserData\")\r\n    @ResponseBody\r\n    publicJSONObjectdeleteSUserData(HttpServletRequestrequest,SUsersUser){\r\n        JSONObjectjsonObject=newJSONObject();\r\n        try{\r\n            sUserService.deleteSUserData(sUser);\r\n            jsonObject.put(\"flag\",\"success\");\r\n            jsonObject.put(\"msg\",\"成功\");\r\n        }catch(Exceptione){\r\n            jsonObject.put(\"flag\",\"failed\");\r\n            jsonObject.put(\"msg\",\"失败\");\r\n        }\r\n        returnjsonObject;\r\n    }\r\n    /**\r\n    *列表页面\r\n    *\r\n    *@return\r\n    */\r\n    @RequestMapping(\"/getSUserListPage\")\r\n    publicStringgetSUserListPage(){\r\n        return\"suser/listSUser\";\r\n    }\r\n    /**\r\n    *新增页面\r\n    *\r\n    *@return\r\n    */\r\n    @RequestMapping(\"/getSUserAddPage\")\r\n    publicStringgetSUserAddPage(){\r\n        return\"suser/addSUser\";\r\n    }\r\n    /**\r\n    *修改页面\r\n    *\r\n    *@paramrequest\r\n    *@parammodel\r\n    *@return\r\n    */\r\n    @RequestMapping(\"/getSUserModifyPage\")\r\n    publicStringgetSUserModifyPage(HttpServletRequestrequest,Modelmodel){\r\n        Stringparam=request.getParameter(\"id\");\r\n        model.addAttribute(\"param\",param);\r\n        return\"suser/modifySUser\";\r\n    }\r\n    /**\r\n    *查看页面\r\n    *\r\n    *@paramrequest\r\n    *@parammodel\r\n    *@return\r\n    */\r\n    @RequestMapping(\"/getSUserDetailPage\")\r\n    publicStringgetSUserDetailPage(HttpServletRequestrequest,Modelmodel){\r\n        Stringparam=request.getParameter(\"id\");\r\n        model.addAttribute(\"param\",param);\r\n        return\"suser/detailSUser\";\r\n    }\r\n}\r\nSUserService.java\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\npackagecom.ssm.service;\r\nimportjava.util.List;\r\nimportcom.ssm.domain.SUser;\r\npublicinterfaceSUserService{\r\n    publicvoidaddSUserData(SUsersUser);\r\n    publicvoidmodifySUserData(SUsersUser);\r\n    publicvoiddeleteSUserData(SUsersUser);\r\n    publicSUsergetSUserData(Stringid);\r\n    publicList<SUser>listSUserData();\r\n}\r\nSUserServiceImpl.java\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\npackagecom.ssm.service.impl;\r\nimportjava.util.List;\r\nimportjavax.annotation.Resource;\r\nimportorg.springframework.stereotype.Service;\r\nimportcom.ssm.dao.SUserDao;\r\nimportcom.ssm.domain.SUser;\r\nimportcom.ssm.service.SUserService;\r\n@Service(\"sUserService\")\r\npublicclassSUserServiceImplimplementsSUserService{\r\n    @Resource\r\n    privateSUserDaosUserDao;\r\n    @Override\r\n    publicvoidaddSUserData(SUsersUser){\r\n        sUserDao.addSUser(sUser);\r\n    }\r\n    @Override\r\n    publicvoidmodifySUserData(SUsersUser){\r\n        sUserDao.modifySUser(sUser);\r\n    }\r\n    @Override\r\n    publicSUsergetSUserData(Stringid){\r\n        returnsUserDao.detailSUser(id);\r\n    }\r\n    @Override\r\n    publicvoiddeleteSUserData(SUsersUser){\r\n        sUserDao.deleteSUser(sUser);\r\n    }\r\n    @Override\r\n    publicList<SUser>listSUserData(){\r\n        returnsUserDao.listSUser();\r\n    }\r\n}\r\nSUserDao.java\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\npackagecom.ssm.dao;\r\nimportjava.util.List;\r\nimportcom.ssm.domain.SUser;\r\npublicinterfaceSUserDao{\r\n    publicvoidaddSUser(SUsersUser);\r\n    publicvoidmodifySUser(SUsersUser);\r\n    publicvoiddeleteSUser(SUsersUser);\r\n    publicSUserdetailSUser(Stringid);\r\n    publicList<SUser>listSUser();\r\n}\r\n \r\n在resources下添加映射文件\r\n \r\n\r\nSUserMapper.xml\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n50\r\n51\r\n52\r\n53\r\n54\r\n55\r\n56\r\n57\r\n58\r\n59\r\n60\r\n61\r\n62\r\n63\r\n64\r\n65\r\n66\r\n67\r\n68\r\n69\r\n70\r\n71\r\n72\r\n73\r\n74\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<!DOCTYPEmapperPUBLIC\"-//mybatis.org//DTDMapper3.0//EN\"\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\r\n<mappernamespace=\"com.ssm.dao.SUserDao\">\r\n    <resultMapid=\"BaseResultMap\"type=\"com.ssm.domain.SUser\">\r\n        <resultcolumn=\"id\"property=\"id\"jdbcType=\"INTEGER\"/>\r\n        <resultcolumn=\"name\"property=\"name\"jdbcType=\"VARCHAR\"/>\r\n        <resultcolumn=\"account\"property=\"account\"jdbcType=\"VARCHAR\"/>\r\n        <resultcolumn=\"password\"property=\"password\"\r\n            jdbcType=\"VARCHAR\"/>\r\n    </resultMap>\r\n    <sqlid=\"Base_Column_List\">\r\n        id,name,account,password\r\n    </sql>\r\n    <!--查询所有用户-->\r\n    <selectid=\"listSUser\"resultMap=\"BaseResultMap\">\r\n        select\r\n        <includerefid=\"Base_Column_List\"/>\r\n        froms_user\r\n    </select>\r\n    <selectid=\"detailSUser\"resultMap=\"BaseResultMap\">\r\n        select\r\n        <includerefid=\"Base_Column_List\"/>\r\n        froms_userwhereid=#{id}\r\n    </select>\r\n    <updateid=\"modifySUser\">\r\n        updates_userset\r\n        name=#{name},\r\n        account=#{account},\r\n        password=#{password}\r\n        where\r\n        id=#{id,jdbcType=INTEGER}\r\n    </update>\r\n    <deleteid=\"deleteSUser\">\r\n        deletefroms_userwhereid=#{id,jdbcType=INTEGER}\r\n    </delete>\r\n    <!--插入-->\r\n    <insertid=\"addSUser\">\r\n        insertintos_user\r\n        <trimprefix=\"(\"suffix=\")\"suffixOverrides=\",\">\r\n            <iftest=\"id!=null\">\r\n                id,\r\n            </if>\r\n            <iftest=\"name!=null\">\r\n                name,\r\n            </if>\r\n            <iftest=\"account!=null\">\r\n                account,\r\n            </if>\r\n            <iftest=\"password!=null\">\r\n                password,\r\n            </if>\r\n        </trim>\r\n        <trimprefix=\"values(\"suffix=\")\"suffixOverrides=\",\">\r\n            <iftest=\"id!=null\">\r\n                #{id,jdbcType=INTEGER},\r\n            </if>\r\n            <iftest=\"name!=null\">\r\n                #{name,jdbcType=VARCHAR},\r\n            </if>\r\n            <iftest=\"account!=null\">\r\n                #{account,jdbcType=VARCHAR},\r\n            </if>\r\n            <iftest=\"password!=null\">\r\n                #{password,jdbcType=VARCHAR},\r\n            </if>\r\n        </trim>\r\n    </insert>\r\n</mapper>\r\n10.添加相关前台页面\r\nwebapp目录下添加如下信息：\r\n\r\naddSUser.jsp\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n50\r\n51\r\n52\r\n53\r\n54\r\n55\r\n56\r\n57\r\n58\r\n59\r\n60\r\n61\r\n62\r\n63\r\n<%@pagelanguage=\"java\"contentType=\"text/html;charset=UTF-8\"\r\n    pageEncoding=\"UTF-8\"%>\r\n<!DOCTYPEhtmlPUBLIC\"-//W3C//DTDHTML4.01Transitional//EN\"\"http://www.w3.org/TR/html4/loose.dtd\">\r\n<html>\r\n<head>\r\n<metahttp-equiv=\"Content-Type\"content=\"text/html;charset=UTF-8\">\r\n<title>新增页面</title>\r\n<jsp:includepage=\"/includeUI.jsp\"></jsp:include>\r\n</head>\r\n<body>\r\n    <divclass=\"easyui-panel\"title=\"新增\"style=\"width:300px;\">\r\n        <formid=\"ff\"method=\"post\">\r\n            <tablecellpadding=\"5\">\r\n                <tr>\r\n                    <td>id</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"id\"name=\"id\"data-options=\"required:true\"></input></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>name</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"name\"name=\"name\"></input></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>account</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"account\"name=\"account\"></input></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>password</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"password\"name=\"password\"></input></td>\r\n                </tr>\r\n            </table>\r\n            <divalign=\"center\">\r\n                <aclass=\"easyui-linkbutton\"data-options=\"iconCls:\'icon-ok\'\"onclick=\"submit()\">确定</a>\r\n                <aclass=\"easyui-linkbutton\"data-options=\"iconCls:\'icon-cancel\'\"onclick=\"reset()\">重置</a>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</body>\r\n<scripttype=\"text/javascript\">\r\nfunctionsubmit(){\r\n    $(\'#ff\').form(\'submit\',{\r\n        url:\'addSUserData\',\r\n        dataType:\'json\',\r\n        onSubmit:function(){\r\n            //dosomecheck\r\n            //returnfalsetopreventsubmit;\r\n        },\r\n        success:function(data){\r\n            responseText=JSON.parse(data);\r\n            if(responseText.flag==\'success\'){\r\n                $.messager.alert(\'提示\',responseText.msg,\'info\');\r\n                window.opener.location.href=window.opener.location.href;\r\n                window.close();\r\n            }else{\r\n                $.messager.alert(\'错误\',responseText.msg,\'error\');\r\n            }\r\n        }\r\n    });\r\n}\r\nfunctionreset(){\r\n    $(\'#ff\').form(\'clear\');\r\n}\r\n</script>\r\n</html>\r\ndetailSUser.jsp\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n<%@pagelanguage=\"java\"contentType=\"text/html;charset=UTF-8\"\r\npageEncoding=\"UTF-8\"%>\r\n<!DOCTYPEhtmlPUBLIC\"-//W3C//DTDHTML4.01Transitional//EN\"\"http://www.w3.org/TR/html4/loose.dtd\">\r\n<html>\r\n<head>\r\n<metahttp-equiv=\"Content-Type\"content=\"text/html;charset=UTF-8\">\r\n<title>查看页面</title>\r\n<jsp:includepage=\"/includeUI.jsp\"></jsp:include>\r\n</head>\r\n<body>\r\n    <divclass=\"easyui-panel\"title=\"查看\"style=\"width:300px;\">\r\n        <formid=\"ff\"method=\"post\">\r\n            <tablecellpadding=\"5\">\r\n                <tr>\r\n                    <td>id</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"id\"name=\"id\"disabled=\"disabled\"data-options=\"required:true\"></input></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>name</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"name\"name=\"name\"disabled=\"disabled\"></input></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>account</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"account\"name=\"account\"disabled=\"disabled\"></input></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>password</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"password\"name=\"password\"disabled=\"disabled\"></input></td>\r\n                </tr>\r\n            </table>\r\n            <divalign=\"center\">\r\n                <aclass=\"easyui-linkbutton\"data-options=\"iconCls:\'icon-cancel\'\"onclick=\"close()\">关闭</a>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</body>\r\n<scripttype=\"text/javascript\">\r\n$(function(){\r\n    varparam=\'${param.id}\';\r\n    varurl=\'getSUserData?id=\'+param;\r\n    $(\'#ff\').form(\'load\',url);\r\n});\r\nfunctionclose(){\r\n    window.close();\r\n}\r\n</script>\r\n</html>\r\nmodifySUser.jsp\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n50\r\n51\r\n52\r\n53\r\n54\r\n55\r\n56\r\n57\r\n58\r\n59\r\n60\r\n61\r\n62\r\n63\r\n64\r\n65\r\n66\r\n67\r\n68\r\n69\r\n<%@pagelanguage=\"java\"contentType=\"text/html;charset=UTF-8\"\r\npageEncoding=\"UTF-8\"%>\r\n<!DOCTYPEhtmlPUBLIC\"-//W3C//DTDHTML4.01Transitional//EN\"\"http://www.w3.org/TR/html4/loose.dtd\">\r\n<html>\r\n<head>\r\n<metahttp-equiv=\"Content-Type\"content=\"text/html;charset=UTF-8\">\r\n<title>修改页面</title>\r\n<jsp:includepage=\"/includeUI.jsp\"></jsp:include>\r\n</head>\r\n<body>\r\n    <divclass=\"easyui-panel\"title=\"修改\"style=\"width:300px;\">\r\n        <formid=\"ff\"method=\"post\">\r\n            <tablecellpadding=\"5\">\r\n                <tr>\r\n                    <td>id</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"id\"name=\"id\"readonly=\"readonly\"data-options=\"required:true\"></input></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>name</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"name\"name=\"name\"></input></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>account</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"account\"name=\"account\"></input></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>password</td>\r\n                    <td><inputclass=\"easyui-textbox\"type=\"text\"id=\"password\"name=\"password\"></input></td>\r\n                </tr>\r\n            </table>\r\n            <divalign=\"center\">\r\n                <aclass=\"easyui-linkbutton\"data-options=\"iconCls:\'icon-ok\'\"onclick=\"submit()\">确定</a>\r\n                <aclass=\"easyui-linkbutton\"data-options=\"iconCls:\'icon-cancel\'\"onclick=\"cancel()\">取消</a>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</body>\r\n<scripttype=\"text/javascript\">\r\n$(function(){\r\n    varparam=\'${param.id}\';\r\n    varurl=\'getSUserData?id=\'+param;\r\n    $(\'#ff\').form(\'load\',url);\r\n});\r\nfunctionsubmit(){\r\n    $(\'#ff\').form(\'submit\',{\r\n        url:\'modifySUserData\',\r\n        dataType:\'json\',\r\n        onSubmit:function(){\r\n            //dosomecheck\r\n            //returnfalsetopreventsubmit;\r\n        },\r\n        success:function(data){\r\n            responseText=JSON.parse(data);\r\n            if(responseText.flag==\'success\'){\r\n                $.messager.alert(\'提示\',responseText.msg,\'info\');\r\n                window.opener.location.href=window.opener.location.href;\r\n                window.close();\r\n            }else{\r\n                $.messager.alert(\'错误\',responseText.msg,\'error\');\r\n            }\r\n        }\r\n    });\r\n}\r\nfunctioncancel(){\r\n    window.close();\r\n}\r\n</script>\r\n</html>\r\nlistSUser.jsp\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\n27\r\n28\r\n29\r\n30\r\n31\r\n32\r\n33\r\n34\r\n35\r\n36\r\n37\r\n38\r\n39\r\n40\r\n41\r\n42\r\n43\r\n44\r\n45\r\n46\r\n47\r\n48\r\n49\r\n50\r\n51\r\n52\r\n53\r\n54\r\n55\r\n56\r\n57\r\n58\r\n59\r\n60\r\n61\r\n62\r\n63\r\n64\r\n65\r\n66\r\n67\r\n68\r\n69\r\n70\r\n71\r\n72\r\n73\r\n74\r\n75\r\n76\r\n77\r\n78\r\n79\r\n80\r\n81\r\n82\r\n83\r\n84\r\n85\r\n86\r\n87\r\n88\r\n89\r\n90\r\n91\r\n92\r\n93\r\n94\r\n95\r\n96\r\n97\r\n98\r\n99\r\n<%@pagelanguage=\"java\"contentType=\"text/html;charset=UTF-8\"\r\n    pageEncoding=\"UTF-8\"%>\r\n<!DOCTYPEhtmlPUBLIC\"-//W3C//DTDHTML4.01Transitional//EN\"\"http://www.w3.org/TR/html4/loose.dtd\">\r\n<html>\r\n<head>\r\n<metahttp-equiv=\"Content-Type\"content=\"text/html;charset=UTF-8\">\r\n<title>列表页面</title>\r\n<jsp:includepage=\"/includeUI.jsp\"></jsp:include>\r\n</head>\r\n<body>\r\n    <tableid=dgclass=\"easyui-datagrid\"title=\"列表页面\"style=\"width:500px\"\r\n        data-options=\"rownumbers:true,\r\n                    singleSelect:true,\r\n                    method:\'post\',\r\n                    loadMsg:\'数据加载中，请稍等...\',\r\n                    toolbar:toolbar,\r\n                    pagination:true,\r\n                    pageSize:10\">\r\n        <thead>\r\n            <tr>\r\n                <thdata-options=\"field:\'id\',width:100\">ID</th>\r\n                <thdata-options=\"field:\'name\',width:100\">Name</th>\r\n                <thdata-options=\"field:\'account\',width:100,align:\'left\'\">Account</th>\r\n                <thdata-options=\"field:\'password\',width:100,align:\'right\'\">Password</th>\r\n            </tr>\r\n        </thead>\r\n    </table>\r\n</body>\r\n<scripttype=\"text/javascript\">\r\n$(function(){\r\n    //指定url\r\n    $(\'#dg\').datagrid({\r\nurl:\'listSUserData\',\r\n});\r\n//刷新表格\r\n$(\"#dg\").datagrid(\"reload\");\r\n});\r\nvartoolbar=[{\r\n    text:\'新增\',\r\n    iconCls:\'icon-add\',\r\n    handler:function(){\r\n        varurl=\"getSUserAddPage\";\r\n        window.open(url,\"newWindow\");\r\n    }\r\n},{\r\n    text:\'修改\',\r\n    iconCls:\'icon-edit\',\r\n    handler:function(){\r\n        vardata=$(\"#dg\").datagrid(\"getSelected\");\r\n        if(data!=null){\r\n            varurl=\"getSUserModifyPage?id=\"+data.id;\r\n            window.open(url,\"newWindow\");\r\n        }else{\r\n            $.messager.alert(\'提示\',\'请选择一条记录！\',\'info\');\r\n        }\r\n    }\r\n},{\r\n    text:\'删除\',\r\n    iconCls:\'icon-remove\',\r\n    handler:function(){\r\n        vardata=$(\"#dg\").datagrid(\"getSelected\");\r\n        if(data!=null){\r\n            $.messager.confirm(\'提示\',\'确定要删除吗？\',function(r){\r\n                if(r){\r\n                    $.ajax({\r\n                                            type:\"POST\",\r\n                                            url:\"deleteSUserData\",\r\n                                            data:\"id=\"+data.id,\r\n                                            dataType:\"json\",\r\n                                            success:function(data){\r\n                                                    if(data.flag==\"success\"){\r\n                                                        $.messager.alert(\'提示\',data.msg,\'info\');\r\n                                                        $(\"#dg\").datagrid(\'reload\');\r\n                                        }else{\r\n                                            $.messager.alert(\'错误\',data.msg,\'error\');\r\n                                        }\r\n                                            }\r\n                                    });\r\n                }\r\n            });\r\n        }else{\r\n            $.messager.alert(\'提示\',\'请选择一条记录！\',\'info\');\r\n        }\r\n    }\r\n},{\r\n    text:\'查看\',\r\n    iconCls:\'icon-search\',\r\n    handler:function(){\r\n        vardata=$(\"#dg\").datagrid(\"getSelected\");\r\n        if(data!=null){\r\n            varurl=\"getSUserDetailPage?id=\"+data.id;\r\n            window.open(url,\"newWindow\");\r\n        }else{\r\n            $.messager.alert(\'提示\',\'请选择一条记录！\',\'info\');\r\n        }\r\n    }\r\n}];\r\n</script>\r\n</html>\r\n includeUI.jsp为引入easyui样式公共文件\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n<%@pagelanguage=\"java\"contentType=\"text/html;charset=UTF-8\"\r\npageEncoding=\"UTF-8\"%>\r\n<%@tagliburi=\"http://java.sun.com/jsp/jstl/core\"prefix=\"c\"%>\r\n<!DOCTYPEhtmlPUBLIC\"-//W3C//DTDHTML4.01Transitional//EN\"\"http://www.w3.org/TR/html4/loose.dtd\">\r\n<html>\r\n    <head>\r\n        <metahttp-equiv=\"Content-Type\"content=\"text/html;charset=UTF-8\">\r\n        <title>js/css</title>\r\n        <!--以下内容引入为默认easyui样式-->\r\n        <linkrel=\"stylesheet\"type=\"text/css\"href=\"<%=request.getContextPath()%>/jquery-easyui/themes/default/easyui.css\">\r\n        <linkrel=\"stylesheet\"type=\"text/css\"href=\"<%=request.getContextPath()%>/jquery-easyui/themes/icon.css\">\r\n        <scripttype=\"text/JavaScript\"src=\"<%=request.getContextPath()%>/jquery-easyui/jquery.min.js\"></script>\r\n        <scripttype=\"text/javascript\"src=\"<%=request.getContextPath()%>/jquery-easyui/jquery.easyui.min.js\"></script>\r\n        <scripttype=\"text/javascript\"src=\"<%=request.getContextPath()%>/jquery-easyui/locale/easyui-lang-zh_CN.js\"></script>\r\n    </head>\r\n    <body>\r\n    </body>\r\n</html>\r\n11.展示效果\r\n至此，简单的ssm框架整合已经完成，同时添加了基本的操作功能；\r\n列表页面\r\n\r\n新增页面\r\n\r\n修改页面\r\n\r\n查看页面\r\n\r\n删除操作\r\n','#JAVA#/#maven#',5,NULL,1,'yc','2019-03-09',NULL,NULL,'提供两种开发工具\r\nSSM框架项目可以使用Eclipse进行开发为了能简化开发流程，首先需要在Eclipse中安装SpringIDE插件，详细安装步骤请参考：\r\nhttps://blog.csdn.net/zhen_6137/article/details/79383941\r\n或者使用Spring官方提供的STS工具进行开发，下载地址：\r\nhttps://spring.io/tools/sts/legacy',NULL,NULL,NULL,NULL,NULL),(102,'老干部','','','Linux下的定时任务crontab的配置','images/7.jpg','> crontab是linux中的一种定时调度配置管理，我们可以使用crontab来按照自己的需求配置相应的定时任务\r\n\r\n1.查看linux下是否已经安装了crontab以及相关服务\r\n    rpm -qa|grep vixie-cron\r\n    rpm -qa|grep crontabs\r\n其中vixie-cron软件包是cron的主程序。\r\ncrontabs软件包是用来安装、卸装、或列举用来驱动 cron 守护进程的表格的程序。\r\n \r\n如果系统中没有安装这两个软件包，则需要手动安装，执行如下命令：\r\n    yum -y install vixie-cron\r\n    yum -y install crontabs\r\n \r\n2.确认crontab服务是否已经启动\r\n    cron服务对应的后台进程名称为cornd，所以我们需要查看crond进程的状态。\r\n \r\n    查看crontd进程运行状态：service crond status 或者 systemctl status crond.service\r\n    启动crontab服务：service crond start 或者 systemctl start crond.service\r\n    停止crontab服务：service crond stop 或者 systemctl stop crond.service\r\n    重启crontab服务：service crond restart 或者 systemctl restart crond.service\r\n    重新载入crontab配置：service crond reload 或者 systemctl reload crond.service \r\n    （备注：在CentOS 7 以后的版本中建议使用systemctl命令来监控和调用服务）\r\n \r\n3.配置定时任务\r\n    cron有两个配置文件，一个是一个全局配置文件（/etc/crontab），是针对系统任务的；\r\n一组是crontab命令生成的配置文件（/var/spool/cron下的文件），是针对某个用户的.定时任务配置到任意一个中都可以。\r\n \r\n在/etc/crontab中添加定时任务\r\n \r\n普通用户配置定时任务：','',5,NULL,3,'yc','2019-03-09',NULL,NULL,'crontab是linux中的一种定时调度配置管理，我们可以使用crontab来按照自己的需求配置相应的定时任务',NULL,NULL,NULL,NULL,NULL),(103,'老干部','','','VNC CentOS Linux下VNC Server远程桌面配置详解','images/6.jpg','# VNC概述\r\n  VNC (Virtual Network Console)是虚拟网络控制台的缩写。VNC 是一款优秀的远程控制工具软件，由著名的 AT&T 的欧洲研究实验室开发的。VNC 是在基于 UNIX 和 Linux操作系统的免费的开源软件，远程控制能力强大，高效实用，其性能可以和 Windows 或 MAC中的任何远程控制软件媲美。在 Linux 中，VNC 包括以下四个命令：vncserver，vncviewer，vncpasswd，和 vncconnect。大多数情况下只需要其中的两个命令：vncserver 和 vncviewer。目前，原来的AT&T版本已经不再使用，因为更多有重大改善的分支版本已经出现， 像是RealVNC， VNC tight 和UltraVNC。 Real VNC 是当前最活跃和强大的主流应用。\r\n RealVNC官方网址  :  http://www.realvnc.com/\r\n Tight VNC官方网址:  http://www.tightvnc.com/\r\n UltraVNC官方网址 ： http://www.uvnc.com/\r\n#  VNC原理\r\nVNC系统由客户端，服务端和一个协议组成。VNC的服务端目的是分享其所运行机器的屏幕， 服务端被动的允许客户端控制它。 VNC客户端（或Viewer） 观察控制服务端，与服务端交互。 VNC 协议 Protocol (RFB)是一个简单的协议，传送服务端的原始图像到客户端（一个X,Y 位置上的正方形的点阵数据）， 客户端传送事件消息到服务端。\r\n服务器发送小方块的帧缓存给客户端，在最简单的情况，VNC协议使用大量的带宽，因此各种各样的方法被发明出来减少通讯的开支，举例来说，有各种各样的编码方法来决定最有效率的方法来传送这些点阵方块）\r\n协议允许客户端和服务端去协议哪种编码会被使用，最简单的编码，被大多数客户端和服务端所支持的是， 从左到右的像素扫描数据的原始编码， 当原始的满屏被发送后，只发送变化的方块区域。这种编码在幁间只有小部分屏幕变化的情况下工作的非常好（像是鼠标键在桌面移动的情况，或在光标处敲击文字），不过如果大量的像素同时变化带宽将会增加的非常高，像是拖动一个窗口或观看全屏录像。\r\nVNC默认使用TCP端口5900至5906，而JAVA的VNC客户端使用5800至5806。一个服务端可以在5500口用“监听模式”连接一个客户端，使用监听模式的一个好处是服务端不需要设置防火墙。\r\nUNIX上的VNC称为xvnc，同时扮演两种角色，对X窗口系统的应用程序来说它是X server，对于VNC客户端来说它是VNC服务器程序。\r\n# VNC安装配置\r\n安装相应桌面环境与vnc服务端和客户端：\r\n# yum groupinstall \"GNOME Desktop Environment\"（CentOS 5.x安装GNOME桌面环境）\r\n# yum groupinstall \"X Window System\" \"Desktop\"（CentOS 6.x安装GNOME桌面环境）\r\n# yum groupinstall Xfce（CentOS安装Xfce桌面环境，可选）\r\n# yum install vnc-server vnc* （CentOS 5.x里）\r\n# yum install tigervnc-server tigervnc （CentOS 6.x里）\r\n说明：Xfce与KDE，Gnome都是图形桌面环境，其特点是占用资源更小资源占用情况大致为：Gnome>KDE>Xfce。具体情况与版本有关。一般版本越新，资源占用越大。\r\n1.确认VNC是否安装\r\n默认情况下，CentOS Linux安装程序会将VNC服务安装在系统上。\r\n确认是否已经安装VNC服务及查看安装的VNC版本\r\n[root@ localhost ~]# rpm -q vnc-server\r\nvnc-server-4.1.2-9.el5\r\n[root@ localhost ~]#\r\n若系统没有安装,可以到操作系统安装盘的Server目录下找到VNC服务的RPM安装包vnc-server-4.1.2-9.el5.x86_64.rpm，安装命令如下\r\nrpm -ivh /mnt/Server/vnc-server-4.1.2-9.el5.x86_64.rpm\r\n也可以连网直接用yum源安装。\r\n2.启动VNC服务\r\n使用vncserver命令启动VNC服务，命令格式为“vncserver :桌面号”，其中“桌面号”用“数字”的方式表示，每个用户连接需要占用1个桌面\r\n启动编号为1的桌面示例如下\r\n=======================================================================\r\n[root@ localhost ~]# vncserver :1\r\nYou will require a password to access your desktops.\r\nPassword:                                            #要求输入密码\r\nVerify:                                                #验证刚才输入的密码\r\nxauth:  creating new authority file /root/.Xauthority\r\nNew \'testdb:1 (root)\' desktop is testdb:1\r\nCreating default startup script. /root/.vnc/xstartup\r\nStarting applications specified in /root/.vnc/xstartup\r\nLog file is /root/.vnc/testdb:1.log\r\n=======================================================================\r\n命令执行的过程中，是在root用户提示符下执行同时也是第一次执行，会在此用户的主目录（/root/）下生成.vnc子目录和相应的配置文件，同时需要输入密码(vncviewer端用此用户访问的密码)，这个密码被加密保存在此用户主目录下的.vnc子目录（/root/.vnc/passwd）中；同时在用户主目录下的.vnc子目录中为用户自动建立xstartup配置文件（/root/.vnc/xstartup），在每次启动VND服务时，都会读取该文件中的配置信息。上面的是添加root用户通过VNC访问权限，如果想添加其他用户访问权限，需要在相应的用户命令提示符下进行上面的操作（如test用户也需要执行[test@ localhost ~]$ vncserver :1   在相应的主目录下生成对应的.vnc子目录）。对不同用户的访问密码更改也需要在相应的命令提示符下操作。\r\n在/root/.vnc/目录下还有一个“root:1.pid”文件，这个文件记录着启动VNC后对应后天操作系统的进程号，用于停止VNC服务时准确定位进程号.\r\n3.VNC服务使用的端口号与桌面号的关系\r\nVNC服务使用的端口号与桌面号相关，VNC使用TCP端口从5900开始，对应关系如下\r\n桌面号为“1”  ---- 端口号为5901\r\n桌面号为“2”  ---- 端口号为5902\r\n桌面号为“3”  ---- 端口号为5903\r\n……\r\n基于Java的VNC客户程序Web服务TCP端口从5800开始，也是与桌面号相关，对应关系如下\r\n桌面号为“1”  ---- 端口号为5801\r\n桌面号为“2”  ---- 端口号为5802\r\n桌面号为“3”  ---- 端口号为5803\r\n……\r\n基于上面的介绍，如果Linux开启了防火墙功能，就需要手工开启相应的端口，以开启桌面号为“1”相应的端口为例，命令如下\r\n=========================================================================\r\n[root@ localhost ~]# iptables -I INPUT -p tcp --dport 5901 -j ACCEPT\r\n[root@ localhost ~]# iptables -I INPUT -p tcp --dport 5801 -j ACCEPT\r\n==========================================================================\r\n4.测试VNC服务\r\n第一种方法是使用VNC Viewer软件登陆测试，操作流程如下\r\n启动VNC Viewer软件 --> Server输入“192.168.1.100:1” --> 点击“OK” --> Password输入登陆密码 --> 点击“OK”登陆到X-Window图形桌面环境 --> 测试成功\r\n第二种方法是使用Web浏览器（如Firefox,IE,Safari）登陆测试，操作流程如下\r\n地址栏输入192.168.1.100:1:5801/ --> 出现VNC viewer for Java（此工具是使用Java编写的VNC客户端程序）界面，同时跳出VNC viewer对话框，在Server处输入“144.194.192.183:1”点击“OK” --> Password输入登陆密码 --> 点击“OK”登陆到X-Window图形桌面环境 --> 测试成功\r\n（注：VNC viewer for Java需要JRE支持，如果页面无法显示，表示没有安装JRE，可以到http://java.sun.com/javase/downloads/index_jdk5.jsp这里下载最新的JRE进行安装）\r\n5.配置VNC图形桌面环境为KDE或GNOME桌面环境\r\n如果您是按照我的上面方法进行的配置的，登陆到桌面后效果是非常简单的，只有一个Shell可供使用，这是为什么呢？怎么才能看到可爱并且美丽的KDE或GNOME桌面环境呢？回答如下\r\n之所以那么的难看，是因为VNC服务默认使用的是twm图形桌面环境的，可以在VNC的配置文件xstartup中对其进行修改(需要登录的每个用户主目录下的.vnc/xstartup文件都要修改)，先看一下这个配置文件。\r\n==========================================================================\r\n[root@ localhost ~]# vi /root/.vnc/xstartup\r\n#!/bin/sh\r\n# Uncomment the following two lines for normal desktop:\r\n# unset SESSION_MANAGER\r\n# exec /etc/X11/xinit/xinitrc\r\n[ -x /etc/vnc/xstartup ] && exec /etc/vnc/xstartup\r\n[ -r $HOME/.Xresources ] && xrdb $HOME/.Xresources\r\nxsetroot -solid grey\r\nvncconfig -iconic &\r\nxterm -geometry 80x24+10+10 -ls -title \"$VNCDESKTOP Desktop\" &\r\ntwm &\r\n==========================================================================\r\n取消这个xstartup文件中下面两行的注释，就是删除行前面的“#”的符号。\r\n# unset SESSION_MANAGER\r\n# exec /etc/X11/xinit/xinitrc\r\n这个xstartup文件的最后一行twm& 前面加“#” 注释”， 在新建一行添加gnome-session &  ，重新启动vncserver服务后就可以登陆到GNOME桌面环境。\r\n这个xstartup文件的最后一行twm& 前面加“#” 注释”， 在新建一行添加startkde &  ，重新启动vncserver服务后就可以登陆到KDE桌面环境 。                             \r\n重新启动vncserver服务的方法：\r\n==========================================================================[[root@ localhost ~]# vncserver -kill :1\r\n[root@ localhost ~]# vncserver :1\r\n==========================================================================\r\n6.配置多个桌面\r\n可以使用如下的方法启动多个桌面的VNC\r\nvncserver :1\r\nvncserver :2\r\nvncserver :3\r\n……\r\n但是这种手工启动的方法在服务器重新启动之后将失效，因此，下面介绍如何让系统自动管理多个桌面的VNC，方法是将需要自动管理的信息添加到/etc/sysconfig/vncservers配置文件中，先以桌面1为root用户、桌面2为test用户为例进行配置如下：\r\n格式为：VNCSERVERS=\"桌面号:使用的用户名  桌面号:使用的用户名\"   \r\n修改/etc/sysconfig/vncservers文件，未经修改的vncservers文件如下所示：\r\n===========================================================\r\n[root@localhost ~]# more /etc/sysconfig/vncservers\r\n# The VNCSERVERS variable is a list of display:user pairs.\r\n#\r\n# Uncomment the lines below to start a VNC server on display :2\r\n# as my \'myusername\' (adjust this to your own).  You will also\r\n# need to set a VNC password; run \'man vncpasswd\' to see how\r\n# to do that. \r\n#\r\n# DO NOT RUN THIS SERVICE if your local area network is\r\n# untrusted!  For a secure way of using VNC, see\r\n# <URL:http://www.uk.research.att.com/archive/vnc/sshvnc.html>.\r\n# Use \"-nolisten tcp\" to prevent X connections to your VNC server via TCP.\r\n# Use \"-nohttpd\" to prevent web-based VNC clients connecting.\r\n# Use \"-localhost\" to prevent remote VNC clients connecting except when\r\n# doing so through a secure tunnel.  See the \"-via\" option in the\r\n# `man vncviewer\' manual page.\r\n# VNCSERVERS=\"2:myusername\"\r\n# VNCSERVERARGS[2]=\"-geometry 800x600 -nolisten tcp -nohttpd -localhost\"\r\n===========================================================\r\n \r\n将最后两行配置信息取消注释。\r\nVNCSERVERS=\"2:myusername\"\r\n上面这行添加两个用户，可以添加多个用户中间用空格隔开，如下：\r\nVNCSERVERS=\"1：root  2：test\"\r\n VNCSERVERARGS[2]=\"-geometry 800x600 -nolisten tcp -nohttpd -localhost\"\r\n上面这行是每个用户的配置参数，用户和用户参数要一一对应，修个成如下参数：\r\nVNCSERVERARGS[1]=\"-geometry 1024x768 \"\r\nVNCSERVERARGS[2]=\"-geometry 1024x768 \"\r\n关于参数配置说明：\r\n1）、VNCSERVERS 是用来设定可以使用VNC的服务器账号，可以设定多个，这里的“用户名”是指linux系统用户的名称（root用户和普通用户），例如上面root、test，但是中间要用空格隔开。使用VNCVIEWER登录时，192.168.1.100:1表示是以root账号登录，以此类推。\r\n2）、注意前面的数字“1”或是“2”为桌面号，每个用户可以有多个桌面号，但是每个桌面号只能属于一个用户，当你要从其它电脑用VNC访问服务器时，就需要用IP:1这种方法，而不能直接用IP。如假定你的VNC服务器IP是192.168.1.100，那想进入VNC服务器，并以test用户登录时，需要在vncviewer里输入IP的地方输入：192.168.1.100:2 （2对应的就是test用户）,如果是root,那就是192.168.1.100:1 （1对应的就是root用户）；\r\n3）、下面两行[1][2]最好与上面那个相对应，后面的800X600可以换成你电脑支持的分辨率。注意中间的”x”不是“*”，而是小写字母”x”。\r\n4）：-geometry 表示远程桌面分辨率，默认为800x600，根据vncviewer所在电脑的分辨率设置。\r\n5）：-nohttpd  表示不监听HTTP端口（58xx），这个在参数里面去掉不加影响效果。\r\n6）：-nolisten tcp 表示不监听TCP端口（60xx），这个在参数里去掉不加影响效果。\r\n7）：-localhost 只运行从本机访问，这个在参数里去掉不加，加了远程登录不了。\r\n8）：AlwaysShared 默认只允许一个VNCVIEWER连接，此参数表示同一个显示端口允许多用户同时登录.\r\n9）：-depth  表示色深，参数有8,16,24,32. 可以不加。\r\n7）: SecurityTypes None 登录不需要密码认证VncAuth默认值,要密码认证。\r\n7.修改VNC访问的密码\r\n使用命令vncpasswd对不同用户的VNC的密码进行修改，一定要注意，如果配置了不同用户的VNC需要分别到各自用户中进行修改，例如在我的这个实验中，root用户和test用户需要分别修改，修改过程如下：\r\n==========================================================================\r\n[root@ localhost ~]# vncpasswd\r\nPassword:                                                       #输入密码\r\nVerify:                                                           #确认密码\r\n[root@ localhost ~]#\r\n8.启动和停止VNC服务\r\n1）启动VNC服务命令\r\n[root@ localhost ~]# service vncserver start\r\n2）停止VNC服务命令\r\n[root@ localhost ~]# service vncserver stop\r\n3）重新启动VNC服务命令\r\n[root@ localhost ~]# service vncserver restart\r\n\r\n9设置VNC服务随系统启动自动加载\r\n第一种方法：使用“ntsysv”命令启动图形化服务配置程序，在vncserver服务前加上星号，点击确定，配置完成。\r\n第二种方法：使用“chkconfig”在命令行模式下进行操作，命令使用如下（预知chkconfig详细使用方法请自助式man一下）\r\n[root@testdb ~]# chkconfig vncserver on\r\n[root@testdb ~]# chkconfig --list vncserver\r\nvncserver       0:off   1:off   2:on    3:on    4:on    5:on    6:off\r\n10、可能遇到的问题:\r\n1）、黑屏\r\n在Linux里安装配置完VNC服务端，发现多用户登陆会出现黑屏的情况，具体的现象为：\r\n客户端可以通过IP与会话号登陆进入系统，但登陆进去是漆黑一片，除了一个叉形的鼠标以外，伸手不见五指。\r\n原因：用户的VNC的启动文件权限未设置正确。\r\n解决方法：将黑屏用户的xstartup（一般为：/用户目录/.vnc/xstartup）文件的属性修改为755（rwxr-xr-x）。\r\n完后杀掉所有已经启动的VNC客户端：\r\nvncserver -kill :1\r\nvncserver -kill :2 （注意：-kill与:1或:2中间有一空格）\r\n最后重启vncserver服务即可！ # service vncserver restart\r\n注意：vncserver只能由启动它的用户来关闭，即时是root也不能关闭其它用户开启的vncserver，\r\n除非用kill命令暴力杀死进程。\r\n2）、Windown下如何登陆VNC Server\r\na从浏览器登录（浏览器需要安装JAVA支持库，作为java applet来实现，才能登录控制VNC服务器，可以yum install java*安装）\r\n直接从浏览器中输入如下地址：\r\nhttp://xxx.xxx.xxx.xxx:5801\r\nb从VNC客户端登录\r\n在windows上安装vnc客户端，然后输入xxx.xxx.xxx.xxx:x，连接登录。\r\n备注：\r\n输入的格式为IP:桌面号，桌面号要看你自己的配置而定。如192.168.80.128:1\r\n登陆提示connection refused(10061)，则是因为linux防火墙的问题，请检查防火墙设置。\r\n后面的尾缀”:x”也是不能少的，要不然老提示failed to connect : connection refused (10061)\r\n11.小结\r\n  VNC的详细配置方法到此已经写完，都是在网上搜索的加自己的实践。VNC对于远程调用图形化界面来说非常的轻巧和便捷！','',1,NULL,2,'yc','2019-03-09',NULL,NULL,'VNC (Virtual Network Console)是虚拟网络控制台的缩写。VNC 是一款优秀的远程控制工具软件，由著名的 AT&T 的欧洲研究实验室开发的。VNC 是在基于 UNIX 和 Linux操作系统的免费的开源软件，远程控制能力强大，高效实用，其性能可以和 Windows 或 MAC中的任何远程控制软件媲美。在 Linux 中，VNC 包括以下四个命令：vncserver，vncviewer，vncpasswd，和 vncconnect。大多数情况下只需要其中的两个命令：vncserver 和 vncviewer。目前，原来的AT&T版本已经不再使用，因为更多有重大改善的分支版本已经出现， 像是RealVNC， VNC tight 和UltraVNC。 Real VNC 是当前最活跃和强大的主流应用。\r\n RealVNC官方网址  :  http://www.realvnc.com/\r\n Tight VNC官方网址:  http://www.tightvnc.com/\r\n UltraVNC官方网址 ： http://www.uvnc.com/',NULL,NULL,NULL,NULL,NULL),(104,'老干部','','','Linux基础命令','images/1.jpg','Part1:\r\n系统命令存放:/bin或/sbin\r\n#start x 调回xwindows\r\n/etc/inittab\r\n启动级别解释:0-6\r\n0:关机\r\n1:单用户\r\n2:无网络无图形 \r\n3:有网络无图形\r\n4:预留\r\n5:有网络有图形\r\n6:重启\r\n-----------------------------------------------------------\r\nshell:命令解释器，用户通过shell和操作系统的内核之间进行交互,linux命令又分为\r\n内部，与外部俩部分，例如：qq软件不属于linux原有命令。\r\n-----------------------------------------------------------\r\nPart2:\r\n基础捷键：\r\n1.tab ：补齐\r\n2.反斜杠 \\ 强制换行 \r\n3.ctrl+u 清空至行首 \r\n4.ctrl+k 清空至行尾 \r\n5.ctrl+l 清屏 \r\n6.ctrl+c 取消本次命令编辑终断\r\n扩展：windows帮助执行：cmd输入 dir /? \r\n----------------------------------------------------\r\nPart3:基础命令\r\n一.目录操作命令\r\n1.pwd:打印显示当前路径\r\n2.cd:切换工作目录\r\n\r\n#cd ~ 表示返回主目录\r\n绝对路径与相对路径:\r\n绝对路径：直观从根开始执行 ：#cd /root/Desktop\r\n相对路径：从当下开始执行 #cd . 或 cd .. 当前目录 ，上级目录 的切换\r\n--------------------------------------------------------------------\r\n3.ls:显示目录内容\r\n\r\n-a 显示所有子目录和文件信息包括隐藏文件\r\n-l 以长格式显示 \r\n-R 递归显示内容\r\n-i 查看文件的节点数\r\n-d 显示目录本身属性（只显示目录不关心内容）\r\n--color 以颜色区别不同类型文件 \r\n例如：ls -l /usr表示以长格式显示/usr下的文件信息\r\n4.mkdir:创建目录\r\n#mkdir -p /haha/xixi/qq 递归一次创建多个目录\r\n5.du:统计目录及文件空间占用情况\r\n-a 默认-a \r\n-s 只统计每个参数占用空间大小\r\n-h 以更为易懂的字节单位(K,M 等)\r\n二.文件操作命令\r\n6.touch:创建空文件 \r\ntouch test.txt表示在当前目录下创建test.txt \r\ntouch /usr/test.txt表示在usr目录下创建test.txt\r\n7.cp:复制 格式:#cp 源 目标 \r\n例：cp /usr/test.txt /usr/test2.txt /home表示将usr下面的test.txt和test2.txt拷贝到home目录下\r\n例：cp -R /usr /home 其中R表示复制目录 表示就爱了个usr目录拷贝到home下\r\n-R 递归复制整个目录树\r\n-p 保持原文件属性不变（时间，作者...）\r\n-f 强制覆盖目标同名文件或目录\r\n-i 需要覆盖文件或目录时进行提醒\r\n---------------------------------------\r\n8.rm -rf:强制删除不提示 \r\nrm file1 删除file1 \r\nrm -r dir1 删除目录dir1（一般使用rm -rf dir1 强制删除所有文件，避免询问是否删除）\r\n9.mv:移除 \"在同目录下修改文件名\"\r\n例：mv test.txt test2.txt表示将test.txt改名为test2.txt\r\n例：mv test.txt /home表示将test.txt剪切到/home下 \r\n10.which:查找系统命令位置\r\n11.find:查找文件或目录 格式#find / -name qq\r\n-name:按文件名称查找\r\n-size:按文件大小查找\r\n-user:按文件属主查找\r\n-type:按文件类型查找\r\n12.ln -s :软链接 格式：#ln -s /etc/passwd /home\r\n-----------------------------------------------------\r\n三.文件内容操作命令\r\n13.cat 显示文件全部内容\r\n14.more 逐屏显示文件内容\r\n15.less 与more命令相同 格式：#cat /etc/passwd |more或less\r\n16.head -数字 查看显示默认前10行 格式：#head /etc/passwd\r\n17.tail -数字 查看显示默认后10行 格式：#tail /etc/passwd \r\ntail -F 监控 执行不退出多用于监视日志\r\n18.wc:统计文件中单词数量 格式：#wc -l /etc/passd\r\n-l:统计行数\r\n-w:统计单词个数\r\n-c:统计字节数 \r\n----------------------\r\n19.grep:过滤 格式：#grep ^root /etc/passwd \r\n-i：查找忽略大小写\r\n-v：反向过滤\r\n^:表示以。。。开头\r\n$:表示以。。。结尾\r\n20.tar:归档及压缩命令 \r\n-c:创建.tar格式的包文件\r\n-x:解开.tar格式的包文件\r\n-v:输出详细信息\r\n-f:表示使用归档文件 \r\n-p:打包时保留原始文件及目录权限 \r\n-t:列表查看包内的文件\r\n-C：指定解压路径\r\n格式：#tar -cvf passwd.tar passwd 创\r\n#tar -xvf passwd.tar -C /home 解\r\n调用： -z :gzip \r\n-j :bzip2\r\n格式:#tar -czvf passwd.tar.gz \r\n#tar -cjvf passwd.tar.bz2 创\r\n#tar -xzvf passwd.tar.gz -C /home \r\n#tar -xjvf passwd.tar.bz2 -C /home 解\r\n ','#Linux#',5,NULL,5,'yc','2019-03-09',NULL,NULL,'系统命令存放:/bin或/sbin\r\n#start x 调回xwindows\r\n/etc/inittab\r\n启动级别解释:0-6\r\n0:关机\r\n1:单用户\r\n2:无网络无图形 \r\n3:有网络无图形\r\n4:预留\r\n5:有网络有图形\r\n6:重启',NULL,NULL,NULL,NULL,NULL),(105,'老干部','','','Spring基础知识学习总结','images/1.jpg','Spring是什么？\r\nSpring是一个开源框架\r\nSpring为简化企开发而生，使用spring可以简化javabean的实现和管理\r\nSpring是一个IOC控制反转/DI依赖注入和AOP容器框架\r\n \r\n-轻量级：非侵入性\r\n-依赖注入IOC DI\r\n-面向切面编程 AOP\r\n-容器：spring是一个容器，它包含并管理整个应用对象的生命周期\r\n-一站式框架(可以整合其他框架)：在IOC和AOP的基础上可以去整合一些优秀的第三方框架（spring自身也提供了展现层SpringMVC和持久层SpringJDBC）\r\n \r\nIOC和DI\r\nIOC（Inversion Of　Control）：其思想是反转资源获取的方向。传统的资源查找方式要求组件向容器发起请求获取资源。作为响应，容器适时的返回资源。而应用了IOC之后，容器主动的将资源推送给它所管理的组件，组件所要做的仅仅是选择一种合适的方式来接受资源，也被称为查找的被动形式。\r\nDI（Dependency Injection）：IOC的另一种表达方式，即组件以一些预定好的方式（例如setter方法）接受来自容器注入的资源。\r\n \r\nIOC前生\r\n--分离接口与实现（自己实现）\r\n--工厂设计模式（工厂中获取）\r\n--采用控制反转\r\n \r\n \r\n \r\nIOC&DI概述：\r\n配置bean\r\n配置形式：基于XML文件的方式；基于注解的方式\r\nBean的配置方式：通过全类名（反射）、通过工厂方法（静态工厂方法&实例工厂方法）、\r\nIOC容器BeanFactory & ApplicaitonContext概述\r\n依赖注入的方式：属性注入；构造器注入\r\n注入属性细节\r\n自动转配\r\nBean之间的关系：继承；依赖\r\nBean的作用域：singleton单例；prototype；WEB 环境作用域\r\n使用外部属性文件\r\nspEL表达式\r\nIOC容器中Bean的生命周期\r\nSpring4新特性：泛型依赖注入\r\n \r\n在Spring的IOC容器里配置Bean\r\n在XML文件中通过bean节点来配置bean\r\n<!--通过全类名来配置bean    -->\r\n<bean id=\"user\" class=\"cn.demo.spring.User\">\r\n    <constructor-arg name=\"name\" value=\"Spring\"></constructor-arg>\r\n</bean>\r\nid:bean的名称\r\n在ioc容器中必须是唯一的\r\n容id没有指定，spring自动将权限限定性类型作为bean的名字\r\nId可以指定多个名字，名字之间可以用逗号、分号、或者空格分隔\r\nSpring容器\r\n在Spring IOC容器读取bean配置创建bean实例之前，必须对它进行实例化，只有在容器实例化之后，才能从IOC容器里获取bean实例并使用。\r\nSpring提供了两种类型的IOC容器实现：\r\nBeanFactory：IOC容器的基本实现\r\nApplicationContext提供了更多的高级特性，是BeanFactory的子接口\r\nBeanFactory是Spring的基础设施，面向Spring本身；\r\nApplicationContext面向使用Spring框架的开发者，几乎所有的应用场合都直接使用ApplicationContext而非底层的BeanFactory\r\n无论何种方式配置文件是相同的\r\nApplicationContext\r\nApplicationContext的主要是实现类：\r\nClassPathXmlApplicationContext：从类路径加载配置文件\r\nFileSystemXmlApplicationContext：从文件系统中加载配置文件\r\nConfigurableApplictionContext扩展于ApplicationContext，新增两个主要方法：refresh()和close()，让ApplicationContext具有驱动刷新和关闭上下文的能力；\r\nApplicationContext在初始化上下文时就实例化所有的单例Bean。\r\nWebApplictionContext是专门为web应用而准备的，它允许从相当于web根目录的路径中完成初始化工作。\r\n \r\n依赖注入的方式\r\n属性注入\r\n构造器注入\r\n工厂方法注入（很少用，不推荐）\r\n属性注入\r\n通过setter方法注入bean的属性或依赖的对象\r\n属性注入使用<property>元素，使用name属性指定bean的属性名称，value属性或<value>子节点指定属性值\r\n属性注入是实际应用中最常用的注入方式\r\n构造方法注入\r\n通过构造方法注入bean的属性或依赖的对象，它保证了bean实例在实例化之后就能使用。\r\n构造器注入在<constructor-arg>元素里声明，它没有name属性。\r\n \r\n字面值\r\n字面值：可以用字符串表示的值，可以通过<value>元素标签或value属性进行注入。\r\n基本数据类型及其封装类、String等类型都可以采用字面值注入的方式。\r\n若字面值中包含特殊字符，可以使用<![CDATA[]]>把字面值包裹起来。\r\n \r\n \r\n引用其他bean\r\n组成引用程序的bean经常需要相互协作以完成应用程序的功能，要使bean能够相互访问，就必须在bean文职文件中指定对bean的引用。\r\n在bean的配置文件中可以通过<ref>元素或ref属性问bean的属性或构造器参数指定对bena的引用。\r\n也可以在属性或者构造器里包含bean的声明，这样的bean称为内部bean。\r\n \r\n内部bean\r\n当bean实例仅仅给一个特定的属性使用时，可以将其声明为内部bean，内部bean声明直接包含在<property>或<constructor-arg>元素里，不需要设置任何id或name属性。\r\n内部bean不能使用在其他地方。\r\n \r\n注入参数详解：null值和级联属性\r\n可以使用专用的<null/>元素标签为bean的字符串或其他对象类型的属性注入null值。\r\n和Struts、hibernate等框架一样，spring支持级联属性的配置。\r\n集合属性\r\n在Spring中可以通过一组内置的xml标签，例如<list> <set> <map> <array>等来配置集合属性。\r\n配置java.util.list类型的属性需要指定<list>标签，在标签里包含一些元素，这些标签可以通过<value>指向简单的常量值，也可以通过<ref>指向对其他bean的引用，通过<bean>指定内置bean的定义，通过<null/>指定空元素，甚至可以内嵌其他集合。\r\n数组的定义可以使用<array>，也可以和list一样使用<list>\r\n配置java.util.Set需要使用<set>标签，定义元素的方法与List一样\r\nJava.util.Map通过<map>标签定义，<map>标签可以使用多个<entry>作为子标签，每个条目包含一个键和一个值。\r\n必须在<key>标签里定义键\r\n因为键和值的类型没有限制，所以可以自由地位他们指定<value> <ref> <bean>或<null/>元素。\r\n可以将Map的键和值最为<entry>的属性定义，简单常量使用key和value来定义；bean引用通过key-ref和val-ref属性定义。\r\n使用<props>定义java.util.Properties，该标签使用多个<prop>座位子标签，每个子标签必须定义key属性。\r\n \r\n使用P命名空间\r\n为了简化XML文件的配置，越来越多的XML文件采用属性而非子元素配置信息\r\nSpring从2.5版本开始引入了一个新的p命名空间，可以通过<bean>元素属性的方式配置bean的属性。\r\n使用p命名空间后，基于XML的配置方式将进一步简化。\r\n \r\nXML配置里的bean自动装配\r\nSpring IOC容器可以自动装配bean，需要做的仅仅是在<bean>的autowire属性里指定自动装配的模式：byName byType\r\nbyType（根据类型自动装配）：若IOC容器中有多个与目标bean类型一致的bean，则在这种抢矿下，spring将无法判断bean哪个bean最适合该属性，所以不能执行自动装配。\r\nbyName（根据名称自动装配）：必须将目标bean的名称和属性设置的完全相同。\r\nConstructor（通过构造器自动装配）：当bean中存在多个构造器时，此种自动装配方式将会很复杂，不推荐使用。\r\n \r\nXML配置里的bean自动装配缺点\r\n在bean配置文件里设置autowire属性进行自动装配将会装配bean的所有属性，然而，如果希望装配个别属性时，autowire属性就不够灵活了。\r\nAutowire属性要么根据类型自动装配，要么根据名称自动装配，不能两者兼容。\r\n一般情况下，在实际项目中很少使用自动装配的功能，因为和自动装配功能所带来的好处相比起来，明确清晰的配置文档更有说服力一些。\r\n \r\n \r\n基于注解的方式配置bean\r\n组件扫面（component scanning）：Spring能够从classpath下自动扫描，侦测和实例化具有特定注解的组件。\r\n特定组件包括：\r\n         -@Component：基于注解，标识了一个受Spring管理的组件\r\n         -@Respository：标识持久层组件\r\n         -@Service：标识服务层（业务层）组件\r\n         -@Controller：标识表现层组件\r\n         对于扫描到的组件，Spring有默认的命名策略：使用非限定类名，第一个字母小写，也可以在注解中通过value书信值标识组件的名称。\r\n \r\n当在组件类上使用了特定的注解之后，还需要在Spring的配置文件中声明<context：component-scan>\r\n         -base-package属性指定一个需要扫描的基类包，Spring容器将会扫描这个基类包及其子包中的所有类。\r\n-但需要扫描多个包时，可以使用逗号分隔。\r\n-如果仅希望扫描特定的类而非基包下的所有类，可以使用resource-pattern属性过滤特定的类，示例：\r\n        <context:component-scan base-package=\"cn.demo.bean.annotation\" resource-pattern=\"service/*.*\"/>\r\n-<context:include-filter>子节点表示要包含的目标类\r\n-<context:exclude-filter>子节点表示要排除在外的目标类\r\n-<context:component-scan>下可以拥有若干个<context:include-filter>和<context:exclude-filter>子节点\r\n \r\n使用@Autowired自动装配bean\r\n@AutoWired注解自动装配具有兼容类型的单个bean属性\r\n         -构造器，普通字段（即使是非public），一切具有参数的方法都可以应用@Autowired注解。\r\n         -默认情况下，所有使用@Autowired注解的属性都需要被设置，当Spring找不到匹配的bean装配属性时，会抛出异常，若某一个属性允许不被设置，可以设置@Autowired注解的required属性为false；\r\n         -默认情况下，单IOC容器中存在多个类型兼容的bean时，通过类型的自动装配将无法工作，此时可以在@Quailfier已制定注入bean的名称。\r\n         -@Autowired注解也可以应用在数组类型的属性上，此时Spring将会吧所有匹配的bean进行自动装配。\r\n         -@Autowired注解可以应用在集合属性上，此时Spring读取该集合的类型信息，然后自动装配所有与之兼容的bean。\r\n         -@Autowired注解用在java.util.Map上时，若该Map的键值为String，那么Spring将自动装配与之Map值类型兼容的bean，此时bean的名称作为键。\r\n \r\nAOP简介\r\nAspectJ：Java社区你最完整最流行的AOP框架，在Spring2.0以上版本中，可以使用基于AspectJ注解或者基于XML配置的AOP\r\nAOP（Aspect-Object Programming，面向切面编程）：是一种新的方法论，是对传统的OOP（Object-Oriented Programming，面向对象编程）的补充。\r\nAOP的主要编程对象是切面（aspect），而切面模块化横切关注点。\r\n在应用AOP编程时，仍然需要定义公共功能，但可以明确的在定义这个功能在哪里，以什么方式应用，并且不必修改受影响的类，这样一来，横切关注点就被模块化到特殊的对象（切面）里。\r\nAOP的好处：\r\n每个事物逻辑位于一个位置，代码不分散，便于维护和升级\r\n业务模块更简洁，值包含核心业务代码\r\n用AspectJ注解声明切面\r\n要在Spring中声明AspectJ切面，只需要在IOC容器中将切声明为bean实例，当Spring IOC容器中初始化AspectJ切面之后，Spring IOC容器就会为哪些与AspectJ切面相匹配的bean创建代理。\r\n在AspectJ注解中，切面只有一个带有@AspectJ注解的Java类。\r\n通知是标注有某种注解的简单的java方法。\r\nAspectJ支持5种类型的通知注解：\r\n@Before：前置通知，在方法调用之前执行。\r\n@After：后置通知，在方法调用之后执行。\r\n@AfterRunning：返回通知，在方法返回结果之后调用\r\n@AfterThrowing：异常通知，在方法抛出异常之后执行\r\n@Around：环绕通知，围绕着方法执行\r\n \r\n利用方法签名编写AspectJ切入点表达式\r\n最典型的切入点表达式根据方法的签名来匹配各种方法：\r\n-execution * com.spring.demo.LoggingAspect.*(..):匹配LoggingAspect中声明的所有方法，第一个*代表任意修饰符以及任意返回值，第二个*表示任意方法，..匹配任意数量的参数。若目标类与接口与该切面在同一个保重，可以省略包名。\r\n-execution public * LoggingAspect.*(..):匹配LoggingAspect接口的所有公共方法\r\n-execution public int LoggingAspect*(..):匹配LoggingAspect接口中所有返回类型为int的方法\r\n-execution public int LoggingAspect.*(int ,..):匹配第一个参数为int类型的所有方法\r\n-execution public int LoggingAspect.*(int,double):匹配第一个参数类型为int，第二个为double的所有方法\r\n \r\n让通知访问当前连接点的细节\r\n可以在通知方法中声明一个类型为JoinPoint的参数，然后就能访问连接点的细节，例如方法名称和参数值等。\r\n@Before(\"execution(public int cn.demo.aop.impl.CalculatorImpl.*(int,int))\")\r\npublic void beforeMethod2(JoinPoint joinPoint){\r\n    String methodName = joinPoint.getSignature().getName();\r\n    List<Object> args = Arrays.asList(joinPoint.getArgs());\r\n    System.out.println(\"before method2 ......\");\r\n    System.out.println(\"the method \" + methodName + \" start with args \" + args);\r\n}\r\n \r\n基于XML的配置声明切面\r\n除了使用AspectJ注解方式声明切面以外，Spring也支持在Bean配置文件中声明切面的方式。这种声明通过aop schema中的特定元素标签来完成。\r\n正常情况下，基于注解的声明要优先于基于XML的声明，通过AspectJ注解，切面可以兼容AspectJ，而基于Xml的配置则是Spring专有的。由于AspectJ得到越来越多的AOP框架支持，所以注解风格编写的切面将会有更多的重用机会。\r\n以下为XML配置举例：\r\n\r\n\r\n\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<beansxmlns=\"http://www.springframework.org/schema/beans\"\r\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"xmlns:aop=\"http://www.springframework.org/schema/aop\"\r\nxsi:schemaLocation=\"http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/aophttp\r\n    ://www.springframework.org/schema/aop/spring-aop.xsd\">\r\n<!--配置bean-->\r\n<beanid=\"calculatorImpl\"class=\"cn.demo.aop.impl.xml.CalculatorImpl\"></bean>\r\n<!--配置切面bean-->\r\n<beanid=\"logginAspect\"class=\"cn.demo.aop.impl.xml.LogginAspect\"></bean>\r\n<beanid=\"validationAspect\"class=\"cn.demo.aop.impl.xml.ValidationAspect\"></bean>\r\n<!--配置AOP-->\r\n<aop:config>\r\n<!--配置切点表达式-->\r\n<aop:pointcutid=\"pointcut\"expression=\"execution(publicintcn.demo.aop.impl.xml.CalculatorImpl.*(int,int))\"></aop:pointcut>\r\n<!--配置切面及通知-->\r\n<!--1.配置验证通知-->\r\n<aop:aspectorder=\"1\"ref=\"validationAspect\">\r\n<aop:beforemethod=\"validateMethod\"pointcut-ref=\"pointcut\"></aop:before>\r\n</aop:aspect>\r\n<!--2.配置日志通知-->\r\n<aop:aspectorder=\"2\"ref=\"logginAspect\">\r\n<!--前置通知-->\r\n<aop:beforemethod=\"beforeMethod\"pointcut-ref=\"pointcut\"></aop:before>\r\n<!--后置通知-->\r\n<aop:aftermethod=\"afterMethod\"pointcut-ref=\"pointcut\"></aop:after>\r\n<!--返回通知-->\r\n<aop:after-returningmethod=\"AfterReturningMethod\"pointcut-ref=\"pointcut\"returning=\"result\"></aop:after-returning>\r\n<!--异常通知-->\r\n<aop:after-throwingmethod=\"afterThrowingMethod\"pointcut-ref=\"pointcut\"throwing=\"ex\"></aop:after-throwing>\r\n<!--环绕通知-->\r\n<aop:aroundmethod=\"aroundMethod\"pointcut-ref=\"pointcut\"></aop:around>\r\n</aop:aspect>\r\n</aop:config>\r\n</beans>\r\n \r\n ','',5,NULL,2,'yc','2019-03-09',NULL,NULL,'Spring是一个开源框架\r\nSpring为简化企开发而生，使用spring可以简化javabean的实现和管理\r\nSpring是一个IOC控制反转/DI依赖注入和AOP容器框架\r\n ',NULL,NULL,NULL,NULL,NULL),(106,'老干部','','','IDEA下创建基于Spring的Hello World','images/8.jpg','前言：使用eclipse的同学对eclipse中的工作空间（workspace）比较熟悉，但是在idea中没有workspace的概念，idea中首先需要创建project，此处的project相当于eclipse中的workspace，在project下可以创建Module，Module相当于eclipse中的project工程。理解了这个概念，请项下继续看！\r\n\r\n创建一个maven简单quickstart工程，以便于组织依赖包导入。\r\n右键project -> New ->Module -> Maven 勾选Create from archetype\r\n选择maven-atchetype-quickstart\r\n\r\n填写maven工程相关参数名称\r\n\r\n \r\n这里选择的是与maven相关的配置，maven必须提前已经安装配置完成并且整合到idea中，具体安装maven步骤请参考（Apache Maven 3.6.0安装配置）。\r\n添加spring需要的最小单元依赖jar包到pom.xml文件中，以下为最小依赖单元：\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\nspring-core\r\nspring-context\r\nspring-beans\r\ncommons-logging\r\n \r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n<dependency>\r\n<groupId>org.springframework</groupId>\r\n<artifactId>spring-core</artifactId>\r\n<version>4.3.17.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n<groupId>org.springframework</groupId>\r\n<artifactId>spring-context</artifactId>\r\n<version>4.3.17.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n<groupId>org.springframework</groupId>\r\n<artifactId>spring-beans</artifactId>\r\n<version>4.3.17.RELEASE</version>\r\n</dependency>\r\n<dependency>\r\n<groupId>commons-logging</groupId>\r\n<artifactId>commons-logging</artifactId>\r\n<version>1.2</version>\r\n</dependency>\r\n 创建文件夹目录：resource，并转换为资源文件夹根目录；\r\n\r\n\r\n创建User类\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\npackagecn.demo.spring;\r\npublicclassUser{\r\npublicStringgetName(){\r\nreturnname;\r\n}\r\npublicvoidsetName(Stringname){\r\nthis.name=name;\r\n}\r\nprivateStringname;\r\npublicUser(Stringname){\r\nthis.name=name;\r\n}\r\n@Override\r\npublicStringtoString(){\r\nreturn\"Hello\"+this.name;\r\n}\r\n}\r\n创建Spring配置文件spring.xml，内容如下：\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n<?xmlversion=\"1.0\"encoding=\"UTF-8\"?>\r\n<beansxmlns=\"http://www.springframework.org/schema/beans\"\r\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\nxsi:schemaLocation=\"http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsd\">\r\n<beanid=\"user\"class=\"cn.demo.spring.User\">\r\n<constructor-argname=\"name\"value=\"Spring\"/>\r\n</bean>\r\n</beans>\r\n创建测试类Main\r\n\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\npackagecn.demo.spring;\r\nimportorg.springframework.context.ApplicationContext;\r\nimportorg.springframework.context.support.ClassPathXmlApplicationContext;\r\npublicclassMain{\r\npublicstaticvoidmain(String[]args){\r\nApplicationContextctx=newClassPathXmlApplicationContext(\"spring.xml\");\r\nUseru=(User)ctx.getBean(\"user\");\r\nSystem.out.println(u);\r\n}\r\n}\r\n启动测试类，得到如下结果：\r\n\r\n工程结构如下：\r\n\r\n至此，基于Spring的Hello World已经创建完成。','',5,NULL,2,'yc','2019-03-09',NULL,NULL,'前言：使用eclipse的同学对eclipse中的工作空间（workspace）比较熟悉，但是在idea中没有workspace的概念，idea中首先需要创建project，此处的project相当于eclipse中的workspace，在project下可以创建Module，Module相当于eclipse中的project工程。理解了这个概念，请项下继续看！',NULL,NULL,NULL,NULL,NULL),(107,'老干部','','','常用数据库连接语句','images/4.jpg','MySQL:\r\nDriver:com.mysql.jdbc.Driver\r\nURL:jdbc:mysql://localhost:3306/db_name\r\nClass.forName(Driver);\r\nConnection con = DriverManager.getConnection(URL,Username,Password);\r\n \r\nMicrosoft SQL Server\r\nDriver:com.microsoft.jdbc.sqlserver.SQLServerDriver\r\nURL:jdbc:microsoft:sqlserver://localhost:1433;DatabaseName=db_name\r\n \r\n \r\nSysBase:\r\nDriver:com.sybase.jdbc.SybDriver\r\nURL:jdbc:Sysbase://localhost:5007/db_name\r\n \r\n \r\nOracle:\r\nDriver:oracle.jdbc.driver.OracleDriver\r\nURL:jdbc:oracle:thin@localhost:1521:orcl\r\n \r\nDB2:\r\nDriver:com.ibm.db2.jdbc.app.DB2.Driver  (这是连接具有DB2客户端的Provider)\r\nDriver:com.ibm.db2.jdbc.net.DB2.Driver  (这是连接不具有DB2客户端的Provider)\r\nURL:jdbc:db2://localhost:5000/db_name\r\n ','',5,NULL,5,'yc','2019-03-09',NULL,NULL,'MySQL:\r\nDriver:com.mysql.jdbc.Driver\r\nURL:jdbc:mysql://localhost:3306/db_name\r\nClass.forName(Driver);\r\nConnection con = DriverManager.getConnection(URL,Username,Password);\r\n',NULL,NULL,NULL,NULL,NULL),(108,'老干部','','','恢复回收站删除的文件','images/1.jpg','回收站删除了怎么恢复\r\n步骤/方法\r\n \r\n在cmd中运行“regedit”\r\n\r\n进入注册表，找到“HKEY_LOCAL_MACHINE”，请依据下图指示，点击红色框内，箭头所示的文件夹前的三角按钮\r\n\r\n在展开的文件夹中，找到“SOFTWARE”点击红色框内，箭头所示的文件夹前的三角按钮\r\n\r\n在展开的文件夹中，找到“Microsoft”点击红色框内，箭头所示的文件夹前的三角按钮\r\n\r\n展开的文件夹中，找到“Windows”点击红色框内，箭头所示的文件夹前的三角按钮\r\n\r\n在展开的文件夹中，找到“CurrentVersion”点击红色框内，箭头所示的文件夹前的三角按钮\r\n\r\n在展开的文件夹中，找到“Explorer”点击红色框内，箭头所示的文件夹前的三角按钮\r\n\r\n在展开的文件夹中，找到“DeskTop”点击红色框内，箭头所示的文件夹前的三角按钮\r\n点击红色框内的“NameSpace”文件夹，右边出现“默认”等\r\n\r\n在右边空白区域，点击右键，新建“项”\r\n\r\n点击新建项后，出现如下界面，将新出现的项的名字（红色框框内显示）重命名为“{645FFO40-5081-101B-9F08-00AA002F954E}”------------请注意，要把大括号也带入\r\n\r\n点击新建的项，右边会出现默认等显示，右键点击“默认”二字，点击修改，出现如下界面\r\n \r\n点击修改后，出现如下界面，请在数值名称一项中，将“{默认}”修改为“{回收站}”点击确定\r\n \r\n重新启动电脑即可！','#操作系统#',5,NULL,4,'zz','2019-03-09',NULL,NULL,'回收站删除了怎么恢复步骤/方法\r\n在cmd中运行“regedit”\r\n进入注册表，找到“HKEY_LOCAL_MACHINE”，请依据下图指示，点击红色框内，箭头所示的文件夹前的三角按钮',NULL,NULL,NULL,NULL,NULL),(109,'老干部','','','Windows7下配置java环境变量','images/1.jpg','windows下java环境变量配置方法\r\n\r\n   windows7下java环境变量配置方法：\r\n   1.用鼠标右击“我的电脑”->属性   \r\n\r\n   选择左边导航的“高级系统设置”选项，然后这回熟悉了吧？\r\n\r\n   继续选择右下角的“环境变量”选项\r\n\r\n   2.进行win7下Java环境变量配置\r\n   \r\n   在\"系统变量\"下进行如下配置：\r\n  (1)新建->变量名：JAVA_HOME 变量值：D:/Java/jdk1.6.0_12(这只是我的JDK安装路径)\r\n  (2)编辑->变量名：Path 在变量值的最前面加上：%JAVA_HOME%/bin;%JAVA_HOME%/jre/bin\r\n  (3)新建->变量名：CLASSPATH 变量值：.;%JAVA_HOME%/lib;%JAVA_HOME%/lib/dt.jar;%JAVA_HOME%/lib/tools.jar\r\n   注意：当设置的变量在末尾时，不要加上“；”。\r\n\r\n  3.测试下环境变量是否设置成功\r\n    在左下角的搜索框中键入\r\n    cmd\r\n    或者按下“WIN+R”键,“WIN”键就是\"CTRL\"和“ALT””中间那个微软图标那个键；\r\n   分别输入java，javac，java -version 命令\r\n   如果出现如下信息：\r\n\r\n   \r\n   4.你的Java环境变量配置成功！\r\n   注意:\r\n   若出现\r\n   \'javac\' 不是内部或外部命令，也不是可运行的程序\r\n   或批处理文件。\r\n   说明此次Java环境变量配置出错了，仔细检查下吧！','#windows#',3,NULL,5,'yc','2019-03-09',NULL,NULL,'windows7下java环境变量配置方法：\r\n   1.用鼠标右击“我的电脑”->属性   \r\n   选择左边导航的“高级系统设置”选项，然后这回熟悉了吧？\r\n   继续选择右下角的“环境变量”选项\r\n   2.进行win7下Java环境变量配置\r\n   在\"系统变量\"下进行如下配置：\r\n  (1)新建->变量名：JAVA_HOME 变量值：D:/Java/jdk1.6.0_12(这只是我的JDK安装路径)\r\n  (2)编辑->变量名：Path 在变量值的最前面加上：%JAVA_HOME%/bin;%JAVA_HOME%/jre/bin\r\n  (3)新建->变量名：CLASSPATH 变量值：.;%JAVA_HOME%/lib;%JAVA_HOME%/lib/dt.jar;%JAVA_HOME%/lib/tools.jar\r\n   注意：当设置的变量在末尾时，不要加上“；”。',NULL,NULL,NULL,NULL,NULL),(110,'老干部','','','IDEA下创建git项目','images/5.jpg','在IDEA中已经为我们集成了git相关的插件，我们只需要配置相应的内容即可使用Git提供给我们的功能。在这之前需要我们电脑中已经安装并配置了Git，具体安装配置请参见《Git安装和使用》。\r\n1.IDEA配置Git\r\n配置git\r\n选择git命令所在路径，点击Test，出现如下界面。\r\n\r\n添加GitHub账户\r\n\r\n\r\n2.在服务器中创建git项目仓库\r\n\r\n3在idea中新建project\r\n \r\n \r\n\r\n此时我们可以看到文件夹下多了一个.git文件夹，说明git项目已经创建完成。\r\n\r\n4.创建Module工程\r\n我们在idea下新建一个JAVA工程demoGit\r\n\r\n国际惯例，添加HelloWorld程序进行测试。\r\n项目结构如下图：\r\n\r\n5.将新建的module工程转换为git项目\r\n进入D:\\01_Work\\demoProject目录，打开Git Bash，执行git init\r\ngit remote add origin git@github.com:*********/demoProject.git\r\n\r\n此时我们可以看到文件夹下多了一个.git文件夹，说明git项目已经创建完成。\r\n\r\n \r\n6.提交到服务器\r\n现在我们需要将helloGit项目提交到github下。\r\n右键helloGit项目 -> 选择Git ->Commit Directory\r\n添加提交注释，Commit and Push\r\n\r\n再次登录github查看\r\n\r\n新建的工程已经被提交，操作完成。\r\n ','#idea#/#Git#',2,NULL,3,'yc','2019-03-09',NULL,NULL,'在IDEA中已经为我们集成了git相关的插件，我们只需要配置相应的内容即可使用Git提供给我们的功能。在这之前需要我们电脑中已经安装并配置了Git，具体安装配置请参见《Git安装和使用》。',NULL,NULL,NULL,NULL,NULL),(111,'老干部','','','Git安装和使用','images/7.jpg','Git安装和使用\r\n \r\n1.Git（分布式版本管理）简述\r\n我们在项目开发的过程中通常是团队协作完成的，在这个过程中，我们会用到版本控制管理工具，例如：SVN Git CVS等。\r\nSVN托管网站需要我们拥有一个（版本库）中央仓库，并且需要每一个工作站与中央仓库网络互通才能进行访问。而Git中没有一个中央仓库的概念，每一个工作站拥有一个本地版本库(分支)，用户将修改后的代码存放到本地版本库中，开发过程中不需要依赖网络环境，只是在最终合并的时候将工作站中的所有版本库进行推送合并到服务器版本库（master）。\r\n2.Git工作原理：\r\n本地工作目录提交到暂存区，当代码达到一定量后最终提交到服务器版本库。\r\n本地工作目录 -> 暂存区：git add\r\n暂存区 -> 版本库：git commit\r\n本地计算机工作目录 推送到 其他计算机工作目录：git push\r\n其他计算机工作目录 拉取到 本地计算机工作目录：git pull\r\n \r\n3.Git的安装\r\n下载地址：msysgit.github.io 会根据自己当前用户的操作系统类型重定向到相应的下载页面\r\n\r\n\r\n下载完成后打开，选择默认配置进行安装。\r\n安装完成后进入cmd下确认输入：git --version 查看是否已经将git添加到环境变量中（2.19默认自动将git添加到环境变量中），如果没有添加，则需要在path中添加git命令执行路径，例如：D:\\Program Files\\Git\\cmd\r\n\r\n \r\n4.Git的本地配置\r\n打开git bash，配置用户名和邮箱,用户名和邮箱相当于SVN中的用户名密码，是区分用户的唯一标识符，输入如下命令：\r\ngit config --global user.name \"example\"\r\ngit config --global user.email \'example@163.com\'\r\n添加完成后可以使用：git config --list 来查看配置是否生效，也可以在本地用户目录下查看.gitconfig文件中的内容与配置是否一致。\r\n\r\n5.配置远程仓库\r\n登录https://github.com，新建仓库\r\n\r\n添加仓库名称：demo 添加描述：初始化demo版本\r\n\r\n对应的https地址：https://github.com/hairuizone/demo.git\r\n对应的ssh地址：git@github.com:hairuizone/demo.git\r\n此时远程仓库已经配置完成。\r\n6.配置本地免密登录服务器仓库\r\n目的：本地计算机与远程服务器之间进行通信关联\r\n本地打开git bash，输入：ssh-keygen -t rsa -C example@163.com\r\n将密钥创建到本地用户目录下\r\n\r\n将本地公钥添加到服务器：\r\n    使用记事本打开id_rsa.pub，并将内容拷贝。\r\n    打开github服务器，选择Settings，并选择如图操作创建新的SSH key\r\n\r\nTitle：任意名称\r\nKey：将刚才拷贝的密钥粘贴进来，并将最后的回车删除\r\n\r\n此时，已经将本地的ssh公钥添加到服务器端，可以使用如下命令验证免密钥登录是否成功：\r\nssh -T git@github.com 提示输入：yes 出现如下界面说明免密登录已经配置完成。同时本地用户目录文件下可以看到一个known_hosts的文件。\r\n\r\n \r\n7.创建Git案例项目\r\n    在本地创建git项目\r\nD盘新建文件夹：gitdemo\r\n在此文件夹下创建文件helloGit.txt \r\nhelloGit.txt内容如下：hello this is git\r\n    在项目根目录（gitdemo文件夹内）右键 Git Bash Here\r\n    输入git init，完成后可以看到当前目录下出现了.git文件夹 则说明git本地项目创建成功。\r\n    \r\n    \r\n8.本地项目与远程资源库进行关联\r\ngit remote add origin https://github.com/hairuizone/demo.git\r\n或者使用ssh唯一标识符进行关联\r\ngit remote add origin git@github.com:hairuizone/demo.git\r\n\r\n \r\n9.Git常见命令的使用\r\n第一次发布项目\r\n将本地项目发布到服务器\r\n将本地项目提交到暂存区：git add .\r\n暂存区推到本地分支：git commit -m \"注释内容\"\r\n第一次将本地分支提交到远程仓库：git push -u origin master\r\n\r\n登录服务器查看查看刚才提交的内容如下：\r\n\r\n第一次下载项目\r\n    远程下载到本地：git clone https://github.com/hairuizone/demo.git\r\n \r\n提交项目\r\n    我们将hellGit.txt中的文件进行修改：hello this is git 1234，然后进行提交。\r\ngit add .\r\ngit commit -m \"注释\"\r\ngit push origin master\r\n\r\n\r\n \r\n更新项目\r\n远程更新到本地\r\ngit pull\r\n ','',2,NULL,3,'yc','2019-03-09',NULL,NULL,'我们在项目开发的过程中通常是团队协作完成的，在这个过程中，我们会用到版本控制管理工具，例如：SVN Git CVS等。\r\nSVN托管网站需要我们拥有一个（版本库）中央仓库，并且需要每一个工作站与中央仓库网络互通才能进行访问。而Git中没有一个中央仓库的概念，每一个工作站拥有一个本地版本库(分支)，用户将修改后的代码存放到本地版本库中，开发过程中不需要依赖网络环境，只是在最终合并的时候将工作站中的所有版本库进行推送合并到服务器版本库（master）。',NULL,NULL,NULL,NULL,NULL),(112,'老干部','','','Apache Maven 3.6.0安装配置','images/1.jpg','第一步：下载maven安装包\r\n下载地址：http://maven.apache.org/download.cgi  注意下载bin文件 src为源码\r\n\r\n \r\n第二步：解压下载文件\r\n将下载的压缩包解压，例如：D:\\Program Files\\apache-maven-3.6.0\r\n\r\n第三步：配置maven环境变量\r\n新建环境变量MAVEN_HOME 并添加路径值D:\\Program Files\\apache-maven-3.6.0\r\n\r\n编辑环境变量Path，添加%MAVEN_HOME%\\bin\\\r\n\r\n进入cmd 输入mvn -v查看maven是否正确安装\r\n\r\n \r\n配置Maven本地仓库\r\n打开文件D:\\Program Files\\apache-maven-3.6.0\\conf\\setting.xml\r\n找到如下代码：<localRepository>/path/to/local/repo</localRepository>\r\n我们可以看到，此段代码已经被注释了，需要取消注释，同时将值修改为本地路径，我这里选择D:\\Program Files\\apache-maven-3.6.0\\repo为本地maven仓库路径。\r\n（配置本地仓库的目的是为了能够更加快速的查找我们在程序开发的过程中需要用到的依赖包，如果本地仓库存在，则直接从仓库中获取，如果不存在，则会去远程仓库下载并保存到本地仓库）\r\n修改前\r\n\r\n修改后\r\n\r\n \r\n配置阿里云镜像仓库\r\n在settings.xml文件中的mirrors下添加mirror标签\r\n<mirror>\r\n<id>alimaven</id>\r\n<name>aliyun maven</name>\r\n<url>http://maven.aliyun.com/nexus/content/groups/public/</url>\r\n<mirrorOf>central</mirrorOf>\r\n</mirror>\r\n\r\n验证之前配置是否生效，命令窗口输入：mvn help:system\r\n \r\n可以发现，maven已经从阿里云镜像中下载了部分相关文件到本地配置路径下\r\n\r\n至此，Maven的安装和配置都已经完成，','',2,NULL,2,'yc','2019-03-09',NULL,NULL,'第一步：下载maven安装包下载地址：http://maven.apache.org/download.cgi  注意下载bin文件 src为源码',NULL,NULL,NULL,NULL,NULL),(113,'老干部','','','DB2常见命令','images/5.jpg','DAS服务启动：db2admin start\r\nDB2启动命令：db2start\r\nDB2停止命令：db2stop / db2stop force\r\n停止所有连接：db2 force application all\r\n连接到指定数据库：db2 connect to dbname user username using password\r\n \r\nBD2数据库导出orcl库中的所有表结构\r\ndb2look -d orcl -e -a -l -o /home/cmis/orcl.ddl\r\n导出指定用户的表结构\r\ndb2look -d orcl -z user1-e -o aa.sql\r\n \r\nDB2数据库导入表结构\r\ndb2 -tvf /home/cmis/orcl.ddl\r\n \r\n导出orcl下的所有数据\r\ndb2move orcl export -sn *\r\n \r\n导出orcl数据库下指定schema下的数据\r\ndb2move orcl export -sn schemaname\r\n \r\n使用db2move导入数据（替换原数据）\r\ndb2move orcl load -lo replace\r\n\r\n更新某张表的某个字段（扩容）\r\nalter table tablename alter columnname set data type CLOB(2048);\r\nalter table tablename alter columnname set data type VARCHAR(20);\r\n \r\n导出某一张表\r\ndb2 export to a.del of del select * from schema.tablename\r\n插入某张表数据\r\ndb2 import from a.del of del insert into schema.tablename\r\n替换某张表数据\r\ndb2 import from a.del of del replace into schema.tablename\r\n \r\n数据库清理日志\r\ndb2 list history archive log all for orcl\r\ndb2 prune history 20161118091620（最新的时间戳）\r\ndb2 list history backup all for orcl\r\ndb2 prune history 20161116160313 with force option and delete\r\ndb2 backup db orck online to /dev/null\r\n \r\n赋予某个用户操作数据库权限\r\ndb2 \"grant dbadm,createtab,bindadd,connect,create_not_fenced_routine,implicit_schema,load,create_external_routine,quiesce_connect,secadm on database  to user usename\"\r\n \r\n \r\n \r\n \r\nselect INDSCHEMA,indname from syscat.indexes where tabname=\'CUSTINFO\'\r\ndb2expln -d testdb -u easycore easycore -t -g -q \"SELECT USERPK,DEPTPK FROM easymis.s_userduty WHERE 9=9 and USERPK=\'admin\'\"\r\nDB2中的转意符为 \'\r\nUser exit for logging enabled (USEREXIT) = OFF\r\n如果等于ON则, 日志慢了, 要备份, 且会引发 table space 无法访问的问题\r\ndb2 list tables for schema easymis\r\n\r\ndb2 \"import from xxx.txt of del modified by coldel| insert into szjxx\"\r\n这个命令可以在DB2V8下load |分隔的文本。\r\n\r\ndb2 connect to easydb user easymis using easymis\r\ndb2 \"import from easymis.xxx.ixf of ixf insert into xxx\"\r\ncreate table student \r\n( \r\nno integer, \r\nname varchar(30), \r\nage integer, \r\nsex integer, \r\ncountry varchar(20), \r\ncity char(10) \r\n); \r\ncreate unique index ix_stu on student (no asc) include(name);\r\n\r\n测试管理系统SQL性能的过程中发现, 有些大的数据表在过渡完后,没有执行runstats on table ..., 这导致在大表关联查询或者其它复杂查询时性能差异极大,例如:\r\nSELECT A.CUSTNO,CUSTNAME,CERTTYPE,CERTNO,CUSTMGR,CUSTTERM,SEX,BIRTHDAY,CARDORGAN,ORGANDISTNO,MOBILETEL,OFFICETEL,HOMETEL,HOSTHOLDADDR,HOMEADDRESS,UNIT,MANAGEUNTNAME,UNTADDR,MANAGEUNTADDR,KHSFLB FROM EASYPUB.PRICUSTINF A,EASYPUB.CUSTINFO B WHERE (A.CUSTNO = B.CUSTNO ) AND ( CUSTNAME = ? )\r\nrunstats: 0.09秒\r\n未runstats: 1m20s\r\n注意在数据过渡后,对大表都加上runstats处理,加在数据过渡的脚本上\r\n \r\ndb2相关端口\r\n449\r\n8471\r\n8476\r\n#查看本instance下有哪些database \r\ndb2 LIST DATABASE DIRECTORY [ on /home/db2inst1 ] \r\n#启动数据库 \r\ndb2start\r\n#停止数据库\r\ndb2stop\r\n#连接数据库\r\ndb2 connect to database_name user db2 using pwd \r\n#中断数据库连接 \r\ndb2 disconnect database_name\r\n#查看及更改数据库实例的配置 \r\ndb2 get dbm cfg \r\ndb2 update dbm cfg for database_name using 参数名 参数\r\n4.10.1 打开对锁定情况的监控。 \r\ndb2 update dbm cfg using dft_mon_lock on \r\n4.10.2 更改诊断错误捕捉级别 \r\ndb2 update dbm cfg using diaglevel 3 \r\n0 为不记录信息 \r\n1 为仅记录错误 \r\n2 记录服务和非服务错误 \r\n缺省是3，记录db2的错误和警告 \r\n4 是记录全部信息，包括成功执行的信息 \r\n一般情况下，请不要用4，会造成db2的运行速度非常慢。 \r\n#查看数据库的配制\r\ndb2 get db cfg for database_name \r\n#写数据库管理程序配置\r\ndb2 update db cfg for database_name using 参数名 参数?\r\n4.9.1 改排序堆的大小 \r\ndb2 update db cfg for head using SORTHEAP 2048 \r\n将排序堆的大小改为2048个页面，查询比较多的应用最好将该值设置比较大一些。 \r\n4.9.2 改事物日志的大小 \r\ndb2 update db cfg for head using logfilsiz 40000 \r\n该项内容的大小要和数据库的事物处理相适应，如果事物比较大，应该要将该值改大一点。否则很容易处理日志文件满的错误。 \r\n4.9.3 出现程序堆内存不足时修改程序堆内存大小 \r\ndb2 update db cfg for head using applheapsz 40000 \r\n该值不能太小,否则会没有足够的内存来运行应用程序。\r\n#关闭所有应用连接\r\ndb2 force application all\r\n#查看应用连接\r\ndb2 list application for db database_name show detail\r\n授权标识 | 应用程序名 | 应用程序句柄 | 应用程序标识 | 序号# | 代理程序 | 协调程序 | 状态 | 状态更改时间 | DB 名 |DB 路径| | 节点号 | pid／线程\r\n其中：1、应用程序标识的第一部分是应用程序的IP地址，不过是已16进制表示的。 \r\n2、pid/线程即是在unix下看到的线程号。 \r\n停止应用程序： \r\ndb2 \"force application(236)\" \r\ndb2 \"force application all\"\r\n该236是查看中的应用程序句柄\r\n#整理表\r\ndb2 reorg table table_name \r\ndb2 runstats on table table_name with distribution and indexes all \r\n#导出表\r\ndb2 export to table_name.txt of del select * from table_name \r\ndb2 export to table_name.ixf of ixf select * from table_name \r\n#导入数据,自增字段不出现在txt里,insert values时自增字段用default\r\ndb2 import from table_name.txt of del insert into table_name\r\ndb2 \"insert into test.test values(\'姓名\',28,default)\"\r\n#执行一个批处理文件\r\ndb2 -tf 批处理文件名(命令结束;\\n)\r\ndb2 -f 批处理文件名(命令结束\\n)\r\n#从系统表中取所有表名\r\ndb2 \"select tabname,tabschema,type from syscat.tables\"\r\n#生成所有建库语句\r\ndb2look -d easydb -e -o ddd2.txt\r\ndb2look -d easydb -u ht -e -p\r\ndb2look -d easydb -u ht -w -asd -a -e\r\n#赋予user表权限\r\ndb2 \"grant all on table_name to user_name\"\r\ndb2 \"grant select/insert/update on table_name to user_name\"\r\ndb2 \"grant select on table_name to public\"\r\n#回收表权限\r\ndb2 \"revoke all on table_name from user user_name\"\r\ndb2 \"revoke select/insert/update on table_name from user user_name\"\r\ndb2 \"revoke all on table_name from public\"\r\n#取前3条记录\r\nselect * from table_name fetch first 3 rows only\r\n#显示当前用户所有表 \r\ndb2 list tables\r\n#显示所有系统表\r\ndb2 list tables for system \r\n#显示所有表\r\ndb2 list tables for all \r\n#显示指定模式所有表\r\ndb2 list tables for schema SCHEMA_NAME\r\n#确定表空间的状态\r\ndb2 list tablespaces show detail\r\n#显示当前活动数据库 ??\r\n#显示当前表结构\r\ndb2 \"describe select * from table_name\"\r\ndb2 \"describe table test.test\"\r\n#查看索引\r\ndb2 \"describe indexes for table test.test show detail\"\r\n#在db2中如何知道表的锁情况\r\n#在你执行你的存储过程之前，执行命令打开锁的监视开光\r\ndb2 update monitor switches using lock on\r\n#然后执行你的存储过程，在执行存储过程期间的时候使用命令\r\ndb2 get snapshot for locks on database_name\r\n#查看数据库表的死锁\r\n再用命令中心查询数据时要注意,如果用了交互式查询数据,命令中心将会给所查的记录加了s锁.这时如果要update记录,由于update要使用x锁,排它锁,将会处于锁等待.\r\n首先,将监视开关打开 \r\ndb2 update dbm cfg using dft_mon_lock on \r\n快照 \r\ndb2 get snapshot for Locks on cleardb >snap.log \r\ntables \r\nbufferpools \r\ntablespaces \r\ndatabase \r\n然后再看snap.log中的内容即可。 \r\n对Lock可根据Application handle（应用程序句柄）看每个应用程序的锁的情况。 \r\n监视完毕后，不要忘了将监视器关闭 \r\ndb2 update dbm cfg using dft_mon_lock off\r\n#可以看正在运行的程序有没有处于锁等待状态的\r\nlist applications for db database_name show detail\r\n#DB2的log sqllib/db2dump/db2diag.log\r\n#查看版本\r\ndb2level\r\ndb2 \"select * from sysibm.sysversions\"\r\n#设置当前schema\r\nSET SCHEMA=SCHEMA_NAME\r\n#查看能在配置文件注册表中设置的所有变量的列表\r\ndb2set -lr\r\n#修改注册项的值\r\n设定当前实例的一个参数\r\nDB2SET PARAMETER=VALUE\r\n设定一个全局级的参数\r\nDB2SET PARAMETER=VALUE -g (小写)\r\n#在DB2 CLP中执行操作系统命令\r\ndb2 => !command\r\n#如何获得DB2的命令的语法相关信息\r\nDB2 ? 显示所有DB2命令 \r\nDB2 ? COMMAND 显示命令信息\r\nDB2 ? SQLnnnn 显示这个SQLCODE的解释信息\r\nDB2 ? DB2nnnn 显示这个DB2错误的解释信息\r\n#如何查看当前CLP的设置\r\ndb2 LIST COMMAND OPTIONS\r\n#如何更新当前CLP会话的特定项设置\r\nDB2 UPDATE COMMAND OPTIONS USING OPTIONS ...\r\n#如何查看系统数据库目录\r\ndb2 LIST DB DIRECTORY\r\n#表空间\r\ndb2 list tablespaces\r\n#表容器空间\r\nLIST TABLESPACE CONTAINERS FOR 1\r\n#如何知道一个用户有多少表\r\nSELECT * FROM SYSIBM.SYSTABLES WHERE CREATOR=\'USER\'\r\n#如何知道用户下的函数\r\ndb2 \"select NAME from sysibm.SYSFUNCTIONS\"\r\n#如何知道用户下的VIEW数\r\ndb2 \"select NAME from sysibm.sysviews WHERE CREATOR=\'USER\'\"\r\n#如何知道用户下的TRIGGER数\r\nselect * from sysibm.SYSTRIGGERS WHERE SCHEMA=\'USER\'\r\n#如何知道TABLESPACE的状况\r\nselect * from sysibm.SYSTABLESPACES\r\n#如何知道SCHEMA的状况\r\ndb2 \"select NAME from sysibm.SYSSCHEMATA\"\r\n#如何知道INDEX的状况\r\nselect * from sysibm.SYSINDEXES\r\n#如何知道表的字段的状况\r\nselect * from sysibm.SYSCOLUMNS WHERE TBNAME=\'TABLE_NAME\'\r\n#如何知道DB2的数据类型\r\nselect * from sysibm.SYSDATATYPES\r\n#如何知道BUFFERPOOLS状况\r\nselect * from sysibm.SYSBUFFERPOOLS\r\n#DB2表的字段的修改限制\r\nalter table只能修改VARCHAR类型的并且只能增加不能减少\r\nalter table yhdab ALTER kh SET DATA TYPE varchar(13)\r\n#一次给一个表增加多个字段 \r\ndb2 \"alter table table_name add column t1 char(1) add column t2 char(2) add column t3 int\" \r\n#如何快速清除一个大表\r\nALTER TABLE TABLE_NAME ACTIVE NOT LOGGED INITALLY WITH EMPTY TABLE\r\n#如何查看数据库的包\r\ndb2 \"select * from sysCAT.PACKAGES\"\r\n#如何查看数据库的存储过程\r\nSELECT * FROM SYSCAT.PROCEDURES\r\nSELECT SUBSTR(PROCSCHEMA,1,15),SUBSTR(PROCNAME,1,15) FROM SYSCAT.PROCEDURES\r\n#如何查看表的约束\r\nSELECT * FROM SYSCAT.CHECKS WHERE TABNAME=\'TABLE_NAME\'\r\n#如何查看表的引用完整约束\r\nSELECT * FROM SYSCAT.REFERENCES WHERE TABNAME=\'TABLE_NAME\'\r\n#别名的使用\r\ndb2 \"create alias test.column for syscat.columns\"\r\ndb2 \"drop alias test.column\"\r\n#复制表结构建表\r\ncreate table new_table as (select * from old_table) definition only; \r\n#插入数据\r\ninsert into new_table select * from old_table; \r\n#建立VIEW\r\ndb2 \"create view test.v_test as select name from test.test\"\r\n#查看view,VIEWNAME要大写\r\ndb2 \"select viewname from syscat.views where viewname=\'V_TEST\'\"\r\n#建立唯一索引\r\ndb2 \"create unique index test.ix_test on test.test(name)\"\r\n#查看索引\r\ndb2 \"select indname from syscat.indexes\"\r\n#SUBSTR\r\ndb2 \"select substr(name,1,2) from test.test\"\r\n#数据类型转换,name为CHARACTER\r\ndb2 \"select cast(name as integer)+12 from test.test\"\r\n#LOCK\r\nlock table test in exclusive mode\r\nlock table test in share mode\r\n#用户权限\r\ndb2 GET AUTHORIZATIONS\r\n#模式特权\r\nGRANT CREATEIN ON SCHEMA SCHEMA-name TO USER USER_NAME\r\nGRANT ALTERIN ON SCHEMA SCHEMA-name TO USER USER_NAME\r\nGRANT DROPIN ON SCHEMA SCHEMA-name TO USER USER_NAME\r\nrevoke CREATEIN ON SCHEMA SCHEMA-name TO USER USER_NAME\r\nrevoke ALTERIN ON SCHEMA SCHEMA-name TO USER USER_NAME\r\nrevoke DROPIN ON SCHEMA SCHEMA-name TO USER USER_NAME\r\n#数据库特权 \r\ndb2 \"grant connect,createtab,dbadm on database to user user_name\"\r\ndb2 \"revoke connect,createtab,dbadm on database from user user_name\"\r\n#索引特权\r\ndb2 \"grant control on index test.ix_test to user_name\"\r\n#检索具有特权的所有授权名\r\n　　SELECT DISTINCT GRANTEE, GRANTEETYPE, \'DATABASE\' FROM SYSCAT.DBAUTH \r\n　　UNION \r\n　　SELECT DISTINCT GRANTEE, GRANTEETYPE, \'TABLE \' FROM SYSCAT.TABAUTH \r\n　　UNION \r\n　　SELECT DISTINCT GRANTEE, GRANTEETYPE, \'PACKAGE \' FROM SYSCAT.PACKAGEAUTH \r\n　　UNION \r\n　　SELECT DISTINCT GRANTEE, GRANTEETYPE, \'INDEX \' FROM SYSCAT.INDEXAUTH \r\n　　UNION \r\n　　SELECT DISTINCT GRANTEE, GRANTEETYPE, \'COLUMN \' FROM SYSCAT.COLAUTH \r\n　　UNION \r\n　　SELECT DISTINCT GRANTEE, GRANTEETYPE, \'SCHEMA \' FROM SYSCAT.SCHEMAAUTH \r\n　　UNION \r\n　　SELECT DISTINCT GRANTEE, GRANTEETYPE, \'SERVER \' FROM SYSCAT.PASSTHRUAUTH \r\n　　ORDER BY GRANTEE, GRANTEETYPE, 3\r\n#创建含identity值(即自动生成的ID)的表\r\ncreate table test2 ( name char(20) not null, age integer not null, number integer not null GENERATED ALWAYS AS IDENTITY (START WITH 500, INCREMENT BY 1)); \r\n#BEFORE CREATE DATABASE\r\ndb2set DB2CODEPAGE -null\r\n\r\ndb2 connect to boc user boc using boc\r\nlist applications for db boc show detail\r\ndb2 get snapshot for locks on boc\r\nlock table L_G_dksqdj in share mode\r\n \r\n\r\n^B^×^Adb2 get monitor switches\r\ndb2 update monitor switches STATEMENT on\r\nset -o vi\r\ndb2 update monitor switches using STATEMENT on\r\ndb2 update monitor switches using SORT on\r\ndb2 update monitor switches using BUFFERPOOL on\r\ndb2 reset monitor\r\ndb2 \\?\r\ndb2 RESET MONITOR\r\ndb2 \\? RESET MONITOR\r\ndb2 RESET MONITOR for tzcbmis\r\ndb2 RESET MONITOR for database tzcbmis\r\ndb2 \\? get snapshot\r\ndb2 get snapshot bufferpools\r\ndb2 get snapshot for bufferpools\r\ndb2 get snapshot for bufferpools on tzcbmis\r\ndb2 RESET MONITOR for tzcbmis\r\ndb2 RESET MONITOR for database tzcbmis\r\ndb2 get snapshot for application on tzcbmis\r\ndb2 get snapshot for all application\r\ndb2 get snapshot for application\r\ndb2 get snapshot for applications\r\ndb2 get snapshot for tables on dbnm\r\ndb2 get snapshot for all on dbnm\r\ndb2 update monitor switches using STATEMENT on\r\n \r\n\r\n对表进行任何操作都不被允许，提示SQLSTATE=57016 SQLCODE=-668 ，原因码 \"7\"的错误：SQL0668N Operation not allowed for reason code \"7\" on table XXX.\r\n首先查一下:\r\ndb2 ? 57016\r\nSQLSTATE 57016: 因为表不活动，所以不能对其进行访问。\r\n解决方法为：执行命令：reorg table XXX；即可。\r\n\r\nrunstats on table administrator.test;\r\nreorg table administrator.test;\r\n\r\nDB2事务隔离级别\r\n1、 RR 可重复读\r\n在SQL执行期间，所有执行些语句扫描过的纪录都会被加上相应的锁，它保证了SQL语句在看到数据之前，所有返回数据都保持不变\r\n2、 RS 读稳定性\r\n些隔离级别下，会锁定所有符合条件的记录\r\n3、 CS 游标稳定性\r\n只锁定游标所在位置以下的行，担是，如果改变了某一行数据，则挂起锁定该行，直到数据库落实\r\n4、 UR 未落实的读\r\n此级别允许访问其他事务未落实的更改，除非其他事务尝试删除或改变表\r\n例子\r\nselect * from db2uat.test for read only with ur\r\nselect * from db2uat.test with ur\r\n\r\n修改OS中 文件型内存占比\r\nvmo -o maxclient%=20\r\nvmo -o maxperm%=20\r\nsvmon -G\r\nvmo -o strict_maxperm=1\r\nSELECT BPNAME FROM SYSCAT.BUFFERPOOLS\r\nCREATE BUFFERPOOL <buffer pool name> PAGESIZE 4096\r\ndb2 list tablespace containers for 6 -- 其中6为表空间标识 用 db2 list tablespace可以看到\r\nselect * from sysibmadm.snapappl\r\ndb2diag -rc 0xFFFF889 --可以看db2dialog.log文件中的ZRC错误码\r\ndb2pd -agents -db sample --查看所有agent （pid client进程之间的关系）\r\ndb2pd -edu --查看edu线程\r\ndb2mtrk -i -d -v --查看DB2内存情况\r\n\r\ndb2 list applications --看当前联链的应用 apphandl=48\r\ndb2pd -db sample -app 48 --看apphandl=48 程序详细情况 查L-AnchID的值 233\r\ndb2pd -db sample -dyn 查看AnchID为233的SQL(用grep过滤) , 上述步骤可以倒序执行：\r\n首先找到文件对应的表，然后db2pd -db dbname –dyn找到操作这个表的sql，通过AnchID在db2pd -app -db dbname 找到AppHandl，通过db2pd -agent就可以找到agent\r\n\r\ndb2pd -db sample -tcbstats 可以查出进行过全表查询的表，和查询次数\r\n\r\nsqlcode：-805 sqlstate：51002 程序没有释放Statemt、 result会导致\r\n/home/db2inst1/sqllib/db2dump/db2diag.log\r\n\r\nINTRA_PARALLEL参数：\r\n该参数指定数据库管理器是否可以使用内部分区并行性(intra-partition parallelism)。默认值 NO 对于并发连接较多的情况(主要是OLTP)最好，而 YES 对于并发连接较少的情况以及复杂 SQL (OLAP/DSS)来说最好。混合的工作负载通常可以得益于NO。\r\n当启用该参数时，就会导致从共享内存中分配排序内存。此外，如果并发程度显著增加，那么还可能导致过多的系统开销。如果系统是非OLTP的，则CPU数与分区数的比例是 4:1，而CPU负载运行的平均百分比是50%，INTRA_PARA LLEL很可能会提高性能\r\n\r\ndb2 -v get snapshot for dbm\r\n\r\ndb2的log file是否可以创建在raw设备上？\r\nIt\'s possible, but as of DB2 V9.1, the use of raw devices for database logging is deprecated. As an alternative to using raw logs, you can use either direct input/output (DIO) or concurrent input/output (CIO).\r\nCheck registry variable DB2_LOGGER_NON_BUFFERED_IO.\r\nDB2? database products support the use of non-buffered I/O (also known as Direct I/O or DIO) when managing database recovery logs on AIX? JFS and JFS2 file systems. To disable file system caching for the file system that contains the database recovery logs, specify the AIX dio or cio (Concurrent I/O) mount options.\r\nNote: Do not use the dio or cio mount options on file systems that contain other DB2 files or directories, such as the sqllib directory.\r\nIf the file system will also contain non-DB2 files, consult your operating system documentation before disabling file system caching. Some AIX operating systems have requirements such as serialization of read and write access. DB2 database manager adheres to these requirements.\r\nTo configure database logging without file system caching:\r\n1.Mount the file system, specifying the AIX dio or cio mount options. \r\nConcurrent I/O (CIO) is an enhanced version of Direct I/O and is supported only on JFS2 file systems. Consult your operating system documentation for more information.\r\n2.Create a directory on the file system for the database recovery logs. For example: \r\nmkdir /new_filesystem/db2logs where new_filesystem is the mount point for the file system.\r\n3.Update the database log path. For example: \r\ndb2 update db cfg for sample using newlogpath /new_filesystem/db2logswhere SAMPLE is the database name. The new setting does not become the value for the logpath database configuration parameter until both of the following occur: \r\n?The database is in a consistent state, as indicated by the database_consistent database configuration parameter. \r\n?All users are disconnected from the database.\r\nThis configuration eliminates any overhead incurred by the operating system as a result of caching database recovery logs. However, the lack of file caching might degrade the performance of log archiving and rollback operations. This performance degradation can be addressed by ensuring that you use an appropriate number of disk spindles and by tuning the log buffer size database configuration parameter (logbufsz).\r\nDB2 database products also support non-buffered I/O for table spaces. Refer to Creating table spaces without file system caching\r\n--------------------------------------\r\ngrant某个schema下所有表的select权限\r\n如何给一个用户grant某个schema下所有表的select权限？\r\n可以用下面语句建立一个批处理文件：\r\nselect \'grant select on \'||rtrim(tabschema)||\'.\'||tabname||\' to user xlhe ;\' from syscat.tables where type=\'T\' and tabschema =\'某个shcema名称\'\r\n---------------------\r\n\r\nDB2日志是以文件的形式存放在文件系统中，分为两种模式：循环日志和归档日志。当创建新数据库时，日志的缺省模式是循环日志。在这种模式下，只能实现数据库的脱机备份和恢复。如果要实现联机备份和恢复，必须设为归档日志模式。在 DB2 UDB 中，脱机备份也是最简单的备份。脱机备份要求采取完全数据库备份，显然，在备份的过程中，数据库是脱机的。换言之，当执行脱机备份时，用户无法访问数据库。如果您正在使用循环日志记录，脱机备份是惟一受支持的备份类型。当首先创建一个数据库的时候，这是默认的日志记录方法。对于循环日志记录，log retain for recovery status 和 user exit for logging status 都被设为 NO。LOGRETAIN 和 USEREXIT 两个参数都被设为 OFF。\r\n目前在综合业务系统中，设置的均是归档日志模式；其它系统（如事后监督、经营决策、中间业务等）一般都设置为循环日志模式。至于采用何种模式，可以通过修改数据库配置参数（LOGRETAIN）来实现： 归档日志模式：db2 update db cfg for using logretain on 注：改为on后，查看数据库配置参数logretain的值时，实际显示的是recovery。改变此参数后，再次连接数据库会显示数据库处于备份暂挂（BACKUP PENDING）状态。这时，需要做一次对数据库的脱机备份（db2 backup db ），才能使数据库状态变为正常。\r\n \r\n----------------\r\n创建死锁事件监控器\r\ndb2 \"create event monitor dlockevm for deadlocks with details history write to file \'/home/cmsinst/deadlocks\'\"\r\ndb2 set event monitor dlockevm state=1\r\n查看事件输出\r\ndb2evmon -db cmsdb -evm dlockevm\r\n关闭并输出结果至文件\r\ndb2 flush event monitor dlockevm\r\ndb2 set event monitor dlockevm state=0\r\ndb2evmon -path /home/cmsinst/deadlocks > deadlock.txt\r\n删除监控器\r\ndb2 \"drop event monitor dlockevm\"\r\n-----------------\r\n当处理程序逻辑为对同一张表 select - update - select 时，有可能在并发操作时出现死锁，若该逻辑在循环中，则出现死锁的概率更大。\r\n\r\n树型数据查询\r\nwith T(usr_id,usr_super) as (select usr_id,usr_super from s_usr where usr_id=\'xxx\'\r\nunion all select s.usr_id,s.usr_super from s_usr S,T where s.usr_super=t.usr_id )\r\nselect usr_id,usr_super from T;\r\n\r\n当查询多条数据1000+时返回列数50+过多时性能会急剧下降\r\n\r\nLOB INLINE 方式可以将较小的LOB数据与普通数据存放在一起，因此可以用BUFFERPOOL，可以被压缩\r\ncreate table xxxt ( yyycoln clob inline length 1000 ); -- 小于1000的大数据，将与普通数据共同存储\r\n由于BLOB没有字符转换，因此推荐用BLOB\r\n复合索引中的第一个字段的数据区分度对索引性能影响大，区分度高的尽量放在第一个字段\r\nINSERT时慢，发生在PCTFREE较高且行记录较大时，频繁地寻找新空闲数据块，对于批量INSERT可以将表的参数设置APPEND ON，在INSERT结束时再改回APPEND OFF。\r\nUPDATE时慢，可以调整表的PCTFREE参数，防止出现行的溢出\r\n对于DISTINCT、ORDER BY、MAX也需要建索引\r\n \r\n--删除某个schema下所有的表\r\nselect \'DROP TABLE \' || tabname ||\' ;\' from syscat.tables where tabschema=\'tabschema\'\r\n \r\n \r\n \r\n \r\nSQLCODE: -443, SQLSTATE: 38553\r\n解决方法：\r\n打开db2命令行，切换到本机db2的/bnd”目录下，\r\n1、db2 connect to 数据库名 user 用户名 using 密码\r\n2、执行db2 bind db2schema.bnd blocking all grant public\r\n \r\nDB2 rbind报错处理\r\nExplicitly rebind packages by performing the below commands.\r\n\r\ndb2 connect to SAMPLE\r\n\r\ndb2 -x \"select \'REBIND PACKAGE \' || rtrim(pkgschema) || \'.\' || rtrim(pkgname) || \';\' as command from syscat.packages\" > rebind.sql\r\n\r\ndb2 -tvf rebind.sql\r\n \r\n如果显示需要先绑定NULLID.***  请先执行 REBIND PACKAGENULLID.***\r\n \r\n \r\n \r\n \r\n','',2,NULL,5,'yc','2019-03-09',NULL,NULL,'DB2常见命令',NULL,NULL,NULL,NULL,NULL),(114,'老干部','','','Oracle数据库常用操作','images/7.jpg','登录oracle数据库\r\nsqlplus / as sysdba\r\n创建用户\r\ncreate user username identified by password;\r\n给用户赋dba权限\r\ngrant dba to username;\r\n \r\n创建表空间TBS_CIIS2ND_DATA\r\n\r\n\r\n1\r\ncreatetablespaceTBS_CIIS2ND_DATAdatafile\'D:\\app\\thinkpad\\oradata\\cmis\\TBS_CIIS2ND_DATA.DBF\'size256Mautoextendonnext100M\r\n \r\n使用exp导出dmp文件\r\nexp username/password@orcl file=/home/user/orcl-exp.dmp log=/home/user/orcl-exp.log owner=username\r\n使用imp导入dmp文件\r\nimp username/password file=/home/user/orcl-exp.dmp touser=username full=y ignore=y;\r\n \r\n查看oracle directory目录\r\nselect * from dba_directories;\r\n \r\n用expdp导出数据\r\n1)导出用户\r\nexpdp scott/tiger@orcl schemas=scott dumpfile=expdp.dmp directory=dump_dir;\r\n2)导出表\r\nexpdp scott/tiger@orcl tables=emp,dept dumpfile=expdp.dmp directory=dump_dir;\r\n3)按查询条件导\r\nexpdp scott/tiger@orcl directory=dump_dir dumpfile=expdp.dmp tables=empquery=\'where deptno=20\';\r\n4)按表空间导\r\nexpdp system/manager@orcl directory=dump_dir dumpfile=tablespace.dmptablespaces=temp,example;\r\n5)导整个数据库\r\nexpdp system/manager@orcl directory=dump_dir dumpfile=full.dmp full=y;\r\n \r\n用impdp导入数据\r\n1)导入用户（从用户scott导入到用户scott）\r\nimpdp scott/tiger@orcl directory=dump_dir dumpfile=expdp.dmp schemas=scott;\r\n2)导入表（从scott用户中把表dept和emp导入到system用户中）\r\nimpdp system/manager@orcl directory=dump_dir dumpfile=expdp.dmptables=scott.dept,scott.emp remap_schema=scott:system;\r\n3)导入表空间\r\nimpdp system/manager@orcl directory=dump_dir dumpfile=tablespace.dmp tablespaces=example;\r\n4)导入数据库\r\nimpdb system/manager@orcl directory=dump_dir dumpfile=full.dmp full=y;\r\n5)追加数据\r\nimpdp system/manager@orcl directory=dump_dir dumpfile=expdp.dmp schemas=systemtable_exists_action','#分布式#',2,NULL,4,'yc','2019-03-09',NULL,NULL,'Oracle数据库常用操作',NULL,NULL,NULL,NULL,NULL),(115,'老干部',' 翟永超','http://blog.didispace.com/spring-cloud-alibaba-version/','Spring Cloud Alibaba与Spring Boot、Spring Cloud之间不得不说的版本关系 ','images/7.jpg','这篇博文是临时增加出来的内容，主要是由于最近连载《Spring Cloud Alibaba基础教程》系列的时候，碰到读者咨询的大量问题中存在一个比较普遍的问题：版本的选择。其实这类问题，在之前写Spring Cloud基础教程的时候，就已经发过一篇《聊聊Spring Cloud版本的那些事儿》，来说明Spring Boot和Spring Cloud版本之间的关系。\r\nSpring Cloud Alibaba现阶段版本的特殊性\r\n\r\n现在的Spring Cloud Alibaba由于没有纳入到Spring Cloud的主版本管理中，所以我们需要自己去引入其版本信息，比如之前教程中的例子：\r\n\r\n<dependencyManagement>\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.cloud</groupId>\r\n            <artifactId>spring-cloud-dependencies</artifactId>\r\n            <version>Finchley.SR1</version>\r\n            <type>pom</type>\r\n            <scope>import</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.cloud</groupId>\r\n            <artifactId>spring-cloud-alibaba-dependencies</artifactId>\r\n            <version>0.2.1.RELEASE</version>\r\n            <type>pom</type>\r\n            <scope>import</scope>\r\n        </dependency>\r\n    </dependencies>\r\n</dependencyManagement>\r\n\r\n而不是像以往使用Spring Cloud的时候，直接引入Spring Cloud的主版本（Dalston、Edgware、Finchley、Greenwich这些）就可以的。我们需要像上面的例子那样，单独的引入spring-cloud-alibaba-dependencies来管理Spring Cloud Alibaba下的组件版本。\r\n\r\n由于Spring Cloud基于Spring Boot构建，而Spring Cloud Alibaba又基于Spring Cloud Common的规范实现，所以当我们使用Spring Cloud Alibaba来构建微服务应用的时候，需要知道这三者之间的版本关系。\r\n\r\n下表整理了目前Spring Cloud Alibaba的版本与Spring Boot、Spring Cloud版本的兼容关系：\r\nSpring Boot 	Spring Cloud 	Spring Cloud Alibaba\r\n2.1.x 	Greenwich 	0.2.2（还未RELEASE）\r\n2.0.x 	Finchley 	0.2.1\r\n1.5.x 	Edgware 	0.1.1\r\n1.5.x 	Dalston 	0.1.1\r\n\r\n所以，不论您是在读我的《Spring Boot基础教程》、《Spring Cloud基础教程》还是正在连载的《Spring Cloud Alibaba系列教程》。当您照着博子的顺序，一步步做下来，但是没有调试成功的时候，强烈建议检查一下，您使用的版本是否符合上表的关系。\r\n推荐：Spring Cloud Alibaba基础教程\r\n\r\n    《Spring Cloud Alibaba基础教程：使用Nacos实现服务注册与发现》\r\n    《Spring Cloud Alibaba基础教程：支持的几种服务消费方式》\r\n    《Spring Cloud Alibaba基础教程：使用Nacos作为配置中心》\r\n    《Spring Cloud Alibaba基础教程：Nacos配置的加载规则详解》\r\n    《Spring Cloud Alibaba基础教程：Nacos配置的多环境管理》\r\n    《Spring Cloud Alibaba基础教程：Nacos配置的多文件加载与共享配置》\r\n    《Spring Cloud Alibaba基础教程：Nacos的数据持久化》\r\n    《Spring Cloud Alibaba基础教程：Nacos的集群部署》\r\n\r\n该系列教程的代码示例：\r\n\r\n    Github：https://github.com/dyc87112/SpringCloud-Learning/\r\n    Gitee：https://gitee.com/didispace/SpringCloud-Learning/\r\n','',4,NULL,2,'zz','2019-03-09',NULL,NULL,'这篇博文是临时增加出来的内容，主要是由于最近连载《Spring Cloud Alibaba基础教程》系列的时候，碰到读者咨询的大量问题中存在一个比较普遍的问题：版本的选择。其实这类问题，在之前写Spring Cloud基础教程的时候，就已经发过一篇《聊聊Spring Cloud版本的那些事儿》，来说明Spring Boot和Spring Cloud版本之间的关系。\r\nSpring Cloud Alibaba现阶段版本的特殊性\r\n\r\n',NULL,NULL,NULL,NULL,NULL),(116,'老干部','','','使用Consul做服务发现的若干姿势 ','images/9.jpg','从2016年起就开始接触Consul，使用的主要目的就是做服务发现，后来逐步应用于生产环境，并总结了少许使用经验。最开始使用Consul的人不多，为了方便交流创建了一个QQ群（群号在最后），这两年微服务越来越火，使用Consul的人也越来越多，目前群里已有400多人，经常有人问一些问题，比如：\r\n\r\n    服务注册到节点后，其他节点为什么没有同步？\r\n    Client是干什么的？（Client有什么作用？）\r\n    能不能直接注册到Server？（是否只有Server节点就够了？）\r\n    服务信息是保存在哪里的？\r\n    如果节点挂了健康检查能不能转移到别的节点？\r\n\r\n有些人可能对服务注册和发现还没有概念，有些人可能使用过其它服务发现的工具，比如zookeeper，etcd，会有一些先入为主的经验。这篇文章将结合Consul的官方文档和自己的实际经验，谈一下Consul做服务发现的方式，文中尽量不依赖具体的框架和开发语言，从原理上进行说明，希望能够讲清楚上边的几个问题。\r\n为什么使用服务发现\r\n\r\n防止硬编码、容灾、水平扩缩容、提高运维效率等等，只要你想使用服务发现总能找到合适的理由。\r\n\r\n一般的说法是因为使用微服务架构。传统的单体架构不够灵活不能很好的适应变化，从而向微服务架构进行转换，而伴随着大量服务的出现，管理运维十分不便，于是开始搞一些自动化的策略，服务发现应运而生。所以如果需要使用服务发现，你应该有一些对服务治理的痛点。\r\n\r\n但是引入服务发现就可能引入一些技术栈，增加系统总体的复杂度，如果你只有很少的几个服务，比如10个以下，并且业务不怎么变化，吞吐量预计也很稳定，可能就没有必要使用服务发现。\r\nConsul内部原理\r\n\r\n下面这张图来源于Consul官网，很好的解释了Consul的工作原理，先大致看一下。\r\n\r\n首先Consul支持多数据中心，在上图中有两个DataCenter，他们通过Internet互联，同时请注意为了提高通信效率，只有Server节点才加入跨数据中心的通信。\r\n\r\n在单个数据中心中，Consul分为Client和Server两种节点（所有的节点也被称为Agent），Server节点保存数据，Client负责健康检查及转发数据请求到Server；Server节点有一个Leader和多个Follower，Leader节点会将数据同步到Follower，Server的数量推荐是3个或者5个，在Leader挂掉的时候会启动选举机制产生一个新的Leader。\r\n\r\n集群内的Consul节点通过gossip协议（流言协议）维护成员关系，也就是说某个节点了解集群内现在还有哪些节点，这些节点是Client还是Server。单个数据中心的流言协议同时使用TCP和UDP通信，并且都使用8301端口。跨数据中心的流言协议也同时使用TCP和UDP通信，端口使用8302。\r\n\r\n集群内数据的读写请求既可以直接发到Server，也可以通过Client使用RPC转发到Server，请求最终会到达Leader节点，在允许数据轻微陈旧的情况下，读请求也可以在普通的Server节点完成，集群内数据的读写和复制都是通过TCP的8300端口完成。\r\nConsul服务发现原理\r\n\r\n下面这张图是自己画的，基本描述了服务发现的完整流程，先大致看一下。\r\n\r\n首先需要有一个正常的Consul集群，有Server，有Leader。这里在服务器Server1、Server2、Server3上分别部署了Consul Server，假设他们选举了Server2上的Consul Server节点为Leader。这些服务器上最好只部署Consul程序，以尽量维护Consul Server的稳定。\r\n\r\n然后在服务器Server4和Server5上通过Consul Client分别注册Service A、B、C，这里每个Service分别部署在了两个服务器上，这样可以避免Service的单点问题。服务注册到Consul可以通过HTTP API（8500端口）的方式，也可以通过Consul配置文件的方式。Consul Client可以认为是无状态的，它将注册信息通过RPC转发到Consul Server，服务信息保存在Server的各个节点中，并且通过Raft实现了强一致性。\r\n\r\n最后在服务器Server6中Program D需要访问Service B，这时候Program D首先访问本机Consul Client提供的HTTP API，本机Client会将请求转发到Consul Server，Consul Server查询到Service B当前的信息返回，最终Program D拿到了Service B的所有部署的IP和端口，然后就可以选择Service B的其中一个部署并向其发起请求了。如果服务发现采用的是DNS方式，则Program D中直接使用Service B的服务发现域名，域名解析请求首先到达本机DNS代理，然后转发到本机Consul Client，本机Client会将请求转发到Consul Server，Consul Server查询到Service B当前的信息返回，最终Program D拿到了Service B的某个部署的IP和端口。\r\n\r\n图中描述的部署架构笔者认为是最普适最简单的方案，从某些默认配置或设计上看也是官方希望使用者采用的方案，比如8500端口默认监听127.0.0.1，当然有些同学不赞同，后边会提到其他方案。\r\nConsul实际使用\r\n\r\n为了更快的熟悉Consul的原理及其使用方式，最好还是自己实际测试下。\r\n\r\nConsul安装十分简单，但是在一台机器上不方便搭建集群进行测试，使用虚拟机比较重，所以这里选择了docker。这里用了Windows 10，需要是专业版，因为Windows上的Docker依赖Hyper-V，而这个需要专业版才能支持。这里对于Docker的使用不会做过多的描述，如果遇到相关问题请搜索一下。\r\n安装Docker\r\n\r\n通过这个地址下载安装：\r\n\r\nhttps://store.docker.com/editions/community/docker-ce-desktop-windows\r\n\r\n安装完成后打开 Windows PowerShell，输入docker –version，如果正常输出docker版本就可以了。\r\n启动Consul集群\r\n\r\n在 Windows PowerShell中执行命令拉取最新版本的Consul镜像：\r\n\r\ndocker pull consul\r\n\r\n然后就可以启动集群了，这里启动4个Consul Agent，3个Server（会选举出一个leader），1个Client。\r\n\r\n#启动第1个Server节点，集群要求要有3个Server，将容器8500端口映射到主机8900端口，同时开启管理界面\r\ndocker run -d --name=consul1 -p 8900:8500 -e CONSUL_BIND_INTERFACE=eth0 consul agent --server=true --bootstrap-expect=3 --client=0.0.0.0 -ui\r\n \r\n#启动第2个Server节点，并加入集群\r\ndocker run -d --name=consul2 -e CONSUL_BIND_INTERFACE=eth0 consul agent --server=true --client=0.0.0.0 --join 172.17.0.2\r\n \r\n#启动第3个Server节点，并加入集群\r\ndocker run -d --name=consul3 -e CONSUL_BIND_INTERFACE=eth0 consul agent --server=true --client=0.0.0.0 --join 172.17.0.2\r\n \r\n#启动第4个Client节点，并加入集群\r\ndocker run -d --name=consul4 -e CONSUL_BIND_INTERFACE=eth0 consul agent --server=false --client=0.0.0.0 --join 172.17.0.2\r\n\r\n第1个启动容器的IP一般是172.17.0.2，后边启动的几个容器IP会排着来：172.17.0.3、172.17.0.4、172.17.0.5。\r\n\r\n这些Consul节点在Docker的容器内是互通的，他们通过桥接的模式通信。但是如果主机要访问容器内的网络，需要做端口映射。在启动第一个容器时，将Consul的8500端口映射到了主机的8900端口，这样就可以方便的通过主机的浏览器查看集群信息。\r\n\r\n进入容器consul1：\r\n\r\ndocker exec -it consul1 /bin/sh\r\n \r\n#执行ls后可以看到consul就在根目录\r\nls\r\n\r\n输入exit可以跳出容器。\r\n服务注册\r\n\r\n自己写一个web服务，用最熟悉的开发语言就好了，不过需要在容器中能够跑起来，可能需要安装运行环境，比如python、java、.net core等的sdk及web服务器，需要注意的是Consul的docker镜像基于alpine系统，具体运行环境的安装请搜索一下。\r\n\r\n这里写了一个hello服务，通过配置文件的方式注册到Consul，服务的相关信息：\r\n\r\n    name：hello，服务名称，需要能够区分不同的业务服务，可以部署多份并使用相同的name注册。\r\n    id：hello1，服务id，在每个节点上需要唯一，如果有重复会被覆盖。\r\n    address：172.17.0.5，服务所在机器的地址。\r\n    port：5000，服务的端口。\r\n    健康检查地址：http://localhost:5000/，如果返回HTTP状态码为200就代表服务健康，每10秒Consul请求一次，请求超时时间为1秒。\r\n\r\n请将下面的内容保存成文件services.json，并上传到容器的/consul/config目录中。\r\n\r\n{\r\n  \"services\": [\r\n    {\r\n      \"id\": \"hello1\",\r\n      \"name\": \"hello\",\r\n      \"tags\": [\r\n        \"primary\"\r\n      ],\r\n      \"address\": \"172.17.0.5\",\r\n      \"port\": 5000,\r\n      \"checks\": [\r\n        {\r\n        \"http\": \"http://localhost:5000/\",\r\n        \"tls_skip_verify\": false,\r\n        \"method\": \"Get\",\r\n        \"interval\": \"10s\",\r\n        \"timeout\": \"1s\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n\r\n复制到consul config目录：\r\n\r\ndocker cp {这里请替换成services.json的本地路径} consul4:/consul/config\r\n\r\n重新加载consul配置：\r\n\r\nconsul reload\r\n\r\n然后这个服务就注册成功了。可以将这个服务部署到多个节点，比如部署到consul1和consul4，并同时运行。\r\n\r\n服务发现\r\n\r\n服务注册成功以后，调用方获取相应服务地址的过程就是服务发现。Consul提供了多种方式。\r\n\r\nHTTP API方式：\r\n\r\ncurl http://127.0.0.1:8500/v1/health/service/hello?passing=false\r\n\r\n返回的信息包括注册的Consul节点信息、服务信息及服务的健康检查信息。这里用了一个参数passing=false，会自动过滤掉不健康的服务，包括本身不健康的服务和不健康的Consul节点上的服务，从这个设计上可以看出Consul将服务的状态绑定到了节点的状态。\r\n\r\n如果服务有多个部署，会返回服务的多条信息，调用方需要决定使用哪个部署，常见的可以随机或者轮询。为了提高服务吞吐量，以及减轻Consul的压力，还可以缓存获取到的服务节点信息，不过要做好容错的方案，因为缓存服务部署可能会变得不可用。具体是否缓存需要结合自己的访问量及容错规则来确定。\r\n\r\n上边的参数passing默认为false，也就是说不健康的节点也会返回，结合获取节点全部服务的方法，这里可以做到获取全部服务的实时健康状态，并对不健康的服务进行报警处理。\r\n\r\nDNS方式：\r\n\r\nhello服务的域名是：hello.service.dc1.consul，后边的service代表服务，固定；dc1是数据中心的名字，可以配置；最后的consul也可以配置。\r\n\r\n官方在介绍DNS方式时经常使用dig命令进行测试，但是alpine系统中没有dig命令，也没有相关的包可以安装，但是有人实现了，下载下来解压到bin目录就可以了。\r\n\r\ncurl -L https://github.com/sequenceiq/docker-alpine-dig/releases/download/v9.10.2/dig.tgz\\|tar -xzv -C /usr/local/bin\r\n\r\n然后执行dig命令：\r\n\r\ndig @127.0.0.1 -p 8600 hello.service.dc1.consul. ANY\r\n\r\n如果报错：parse of /etc/resolv.conf failed ，请将resolv.conf中的search那行删掉。\r\n\r\n正常的话可以看到返回了服务部署的IP信息，如果有多个部署会看到多个，如果某个部署不健康了会自动剔除（包括部署所在节点不健康的情况）。需要注意这种方式不会返回服务的端口信息。\r\n\r\n使用DNS的方式可以在程序中集成一个DNS解析库，也可以自定义本地的DNS Server。自定义本地DNS Server是指将.consul域的请求全部转发到Consul Agent，Windows上有DNS Agent，Linux上有Dnsmasq；对于非Consul提供的服务则继续请求原DNS；使用DNS Server时Consul会随机返回具体服务的多个部署中的一个，仅能提供简单的负载均衡。\r\n\r\nDNS缓存问题：DNS缓存一般存在于应用程序的网络库、本地DNS客户端或者代理，Consul Sever本身可以认为是没有缓存的（为了提高集群DNS吞吐量，可以设置使用普通Server上的陈旧数据，但影响一般不大），DNS缓存可以减轻Consul Server的访问压力，但是也会导致访问到不可用的服务。使用时需要根据实际访问量和容错能力确定DNS缓存方案。\r\n\r\nConsul Template\r\n\r\nConsul Template是Consul官方提供的一个工具，严格的来说不是标准的服务发现方式。这个工具会通过Consul监听数据变化然后替换模板中使用的标签，并发布替换后的文件到指定的目录。在nginx等web服务器做反向代理和负载均衡时特别有用。\r\n\r\nConsul的docker镜像中没有集成这个工具，需要自己安装，比较简单：\r\n\r\ncurl -L https://releases.hashicorp.com/consul-template/0.19.5/consul-template_0.19.5_linux_amd64.tgz\\|tar -xzv -C /usr/local/bin\r\n\r\n然后创建一个文件：in.tpl，内容为：\r\n\r\n{{ range service \"hello\" }}\r\nserver {{ .Name }}{{ .Address }}:{{ .Port }}{{ end }}\r\n\r\n这个标签会遍历hello服务的所有部署，并按照指定的格式输出。在此文件目录下执行：\r\n\r\nnohup consul-template -template \"in.tpl:out.txt\" &\r\n\r\n现在你可以cat out.txt查看根据模板生产的内容，新增或者关闭服务，文件内容会自动更新。\r\n\r\n此工具我没有用在生产环境，详细使用请访问：https://github.com/hashicorp/consul-template\r\n节点和服务注销\r\n\r\n节点和服务的注销可以使用HTTP API:\r\n\r\n    注销任意节点和服务：/catalog/deregister\r\n    注销当前节点的服务：/agent/service/deregister/:service_id\r\n\r\n注意：\r\n\r\n如果注销的服务还在运行，则会再次同步到catalog中，因此应该只在agent不可用时才使用catalog的注销API。\r\n\r\n节点在宕机时状态会变为failed，默认情况下72小时后会被从集群移除。\r\n\r\n如果某个节点不继续使用了，也可以在本机使用consul leave命令，或者在其它节点使用consul force-leave 节点Id，则节点上的服务和健康检查全部注销。\r\nConsul的健康检查\r\n\r\nConsul做服务发现是专业的，健康检查是其中一项必不可少的功能，其提供Script/TCP/HTTP+Interval，以及TTL等多种方式。服务的健康检查由服务注册到的Agent来处理，这个Agent既可以是Client也可以是Server。\r\n\r\n很多同学都使用ZooKeeper或者etcd做服务发现，使用Consul时发现节点挂掉后服务的状态变为不可用了，所以有同学问服务为什么不在各个节点之间同步？这个根本原因是服务发现的实现原理不同。\r\n\r\nConsul与ZooKeeper、etcd的区别\r\n\r\n后边这两个工具是通过键值存储来实现服务的注册与发现。\r\n\r\n    ZooKeeper利用临时节点的机制，业务服务启动时创建临时节点，节点在服务就在，节点不存在服务就不存在。\r\n    etcd利用TTL机制，业务服务启动时创建键值对，定时更新ttl，ttl过期则服务不可用。\r\n\r\nZooKeeper和etcd的键值存储都是强一致性的，也就是说键值对会自动同步到多个节点，只要在某个节点上存在就可以认为对应的业务服务是可用的。\r\n\r\nConsul的数据同步也是强一致性的，服务的注册信息会在Server节点之间同步，相比ZK、etcd，服务的信息还是持久化保存的，即使服务部署不可用了，仍旧可以查询到这个服务部署。但是业务服务的可用状态是由注册到的Agent来维护的，Agent如果不能正常工作了，则无法确定服务的真实状态，并且Consul是相当稳定了，Agent挂掉的情况下大概率服务器的状态也可能是不好的，此时屏蔽掉此节点上的服务是合理的。Consul也确实是这样设计的，DNS接口会自动屏蔽挂掉节点上的服务，HTTP API也认为挂掉节点上的服务不是passing的。\r\n\r\n鉴于Consul健康检查的这种机制，同时避免单点故障，所有的业务服务应该部署多份，并注册到不同的Consul节点。部署多份可能会给你的设计带来一些挑战，因为调用方同时访问多个服务实例可能会由于会话不共享导致状态不一致，这个有许多成熟的解决方案，可以去查询，这里不做说明。\r\n\r\n健康检查能不能支持故障转移？\r\n\r\n上边提到健康检查是由服务注册到的Agent来处理的，那么如果这个Agent挂掉了，会不会有别的Agent来接管健康检查呢？答案是否定的。\r\n\r\n从问题产生的原因来看，在应用于生产环境之前，肯定需要对各种场景进行测试，没有问题才会上线，所以显而易见的问题可以屏蔽掉；如果是新版本Consul的BUG导致的，此时需要降级；如果这个BUG是偶发的，那么只需要将Consul重新拉起来就可以了，这样比较简单；如果是硬件、网络或者操作系统故障，那么节点上服务的可用性也很难保障，不需要别的Agent接管健康检查。\r\n\r\n从实现上看，选择哪个节点是个问题，这需要实时或准实时同步各个节点的负载状态，而且由于业务服务运行状态多变，即使当时选择出了负载比较轻松的节点，无法保证某个时段任务又变得繁重，可能造成新的更大范围的崩溃。如果原来的节点还要启动起来，那么接管的健康检查是否还要撤销，如果要，需要记录服务们最初注册的节点，然后有一个监听机制来触发，如果不要，通过服务发现就会获取到很多冗余的信息，并且随着时间推移，这种数据会越来越多，系统变的无序。\r\n\r\n从实际应用看，节点上的服务可能既要被发现，又要发现别的服务，如果节点挂掉了，仅提供被发现的功能实际上服务还是不可用的。当然发现别的服务也可以不使用本机节点，可以通过访问一个Nginx实现的若干Consul节点的负载均衡来实现，这无疑又引入了新的技术栈。\r\n\r\n如果不是上边提到的问题，或者你可以通过一些方式解决这些问题，健康检查接管的实现也必然是比较复杂的，因为分布式系统的状态同步是比较复杂的。同时不要忘了服务部署了多份，挂掉一个不应该影响系统的快速恢复，所以没必要去做这个接管。\r\nConsul的其它部署架构\r\n\r\n如果你实在不想在每个主机部署Consul Client，还有一个多路注册的方案可供选择，这是交流群中获得的思路。\r\n\r\n如图所示，在专门的服务器上部署Consul Client，然后每个服务都注册到多个Client，这里为了避免服务单点问题还是每个服务部署多份，需要服务发现时，程序向一个提供负载均衡的程序发起请求，该程序将请求转发到某个Consul Client。这种方案需要注意将Consul的8500端口绑定到私网IP上，默认只有127.0.0.1。\r\n\r\n这个架构的优势：\r\n\r\n    Consul节点服务器与应用服务器隔离，互相干扰少；\r\n    不用每台主机都部署Consul，方便Consul的集中管理；\r\n    某个Consul Client挂掉的情况下，注册到其上的服务仍有机会被访问到；\r\n\r\n但也需要注意其缺点：\r\n\r\n    引入更多技术栈：负载均衡的实现，不仅要考虑Consul Client的负载均衡，还要考虑负载均衡本身的单点问题。\r\n    Client的节点数量：单个Client如果注册的服务太多，负载较重，需要有个算法（比如hash一致）合理分配每个Client上的服务数量，以及确定Client的总体数量。\r\n    服务发现要过滤掉重复的注册，因为注册到了多个节点会认为是多个部署（DNS接口不会有这个问题）。\r\n\r\n这个方案其实还可以优化，服务发现使用的负载均衡可以直接代理Server节点，因为相关请求还是会转发到Server节点，不如直接就发到Server。\r\n\r\n是否可以只有Server？\r\n\r\n这个问题的答案还是有关服务数量的问题，首先Server的节点数量不是越多越好，3个或者5个是推荐的数量，数量越多数据同步的处理越慢（强一致性）；然后每个节点可以注册的服务数量是有上限的，这个受限于软硬件的处理能力。所以如果你的服务只有10个左右，只有Server问题是不大的，但是这时候有没有必要使用Consul呢？因此正常使用Consul的时候还是要有Client才好，这也符合Consul的反熵设计。\r\n\r\n大家可以将这个部署架构与前文提到的普适架构对比下，看看哪个更适合自己，或者你有更好的方案欢迎分享出来。','',2,NULL,3,'yc','2019-03-09',NULL,NULL,'从2016年起就开始接触Consul，使用的主要目的就是做服务发现，后来逐步应用于生产环境，并总结了少许使用经验。最开始使用Consul的人不多，为了方便交流创建了一个QQ群（群号在最后），这两年微服务越来越火，使用Consul的人也越来越多，目前群里已有400多人，经常有人问一些问题，比如：\r\n\r\n    服务注册到节点后，其他节点为什么没有同步？\r\n    Client是干什么的？（Client有什么作用？）\r\n    能不能直接注册到Server？（是否只有Server节点就够了？）\r\n    服务信息是保存在哪里的？\r\n    如果节点挂了健康检查能不能转移到别的节点？\r\n',NULL,NULL,NULL,NULL,NULL),(117,'老干部','','','你的微服务敢独立交付么？ ','images/3.jpg','最近经常在项目或是社区里听到大家谈论微服务架构，但谈论的焦点更多集中在微服务拆分，分布式架构，微服务门槛，DevOps配套设施等话题上。\r\n\r\n但是在我眼里，真正能称之为微服务架构的少之又少。原因也很简单，我所见到的很多所谓的微服务架构项目，大多都没有做到微服务架构的一个基本要求：服务的独立部署（交付）。\r\n\r\n这里的独立部署和自动化部署还不是一个概念，服务的自动化部署相对简单，已有大量的工具可以帮助我们做到。但是这里所谈的独立部署，我认为关键和难点并不在于“部署”，而在于“独立”。\r\n\r\n如果失去了服务独立部署（交付）的能力，一个微服务架构的威力将大打折扣，我们的系统虽然在物理上被拆分成了多个小的服务，但是如果从最终交付的角度来看，仍然是以一个整体存在的，就像单体应用一样，存在诸多的问题。\r\n为什么服务的独立交付并不简单？\r\n\r\n那为什么不能让每一个服务都独立部署到产品环境呢？问题的答案是：不是不能，而是不敢！\r\n\r\n为了表达清楚，让我们来看个例子吧。\r\n\r\n像下图一样，我现在就是那个程序员帅哥（本色出演），突然有一天心血来潮，动手开发了一个网上商城。代码Push到Github并通过CI构建持续交付流水线，最终自动化部署到云端产品环境，供用户访问使用。\r\n\r\n随着用户和访问量的增加，需求和功能也越来越多，系统也变得越发复杂。\r\n\r\n从网上了解到最近有个叫微服务的架构非常火爆，我也赶了回时髦，当然也觉得这种架构确实可以帮助我解决现在的一些问题。\r\n\r\n经过对系统的分析，我将商城的后台部分拆分出了3个服务，为了简单我们就称之为ABC三个服务。\r\n\r\n\r\n我们假设一个比较极端的情况，三个服务相互调用（先不考虑这样是否合理），每个服务通过自己的持续交付流水线独立部署到产品环境。当前产品环境的各个服务的版本是：A：1.0、B：2.0、C：3.0\r\n\r\n一切都非常完美是不是？看！我们已经做到了服务的独立部署！So easy~\r\n\r\n当然，事情肯定不会那么简单。\r\n\r\n问题出现在当我对A服务做了一次新的提交之后，A服务的最新版本升级到了1.1。不幸的是，这个新的版本意外的破坏了A与B之间的契约，错误的调用了B的接口，导致出现了错误。\r\n\r\n虽然我的A服务和B服务都有比较完备的UT（单元测试），但因为UT无法发现服务之间的集成是否被破坏，所以只有UT作为质量保障的A服务持续交付流水线也自然没有能力发现AB服务集成被破坏的这个问题。最终导致存在问题的A1.1版本被部署到了产品环境，产品环境出现了严重的Bug。\r\n\r\n请问在座的同学，碰到这样的情况，你会如何处理？\r\n\r\n“加集成测试啊！”\r\n\r\n这位同学说的极是，我这么聪明自然也想到了这一点，不就是要测集成吗？UT干不了就加集成测试不就成了。\r\n\r\n为了统一语言，毕竟对于各种测试的叫法太容易引起混淆，参考Martin Fowler在《微服务测试策略》中的定义，我们在本文中将这种测试多服务集成的测试统一称作端到端测试（End-to-End tests，简称E2E测试）。\r\n\r\n添加了E2E测试之后，我的交付流水线就变成了下面这个样子。\r\n\r\n因为有了E2E测试的存在，问题迎刃而解，当A服务的新版本破坏了与B服务的集成时，E2E测试就会及时诊断出来，并阻止A服务的最新版本向产品环境流动，保证产品环境不被破坏。\r\n\r\n这样看似没有什么问题，通过添加E2E测试，解决了服务间集成的验证问题，但在不知不觉中，我们也失去了微服务架构的那个重要的特性：“服务的独立交付”。\r\n\r\n怎么讲？别急，我们再往下看。\r\n\r\n假设A服务的修复过程中，B和C服务也提交了新的代码，我们假设这两个提交是没有问题的，但因为A服务的1.1版本导致E2E测试挂掉的问题还没有被修复，所以B和C的新版本也被E2E测试拦了下来，此时的E2E测试就像是一个亮起红灯的路口，阻塞了所有服务通往产品环境的通道。\r\n\r\n所以说，随着集中E2E测试的添加，质量被保障的同时，我们的“微服务架构”也已悄然失去了服务独立交付的能力，杀敌一千自损八百，损失惨重！\r\n\r\n这并不是我假想的场景，在我自己经历的几个真实项目中，这个问题都在一直困扰着我们。带来了各种各样的衍生问题，例如E2E测试长时间失败，无人修复，修复难度大，服务交付堵塞，为了保持交付通路畅通还不得不引入同样存在很大副作用的CodeFrezze机制和提交Token机制等。\r\n\r\n可以看到，虽然我们能够在代码库，在部署结构上，甚至在组织上进行服务化拆分，但就因为这最后一个交付的十里路口，最后这一个红绿灯，让所有的服务又纠缠在了一起，所有的服务化拆分形同虚设，最终我们得到的也只是一个看起来像微服务架构的单体应用而已。\r\n拆除红绿灯，各行其道，收复失地！\r\n\r\n那，如何才能将这个“红绿灯”拆除，让服务可以在有质量保障的前提下还可以做到独立交付呢？这就是本文要解决的问题，让我们继续往下看。\r\n\r\n我的解决方法其实也很简单：Inline E2E tests。\r\n\r\n即并不添加新的集中的Pipeline做E2E测试，而是为每一个服务的Pipeline都添加一个相同的E2E测试的Stage，就相当于将E2E测试Inline到每个服务各自的部署流水线中，如下图所示。\r\n\r\n其实Inline E2E测试还不是最关键的，最关键的变化点就是假设A服务有了新的提交，运行到A服务自己Pipeline的E2E测试的时候，此时的E2E测试并不是像之前一样获取B和C服务的最新代码库版本做集成验证，而获取当前产品环境上的B和C服务的已部署当前版本做集成验证。\r\n\r\n例如，如图所示A服务的版本从1.0升级到了1.1，当前产品环境的B和C的版本是2.0和3.0。在执行A服务Pipeline上的E2E测试时，验证出A1.1和B2.0集成存在问题，测试变红，Pipeline挂掉，从而阻断了A服务的1.1版本部署到产品环境，保证了产品环境不会被A的1.1版本破坏。\r\n\r\n同样，假设A还没有被修复之前，B也有了新的提交，产生了一个新的版本B2.1，这时在B服务Pipeline上的E2E测试并不获取当前A服务的代码库最新版本1.1做集成测试，而是获取产品环境上的当前版本A1.0版本做集成测试。我们假设B2.1和A1.0之间的集成没有问题，测试通过，所以B的2.1版本就被成功的交付到了产品环境，而此时产品环境的A服务的版本仍是1.0。\r\n\r\n看！服务之间的阻塞被神奇的解决了，服务再也不会被堵在一个统一的十字路口，而是各行其道，A的车道出了事故，是A的问题，应该由A来承担后果和解决问题，不应该影响到其他服务，其他服务依然可以持续的交付到产品环境。\r\n向前看是持续集成，向后看是持续交付！\r\n\r\n看到这里可能有些小伙伴会感到有些失望。咋呼半天，不就是将E2E测试整到每个服务的Pipeline里，再把获取版本从最新代码改成产品环境么？有啥厉害的。\r\n\r\n但是，在我看来，这个看似简单的变化，意义却是重大的：它揭示了“持续集成”和“持续交付”的一个主要区别。\r\n\r\n“持续集成”和”持续交付”，这两个概念相信大家一定都不陌生，在软件领域也被提了不少年头了，不算什么新概念新技术。但对于这两个概念，我们经常一起提及，也经常混淆，搞不清楚两者的区别到底是什么，可能认为持续交付只不过是持续集成的演进版，新瓶装旧酒而已。\r\n\r\n但其实它们却有着本质的区别。\r\n\r\n“持续集成”关注的是各个集成单元之前最新版本的集成问题，即是不是某个集成单元的最新版本破坏了系统整体的集成，我管这种视角叫：向“前”看。\r\n\r\n而“持续交付”关注的应该不是集成单元最新版本之间的集成问题，而是某个集成单元的最新版本是否可以（能和敢）部署到产品环境。换句话说就是维持产品环境的其他服务不变，只将当前集成单元的最新版本部署到产品环境，产品是否依然可用，不被破坏。所以在“持续交付”的视角下，应该关注的是当前集成单元与产品环境上的其他服务的版本是否兼容，我管这种视角叫：向“后”看。\r\n\r\n向前看是持续集成，向后看才是持续交付，如果前后都不看那就是在裸奔。\r\n\r\n但是肯定早有同学在心里疑惑，将E2E测试下放到每一个服务自己的Pipeline中，靠谱么？是不是太重了？根据测试金字塔，E2E测试应该是属于靠近金字塔顶端的测试种类，无论从数量和覆盖范围应该也都不会太多，怎么能靠它来保障服务之间的所有集成点和契约呢？\r\n主角登场-契约测试\r\n\r\n细心的同学肯定已经发现上面最后一张图中，我已经悄悄的把E2E测试变为了CT，即Contract Test，契约测试。\r\n\r\n契约测试也是这两年伴随微服务架构的兴起，经常被提及的一种比较新的测试类型。在测试金字塔中，他的位置介于E2E和Component Tests（可以理解成单个服务的API测试）之间。\r\n\r\n简单的理解，契约测试就是一种可以用类似于单元测试的技术验证两两服务之间集成的测试技术。它相比于更低层次的单元测试的优势是可以测集成（两两服务之间），相比于更高层次的E2E测试的优势是实现方式上又类似于单元测试，更轻量，跑的更快，覆盖的范围也自然可以更广更细。\r\n\r\n使用契约测试替换掉E2E测试之后，整个架构也会变得更复杂一些，目前契约测试的框架也有很多，如大家常常提到的Pact或是SpringContracts等等。这里我先以Pact为例予以说明，其他框架实现上可能有些差别，但是思路是一致的。\r\n\r\nA服务调用B服务的一个API，我们就称为A和B之间存在了一个契约，即B应该按照这个契约提供一个满足契约要求的API，而A也应该按照这个契约约定的方式来调用B的这个API。在这个过程中A作为调用方，我们称之为Consumer端。B作为被调用方，我们称之为Provider端。\r\n\r\n如果A和B都履行契约，按照契约定义的约定调用和被调用，我们就可以认为集成不会有问题。但无论是B擅自修改了API破坏了契约，还是A擅自修改了调用API的方式破坏了契约，都会导致契约被破坏，反应到测试上就是契约测试会失败，反应到产品上就是功能被破坏，出现Bug。\r\n\r\n每个契约，例如A->B，都会有Consumer端和Provider端生成的两个产出物：分别是a-b.consumer.json.1.1(由Consumer端生成的契约文件，所以版本也是Consumer端A的版本号)和a-b.provider.jar.2.0（由Provider端生成的契约验证测试包，他由Provider端生成，所以版本是B的版本）。这个jar包其实就是一组测试，他的输入是a-b.consumer.json，产出则是测试的结果，也就是契约的验证结果：成功或是失败。\r\n\r\n可以把A服务产出的契约文件a-b.consumer.json.1.1想象成一把钥匙，把B服务产出的Provider端的测试a-b.provider.jar.2.0想象成一把锁。那契约测试的执行过程就像是用这把钥匙试着去打开这把锁：如果可以打开，我们认为这A1.1->B2.0的契约是满足的，反之契约就是被破坏了。\r\n\r\n值得注意的一点就是，契约测试不像E2E测试，它是有方向的，所以我们看到a-b和b-a是两个不同的契约。\r\n\r\n所以，只有当A1.1->B2.0和B2.0->A1.1双向的契约都被验证通过后，我们才能认为A1.1版本和B2.0版本的集成是没有问题的。\r\n用契约测试替换E2E测试\r\n\r\n回到前面的例子上，假设我们已经构建了ABC三个服务两两之间的契约测试。此时，A服务有了新的提交升级到了1.1版本，那我们如何才能通过契约测试来验证A1.1版本能否交付到产品环境呢？\r\n\r\n答案就是只要通过A的1.1版本的最新代码，生成所有A作为Consumer端的契约文件（a-b.consumer.json.1.1和a-c.consumer.json.1.1），用这两把“钥匙”去试着开（作为输入执行Provider端测试）产品环境对应的两把“锁”（a-b.provider.jar.2.0和a-c.provider.jar.3.0）。\r\n\r\n如果都可以打开（测试通过）的话，就证明A的新版本1.1作为Consumer端与产品环境的B和C服务是兼容的。\r\n\r\n等等，别着急，还没完……\r\n\r\n因为我们还需要考虑A作为Provider的情况，做法还是通过A的1.1版本的最新代码生成A版本作为Provider端的契约测试（b-a.provider.jar.1.1和c-a.provider.jar.1.1），拿着这两把“新锁”，然后试着用产品环境上的两把“钥匙”（b-a.consumer.json.2.0和c-a.consumer.json3.0）去开。\r\n\r\n如果也都可以打开（测试通过）的话，就证明A的新版本1.1作为Provider端与产品环境的B和C服务也是兼容的。\r\n\r\n至此，当验证了A的新版本1.1无论是作为调用端还是被调用端都与产品环境上的其他服务契约满足后，我们就认为A1.1与B2.0和C3.0集成是没有问题的，也就代表A1.1可以被放心地部署到产品环境中，替代现在的1.0版本。\r\n最后，敲黑板划重点\r\n\r\n    微服务架构下的独立部署（交付）很重要，但往往容易被忽视，没有被引起足够重视。\r\n    为了实现微服务的独立持续交付，我们要向“后”看，不要向“前”看，即关注当前变更服务与部署环境中其他服务的兼容性而不是关注当前变更服务与其他服务最新版本的兼容性。\r\n    用契约测试来替代E2E测试，降低测试成本，提高测试覆盖，尽早测试。并通过不断地完善契约管理，保障微服务架构质量和避免微服务架构腐化僵化。\r\n','#微服务#/#cloud#/#架构师#/#部署#',3,NULL,3,'yc','2019-03-09',NULL,NULL,'最近经常在项目或是社区里听到大家谈论微服务架构，但谈论的焦点更多集中在微服务拆分，分布式架构，微服务门槛，DevOps配套设施等话题上。\r\n\r\n但是在我眼里，真正能称之为微服务架构的少之又少。原因也很简单，我所见到的很多所谓的微服务架构项目，大多都没有做到微服务架构的一个基本要求：服务的独立部署（交付）。',NULL,NULL,NULL,NULL,NULL),(118,'老干部','','','李开复给女儿的信：你该如何度过大学生涯','images/4.jpg','Dear Daughter: \r\n亲爱的女儿： \r\n　　As we drove off from Columbia, I wanted to write a letter to you to tell you all that is on my mind. \r\n\r\n当我们开车驶出哥伦比亚大学的时候，我想写一封信给你，告诉你盘旋在我脑中的想法。 \r\n\r\n　　First, I want to tell you how proud we are. Getting into Columbia is a real testament of what a great well-rounded student you are. Your academic, artistic, and social skills have truly blossomed in the last few years. Whether it is getting the highest grade in Calculus, completing your elegant fashion design, successfully selling your painted running shoes, or becoming one of the top orators in Model United Nations, you have become a talented and accomplished young woman. You should be as proud of yourself as we are. \r\n\r\n首先，我想告诉你我们为你感到特别骄傲。进入哥伦比亚大学证明你是一个全面发展的优秀学生，你的学业、艺术和社交技能最近都有卓越的表现，无论是你在微积分上得了最高分，完成自己典雅的时尚的设计，成功卖出绘制的跑鞋，还是在“模拟联合国”演说中成为表现最突出的人之一，你毫无疑问已经是一个多才多艺的女孩。你的父母为你感到骄傲，你也应该像我们一样为自己感到自豪。 \r\n\r\n　　I will always remember the first moment I held you in my arms. I felt a tingling sensation that directly touched my heart. It was an intoxicating feeling I will always have. It must be that \"father-daughter connection\" which will bind us for life. I will always remember singing you lullaby while I rocked you to sleep. When I put you down, it was always with both relief (she finally fell asleep!) and regret (wishing I could hold you longer). And I will always remember taking you to the playground, and watching you having so much fun. You were so cute and adorable, and that is why everybody loved you so. \r\n\r\n我会永远记得第一次将你抱在臂弯的那一刻，一种新鲜激动的感觉瞬间触动了我的心，那是一种永远让我陶醉的感觉，就是那种将我们的一生都联结在一起的“父女情结”。我也常常想起我唱着催眠曲轻摇你入睡，当我把你放下的时候，常常觉得既解脱又惋惜，一方面我想，她终于睡着了！另一方面，我又多么希望自己可以多抱你一会儿。我还记得带你到运动场，看着你玩得那么开心，你是那样可爱，所有人都非常爱你。 \r\n\r\n　　You have been a great kid ever since you were born, always quiet, empathetic, attentive, and well-mannered. You were three when we built our house. I remember you quietly followed us every weekend for more than ten hours a day to get building supplies. You put up with that boring period without a fuss, happily ate hamburgers every meal in the car, sang with Barney until you fell asleep. When you went to Sunday Chinese school, you studied hard even though it was no fun for you. I cannot believe how lucky we are as parents to have a daughter like you. \r\n\r\n你不但长得可爱，而且是个特别乖巧的孩子。你从不吵闹、为人着想，既听话又有礼貌。当你三岁我们建房子的时候，每个周末十多个小时你都静静地跟着我们去运建筑材料，三餐在车上吃着汉堡，唱着儿歌，唱累了就睡觉，一点都不娇气不抱怨。你去上周日的中文学习班时，尽管一点也不觉得有趣，却依然很努力。我们做父母的能有像你这样的女儿真的感到非常幸运。 \r\n\r\n　　You have been an excellent elder sister. Even though you two had your share of fights, the last few years you have become best friends. Your sister loves you so much, and she loves to make you laugh. She looks up to you, and sees you as her role model. As you saw when we departed, she misses you so much. And I know that you miss her just as much. There is nothing like family, and other than your parents, your sister is the one person who you can trust and confide in. She will be the one to take care of you, and the one you must take care of. There is nothing we wish more than that your sisterhood will continue to bond as you grow older, and that you will take care of each other throughout your lives. For the next four years, do have a short video chat with her every few days, and do email her when you have a chance. \r\n\r\n你也是个很好的姐姐。虽然你们姐妹以前也会打架，但是长大后，你们真的成为了好朋友。妹妹很爱你，很喜欢逗你笑，她把你当成她的榜样看待。我们开车离开哥大后，她非常想你，我知道你也很想她。世界上最宝贵的就是家人。和父母一样，妹妹就是你最可以信任的人。随着年龄的增长，你们姐妹之间的情谊不变，你们互相照应，彼此关心，这就是我最希望见到的事情了。在你的大学四年，有空时你一定要常常跟妹妹视频聊聊天，写写电子邮件。 \r\n\r\n　　College will be the most important years in your life. It is in college that you will truly discover what learning is about. You often question \"what good is this course\". I encourage you to be inquisitive, but I also want to tell you: \"Education is what you have left after all that is taught is forgotten.\" What I mean by that is the materials taught isn\'t as important as you gaining the ability to learn a new subject, and the ability to analyze a new problem. That is really what learning in college is about – this will be the period where you go from teacher-taught to master-inspired, after which you must become self-learner. So do take each subject seriously, and even if what you learn isn\'t critical for your life, the skills of learning will be something you cherish forever. \r\n\r\n大学将是你人生最重要的时光，在大学里你会发现学习的真谛。你以前经常会问到 “这个课程有什么用”，这是个好问题，但是我希望你理解：“教育的真谛就是当你忘记一切所学到的东西之后所剩下的东西。”我的意思是，最重要的不是你学到的具体的知识，而是你学习新事物和解决新问题的能力。这才是大学学习的真正意义——这将是你从被动学习转向自主学习的阶段，之后你会变成一个很好的自学者。所以，即便你所学的不是生活里所急需的，也要认真看待大学里的每一门功课，就算学习的技能你会忘记，学习的能力是你将受用终身的。 \r\n\r\n　　Do not fall into the trap of dogma. There is no single simple answer to any question. Remember during your high school debate class, I always asked you to take on the side that you don\'t believe in? I did that for a reason -- things rarely \"black and white\", and there are always many ways to look at a problem. You will become a better problem solver if you recognized that. This is called \"critical thinking\", and it is the most important thinking skill you need for your life. This also means you need to become tolerant and supportive of others. I will always remember when I went to my Ph.D. advisor and proposed a new thesis topic. He said \"I don\'t agree with you, but I\'ll support you.\" After the years, I have learned this isn\'t just flexibility, it is encouragement of critical thinking, and an empowering style of leadership, and it has become a part of me. I hope it will become a part of you too. \r\n','',3,NULL,6,'yc','2019-03-09',NULL,NULL,'Dear Daughter: \r\n亲爱的女儿： \r\n　　As we drove off from Columbia, I wanted to write a letter to you to tell you all that is on my mind. \r\n\r\n当我们开车驶出哥伦比亚大学的时候，我想写一封信给你，告诉你盘旋在我脑中的想法。 \r\n',NULL,NULL,NULL,NULL,NULL),(120,'老干部','','','测试测试','images/2.jpg','测试','#测试#',2,'2',3,'YC','2019-03-10',NULL,NULL,'测试',NULL,NULL,0,0,NULL);

/*Table structure for table `artical_categories` */

DROP TABLE IF EXISTS `artical_categories`;

CREATE TABLE `artical_categories` (
  `ID` int(11) NOT NULL AUTO_INCREMENT COMMENT '编号',
  `CATEGORY_NAME` varchar(50) DEFAULT NULL COMMENT '分类名称',
  `IS_SHOW` varchar(1) DEFAULT NULL COMMENT '是否首页展示',
  `SHOW_ORDER` int(11) DEFAULT NULL COMMENT '展示序号',
  `ARTICAL_COUNT` int(11) DEFAULT NULL COMMENT '文章数量',
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8 COMMENT='分类';

/*Data for the table `artical_categories` */

insert  into `artical_categories`(`ID`,`CATEGORY_NAME`,`IS_SHOW`,`SHOW_ORDER`,`ARTICAL_COUNT`) values (1,'JAVA基础知识',NULL,NULL,NULL),(2,'SpringBoot','Y',3,NULL),(3,'微服务架构','Y',2,NULL),(4,'分布式缓存技术','Y',1,NULL),(5,'大数据','Y',4,NULL),(6,'博文鉴赏',NULL,NULL,NULL);

/*Table structure for table `artical_topics` */

DROP TABLE IF EXISTS `artical_topics`;

CREATE TABLE `artical_topics` (
  `ID` int(11) NOT NULL AUTO_INCREMENT COMMENT '专题编号',
  `TOPIC_NAME` varchar(50) DEFAULT NULL COMMENT '专题名称',
  `ARTICAL_COUNT` int(11) DEFAULT NULL COMMENT '内容数量',
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8 COMMENT='专题';

/*Data for the table `artical_topics` */

insert  into `artical_topics`(`ID`,`TOPIC_NAME`,`ARTICAL_COUNT`) values (1,'专题1',0),(2,'专题2',0),(3,'专题3',0),(4,'专题4',0);

/*Table structure for table `books` */

DROP TABLE IF EXISTS `books`;

CREATE TABLE `books` (
  `ID` int(11) NOT NULL AUTO_INCREMENT COMMENT '序号',
  `BOOK_ID` int(11) NOT NULL COMMENT '书籍编号',
  `BOOK_NAME` varchar(255) DEFAULT NULL COMMENT '书籍名称',
  `AUTHOR` varchar(255) DEFAULT NULL COMMENT '作者',
  `PUBLISH_DATE` varchar(20) DEFAULT NULL COMMENT '发布日期',
  `URL` varchar(255) DEFAULT NULL COMMENT '书籍所在网络URL',
  `LOCAL_PATH` varchar(255) DEFAULT NULL COMMENT '本地存放地址',
  `ADD_DATE` varchar(20) DEFAULT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8;

/*Data for the table `books` */

insert  into `books`(`ID`,`BOOK_ID`,`BOOK_NAME`,`AUTHOR`,`PUBLISH_DATE`,`URL`,`LOCAL_PATH`,`ADD_DATE`) values (1,1,'EasyUI+1.3中文帮助手册',NULL,NULL,NULL,NULL,'2019-02-28'),(2,2,'J2EE API 帮助文档',NULL,NULL,NULL,NULL,'2019-02-28'),(3,3,'javascript正则表达式',NULL,NULL,NULL,NULL,'2019-02-28'),(4,4,'jQuery[1].validate.js+API中文',NULL,NULL,NULL,NULL,'2019-02-28'),(5,5,'JSTL标签说明文档',NULL,NULL,NULL,NULL,'2019-02-28'),(6,6,'JDK_API_1_6_zh_CN帮助文档(中文版)',NULL,NULL,NULL,NULL,'2019-02-28'),(7,7,'Struts2.0中文教程',NULL,NULL,NULL,NULL,'2019-02-28'),(8,8,'Thinking.in.Java',NULL,NULL,NULL,NULL,'2019-02-28'),(9,9,'w3cschool菜鸟教程20141021',NULL,NULL,NULL,NULL,'2019-02-28'),(10,10,'EasyUI+1.3中文帮助手册',NULL,NULL,NULL,NULL,'2019-02-28');

/*Table structure for table `editmd` */

DROP TABLE IF EXISTS `editmd`;

CREATE TABLE `editmd` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '序号',
  `content` longtext COMMENT '文本内容',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

/*Data for the table `editmd` */

insert  into `editmd`(`id`,`content`) values (1,'**asdfa \r\n# Markdown语法\r\n## 一、更改字体、大小、颜色\r\n<font face=\"黑体\">黑体</font>  <font face=\"微软雅黑\">微软雅黑</font>  <font face=\"宋体\">宋体</font>  <font face=\"STCAIYUN\">我是华文彩云</font>\r\n<font color=red>我是红色</font>  <font color=#008000>我是绿色</font>  <font color=Blue>我是蓝色</font>\r\n<font size=5>我是尺寸</font> \r\n<font face=\"黑体\" color=green size=5>我是黑体，绿色，尺寸为5</font>\r\n## 二、为文字添加背景色\r\n<table><tr><td bgcolor=green><font face=\"黑体\" size=5>背景色-green</font></td></tr><tr><td bgcolor=yellow>背景色-yellow</td></tr><tr><td bgcolor=blue>背景色-blue</td></tr></table>');

/*Table structure for table `my_info` */

DROP TABLE IF EXISTS `my_info`;

CREATE TABLE `my_info` (
  `ID` int(11) NOT NULL AUTO_INCREMENT COMMENT '编号',
  `NICKNAME` varchar(30) DEFAULT NULL COMMENT '网名',
  `WEBNAME` varchar(40) DEFAULT NULL COMMENT '网站名称',
  `OCCUPATION` varchar(80) DEFAULT NULL COMMENT '职业',
  `ADDRESS` varchar(120) DEFAULT NULL COMMENT '地址',
  `EMAIL` varchar(60) DEFAULT NULL COMMENT '邮箱',
  `WEBSITE` varchar(200) DEFAULT NULL COMMENT '网址',
  `QQ` varchar(20) DEFAULT NULL COMMENT 'QQ号码',
  `WECHAT` varchar(30) DEFAULT NULL COMMENT '微信号',
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COMMENT='个人信息';

/*Data for the table `my_info` */

insert  into `my_info`(`ID`,`NICKNAME`,`WEBNAME`,`OCCUPATION`,`ADDRESS`,`EMAIL`,`WEBSITE`,`QQ`,`WECHAT`) values (1,'骑鱼的猫 | 老干部','老干部的咖啡屋','程序员、软件工程师、艺术家','陕西省-西安市','LIHAIRUIZONE@SINA.COM','WWW.NERSSIA.CN',NULL,NULL);

/*Table structure for table `nav_index` */

DROP TABLE IF EXISTS `nav_index`;

CREATE TABLE `nav_index` (
  `ID` int(11) NOT NULL AUTO_INCREMENT COMMENT '编号',
  `NAME` varchar(50) DEFAULT NULL COMMENT '名称',
  `SHOW_HOMEPAGE` varchar(1) DEFAULT NULL COMMENT '是否首页展示 Y-展示 N/null-不展示',
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8 COMMENT='首页索引';

/*Data for the table `nav_index` */

insert  into `nav_index`(`ID`,`NAME`,`SHOW_HOMEPAGE`) values (1,'个人感悟','Y'),(2,'我的原创','Y'),(3,'美文鉴赏','Y'),(4,'智慧生活','Y'),(5,'技术专栏','Y');

/*Table structure for table `online_tools` */

DROP TABLE IF EXISTS `online_tools`;

CREATE TABLE `online_tools` (
  `ID` int(11) NOT NULL AUTO_INCREMENT COMMENT '序号',
  `TOOL_ID` int(11) DEFAULT NULL COMMENT '工具编号',
  `TOOL_NAME` varchar(50) DEFAULT NULL COMMENT '工具名称',
  `URL` varchar(255) DEFAULT NULL COMMENT '网址',
  `INTRODUCE` longtext COMMENT '工具介绍',
  `ADD_DATE` varchar(20) DEFAULT NULL COMMENT '添加日期',
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

/*Data for the table `online_tools` */

insert  into `online_tools`(`ID`,`TOOL_ID`,`TOOL_NAME`,`URL`,`INTRODUCE`,`ADD_DATE`) values (1,NULL,'JSON格式转款器',NULL,NULL,'2019-03-08'),(2,NULL,'组织机构代码在线生成器',NULL,NULL,'2019-03-08'),(3,NULL,'HTML转PDF在线工具',NULL,NULL,'2019-03-08'),(4,NULL,'SpringBoot项目快速生成工具',NULL,NULL,'2019-03-08'),(5,NULL,'屏幕拾色器',NULL,NULL,'2019-03-08');

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
